{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../../src/fable-library/Util.ts","webpack:///../../src/fable-library/Types.ts","webpack:///../../src/fable-library/Option.ts","webpack:///../../../src/fable-library/lib/big.js","webpack:///../../src/fable-library/Decimal.ts","webpack:///../../src/fable-library/Int32.ts","webpack:///../../../src/fable-library/lib/long.js","webpack:///../../src/fable-library/Long.ts","webpack:///../../src/fable-library/Seq.ts","webpack:///../../src/fable-library/Reflection.ts","webpack:///../../src/fable-library/Date.ts","webpack:///../../src/fable-library/String.ts","webpack:///./.fable/fable-library.2.4.11/MutableMap.js","webpack:///./.fable/fable-library.2.4.11/Map.js","webpack:///./.fable/fable-library.2.4.11/MutableSet.js","webpack:///./.fable/fable-library.2.4.11/Set.js","webpack:///./.fable/fable-library.2.4.11/Array.js","webpack:///./.fable/fable-library.2.4.11/List.js","webpack:///src/common/changeable-values.fs","webpack:///src/common/domain.fs","webpack:///src/common/project-dependency-data.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/IntMap.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/HashSet.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Core/AdaptiveToken.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Utilities/PriorityQueue.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/HashSetDelta.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/FableHelpers.fs","webpack:///./.fable/fable-library.2.4.11/FSharp.Collections.js","webpack:///./.fable/fable-library.2.4.11/System.Text.js","webpack:///./.fable/fable-library.2.4.11/FSharp.Core.js","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/MapExt.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/Index.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/IndexList.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/IndexListDelta.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/HashMapDelta.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/Deltas.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Traceable/Instances.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Core/Core.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Utilities/Utilities.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Core/Transaction.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Core/AdaptiveObject.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Traceable/History.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/AdaptiveHashMap/ChangeableHashMap.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/AdaptiveValue/AdaptiveValue.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Core/Callbacks.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Datastructures/MultiSetMap.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Utilities/Cache.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/Traceable/CountingHashSet.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/AdaptiveValue/AdaptiveReduction.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/AdaptiveHashSet/AdaptiveHashSet.fs","webpack:///.fable/FSharp.Data.Adaptive.0.0.8/AdaptiveHashMap/AdaptiveHashMap.fs","webpack:///src/common/adaptive-values.fs","webpack:///.fable/Feliz.0.68.0/React.fs","webpack:///src/ui/app.fs"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Union","this","rm","P","x","e","y","Long","$this","other","rep","utc","date","getUTCHours","getHours","precision","MutableMap$00602","declare","pairs","comparer","this$","FSharpRef","contents","Map","iterate","pair","MutableMap$00602$$Add$$5BDDA1","MutableMap$00602$$TryFindIndex$$2B595","this$$$1","k","h","GetHashCode","matchValue","tryGetValue","findIndex","pair$$1","Equals","MutableMap$00602$$TryFind$$2B595","this$$$2","k$$1","matchValue$$1","getItemFromDict","MutableMap$00602$$Clear","this$$$4","clear","MutableMap$00602$$get_Count","this$$$5","sumBy","pairs$$2","values","GetZero","Add","$x$$2","$y$$3","this$$$8","k$$4","v$$1","matchValue$$4","msg","toText","printf","clo1","Error","set","MutableMap$00602$$Remove$$2B595","this$$$10","k$$6","matchValue$$6","iterator","this$$$11","toIterator","getEnumerator","delay","collect","pairs$$3","map","pair$$3","item","Clear","Contains","item$$1","matchValue$$7","equals","CopyTo","array","arrayIndex","iterateIndexed","i$$10","Remove","item$$2","matchValue$$8","k$$7","entries","k$$8","this$$$6","k$$2","matchValue$$2","MutableMap$00602$$get_Item$$2B595","has","k$$9","this$$$9","k$$5","matchValue$$5","MutableMap$00602$$ContainsKey$$2B595","keys","pair$$5","k$$10","v$$2","this$$$7","k$$3","v","matchValue$$3","MutableMap$00602$$set_Item$$5BDDA1","pair$$6","MapTree$00602","tag","fields","MapTreeModule$$$size","MapTreeModule$$$sizeAux","$acc$$5","$m$$6","acc","MapTreeModule$$$find","$comparer$$1$$23","$k$$3$$24","$m$$4$$25","comparer$$1","m$$4","Compare","c$$3","MapTreeModule$$$mem","$comparer$$10$$59","$k$$12$$60","$m$$8$$61","comparer$$10","k$$12","m$$8","c$$8","MapTreeModule$002EMapIterator$00602","arg1","arg2","stack","started","Record","MapTreeModule$$$collapseLHS","$stack$$111","tail","List","head","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","MapTreeModule$$$toSeq","s$$8","unfold","en$$1","MoveNext","Current","i$$3","MapTreeModule$$$moveNext","Reset","Dispose","FSharpMap","comparer$$17","tree","FSharpMap$$get_Tree","__$$5","FSharpMap$$get_Item$$2B595","__$$8","k$$29","FSharpMap$$get_Count","__$$20","FSharpMap$$ContainsKey$$2B595","__$$21","k$$31","createMutable","source$$5","comparer$$23","MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3","toString","join","map$$2","kv","clo2","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3692","structuralHash","Math","abs","that","CompareTo","obj","res$$4","finished","e1","e2","kvp1","kvp2","c$$10","compare","isDisposable","_arg1$$1","k$$34","k$$35","kv$$1","k$$36","v$$26","kv$$2","MutableSet$00601","items","MutableSet$00601$$Add$$2B595","MutableSet$00601$$$$002Ector$$Z6150332D","MutableSet$00601$$TryFindIndex$$2B595","MutableSet$00601$$Clear","MutableSet$00601$$get_Count","MutableSet$00601$$Contains$$2B595","MutableSet$00601$$Remove$$2B595","values$$1","value$$2","i$$8","item$$3","add","add_","x$$1","SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","l$$1","r$$1","SetTreeModule$$$height","SetTreeModule$$$tolerance","SetTreeModule$$$mk","l$$2","r$$2","hl","hr","SetTreeModule$$$rebalance","t1","t2","t1h","t2h","SetTreeModule$$$add","t$$1","c$$1","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$104","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$compare","comparer$$18","s1","s2","$comparer$$17$$112","$l1$$113","$l2$$114","SetTreeModule$$$compareStacks","$target$$115","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","l1","l2","c$$7","c$$9","SetTreeModule$$$ofSeq","comparer$$20","c$$11","ie","$comparer$$19$$126","$acc$$11$$127","$e$$128","comparer$$19","acc$$11","SetTreeModule$$$mkFromEnumerator","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$$$002Ector$$2528C5CB","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","FSharpSet$$get_IsEmpty","s$$26","ofList","li","comparer$$28","source$$1","comparer$$32","MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D","fill","target","targetIndex","count","fold2","folder$$11","state$$15","array1$$9","array2$$9","folder$$10","state$$14","array1$$8","array2$$8","acc$$6","i$$43","foldIndexed2","_arg1","acc$$7","x$$20","y$$7","ofSeq","source$$7","cons$$31","from","source$$8","cons$$32","foldIndexed","f$$1","state","xs$$7","$f$$12","$i$$13","$acc$$14","$_arg1$$5$$15","f","_arg1$$5","foldIndexedAux","fold","$f$$2$$19","$state$$1$$20","$xs$$8$$21","f$$2","state$$1","xs$$8","reverse","xs$$9","acc$$1","x$$6","xs$$12","fold$$1","acc$$3","x$$9","append","xs$$28","ys$$10","acc$$10","x$$15","f$$15","xs$$29","collect$$1","f$$16","xs$$31","mapIndexed","f$$17","xs$$33","acc$$12","x$$17","f$$24","xs$$46","unitVar0","x$$24","ofArray","xs$$50","res$$1","i$$9","tryPickIndexed","f$$29","xs$$52","$f$$28$$120","$i$$10$$121","$_arg1$$9$$122","tryPickIndexedAux","f$$28","_arg1$$9","tryPick","f$$30","xs$$53","_arg1$$10","x$$29","tryFindIndexed","f$$32","xs$$55","i$$11","x$$31","some","tryFind","f$$33","xs$$56","_arg1$$11","x$$32","findIndexed","f$$34","xs$$57","value$$1","find","f$$35","xs$$58","_arg1$$12","x$$34","filter","f$$42","xs$$71","acc$$17","x$$37","choose","f$$44","xs$$74","acc$$18","x$$39","reduce","f$$47","_arg1$$16","forAll","f$$49","xs$$79","acc$$19","x$$41","exists","$f$$51$$180","$_arg1$$18$$181","f$$51","_arg1$$18","sortBy","projection","xs$$90","comparer$$3","xs$$91","Array","sort","x$$50","y$$18","groupBy","projection$$5","xs$$139","eq$$4","dict","createMutable$$1","matchValue$$16","addToDict","result$$1","key$$1","map$$1","x$$21","String","res","that$$1","el","properties","reactElement","repoText","solutionSortOrder","solution","domainSln","infrastructureSln","sharedSln","commonInterfacesProj","commonModelsProj","commonExtensionsProj","productInterfacesProj","productModelsProj","orderInterfacesProj","orderModelsProj","infrastructureInterfacesProj","repositoriesProj","repositoriesTestsProj","toolsProj","commonInterfacesDeps","commonModelsDeps","commonExtensionsDeps","productInterfacesDeps","productModelsDeps","orderInterfacesDeps","orderModelsDeps","infrastructureInterfacesDeps","repositoriesDeps","repositoriesTestsDeps","toolsDeps","( .ctor )","tryRemove","l'","r'","updateWithKey","x6","x5","x4","x3","x2","x1","x0","alter","g1","g2","combine","_arg2","binOp","merge1","p1","m1","r1","p2","m2","go","merge2","r2","k2","merge","k1","m1'","m2'","a","( arg10@ )","mapOptionWithKey","z","ToSeq","moveNext","change","del","lh","rh","ll","lm","lp","lr","rl","rp","rr","valueEqual","cnt","list","remove","newL","newR","lk","rk","store","empty","hash","newStore","mapping","Empty","tuple","seq","tupledArg","Store","source","suffix","Count","arg10","rest","eq","patternInput","rv","inner","current","update","changed","deltaCnt","old","oldList","oldValue","newValue","newMap","_arg3","b","mapOptionWithKey2","_arg6","_arg4","_arg5","predicate","seed","folder","_arg13","collide","_hash","_arg14","_arg15","_arg17","_arg18","_arg19","removed","_arg22","TryFind","Find","_arg23","forLoopVar","listHash","_arg27","op","defaultArg","IsEmpty","big","Combine","OfSeq","cmp","si","di","a1","a2","WeakMap","ComparisonIdentity$$$Structural","x$$2","y$$1","StringBuilder","capacity","buf","LanguagePrimitives$$$FastGenericComparer","ComparisonIdentity$0024$0024$0024Structural","Operators$$$Lock","_lockObj","action","height","size","mk","rebalance","filter1","filterAux","spliceOutSuccessor","v3","left","right","split","unionWithOpt","iterOpt","existsOpt","mapiOpt","v2","chooseiOpt","s'","tryMinAux","tryMaxAux","collapseLHS","alreadyFinished","notStarted","mkIterator","move","defaultComparer","ls","tryAt","choosei","lv","found","choose2","Tree","tryMin","tryMax","resolve","unionWith","loop","activePatternResult13932","activePatternResult13952","mkIEnumerator","__","iter","mapi","kvp","TryMinKey","min","TryMaxKey","Choose2","Key","arr","off","count$$11","array$$39","cons$$21","count$$12","trim","largeuint","( >>> )","maxBits","Data","ceilDiv32","ri","( <<< )","mask","folder$$4","state$$6","delegateArg0$$2","delegateArg1$$2","predicate$$27","array1$$12","array2$$12","x$$22","y$$9","compareArray","number","dexp","slot","inSlot","Index","arg20","Number","DenomiatorExp","Zero","Value","content","TryAt","index","elements","vi","dst","Item","Content","UnionWith","activePatternResult16914","_arg21","_arg20","delta","deltaR","lStore","rValues","arg0","lValues","_value","deltas","rStore","maxDelta","hasRemove","effective","activePatternResult17273","_key","finalDeltas","mempty","monoid","tempty","tmonoid","trace","arrayThreshold","isNew","idx","count$$16","array$$43","cons$$25","newCnt","Consume","EmptyOutputSet","emptyArray","caller","pi","heap","bubbleUp","cl","cr","pushDown","release","currentId","copyOfStruct","Id","extract","Level","Transaction","RunningTransaction","finalizers","outputs","AllInputsProcessed","OutOfDate","Mark","Outputs","newLevel","InputChanged","Enqueue","Commit","getCurrentTransaction","WeakOutputSet","AdaptiveObject","token","depth","CurrentEvaluationDepth","maxAllowedLevel","LevelChangedException","w","Weak","MarkObject","AllInputProcessedObject","InputChangedObject","ConstantObject","arg00","Compute","take","Tag","dirty","input","finalize","self","oldState","Update","node","ops","addRefToLast","mergeIntoPrev","reader","appendCounter","shouldPrune","last","first","prev","getPrev","getFirstAndSize","totalDeltaSize","next","pruneNode","prune","wn","GetValue","Trace","Read","State","vops","_caller","finalState","initial","_token","IsConstant","ob","oc","od","inputDirty","va","oldResult","oa","value1","value2","vb","value3","vc","compute","Lazy","map2","project","pd","table","cb","id","cbs","check","emptyOutputs","callbackObjects","cbo","MultiCallbackObject","stateHook","callback","Subscribe","getMultiCallback","wasLast","isNull","nullCache","ref","RevokeAndGetDeleted","_arg8","_arg7","_arg10","_arg9","_arg11","_arg12","_arg16","ApplyDelta","ComputeDelta","ApplyDeltaNoRefCount","reduction","GetReader","working","activePatternResult20714","activePatternResult20771","sub","activePatternResult20869","removeIndex","ov","newState","sum","targets","createReader","setStore","history","mapStore","activePatternResult21148","activePatternResult21168","activePatternResult21188","real","activePatternResult21206","GetChanges","activePatternResult21253","activePatternResult21267","deleted","newSet","valChanged","oldReader","rem","newReader","cache","activePatternResult21323","Revoke","activePatternResult21369","Invoke","activePatternResult21416","Invoke2","changes","lops","rops","lop","rop","view","activePatternResult22574","dependencyPaths","projectDependencies","direct","dependencies","paths","currentDepth","currentPaths","DependencyPath","newPaths","traverse","affected","pps","projectDependencyPaths","uniqueSelfOrDirectWithMaxDepth","maxDepth","comparer$$12","comparer$$14","i$$16","xs$$115","$target$$242","i$$20","xs$$119","$i$$17$$240","$xs$$116$$241","i$$17","xs$$116","skipInner","x$$58","y$$24","projection$$2","comparer$$11","deepest","x$$55","y$$21","$_arg1$$3$$5","_arg1$$3","x$$56","y$$22","projectsDependencyPaths","cTabLatestDoneMap","renderElement","withKey","props","propsWithKey","children","xs","solutionCodeChanges","packagedProjectStatuses","sorted","packagedProjectStatus","color","projectColour","cPackagedProjectStatusMap","HasCodeChanges","analysis","currentTab","latestDone","groupedAndSorted","pdp","elems","element","container","functionComponent","packagedProjectStatusMap","showingVisualization","preamble","codeChanges","tabValue","muiTab","tabLatestDoneMap","analysisTab","label","iconClassName","handler","cCurrentTab","cShowingVisualization","app","document","getElementById"],"mappings":"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","file":"app.213dee0ed4b55cbd1144.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([202,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArray(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n//# sourceMappingURL=Util.js.map","import { combineHashCodes, compare, compareArrays, equalArrays, equals, identityHash, numberHash, structuralHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n    return;\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map((x) => String(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map((x) => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    const hashes = this.fields.map((x) => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n    return;\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport function anonRecord(o) {\n    return Object.assign(Object.create(Record.prototype), o);\n}\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter((k) => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map((k) => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n    this.message = \"The match cases were incomplete\";\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { return; });\n//# sourceMappingURL=Types.js.map","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    x = (x === undefined) ? null : x;\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\nexport function map(f, arg) {\n    return arg == null ? arg : some(f(value(arg)));\n}\nexport function mapMultiple(predicate, ...args) {\n    return args.every((x) => x != null) ? predicate.apply(null, args) : null;\n}\nexport function bind(f, arg) {\n    return arg == null ? arg : f(value(arg));\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return null;\n    }\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n//# sourceMappingURL=Option.js.map","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n//# sourceMappingURL=big.js.map","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Decimal.js.map","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [_all, sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [_all, sign, prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n//# sourceMappingURL=Int32.js.map","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\nexport default Long;\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n//# sourceMappingURL=long.js.map","import { isValid } from \"./Int32\";\nimport * as Long from \"./lib/long\";\nexport default Long.Long;\nexport const get_Zero = Long.ZERO;\nexport const get_One = Long.ONE;\nexport const op_Addition = Long.add;\nexport const op_Subtraction = Long.subtract;\nexport const op_Multiply = Long.multiply;\nexport const op_Division = Long.divide;\nexport const op_Modulus = Long.modulo;\nexport const op_UnaryNegation = Long.negate;\nexport const op_LeftShift = Long.shiftLeft;\nexport const op_RightShift = Long.shiftRight;\nexport const op_RightShiftUnsigned = Long.shiftRightUnsigned;\nexport const op_BitwiseAnd = Long.and;\nexport const op_BitwiseOr = Long.or;\nexport const op_ExclusiveOr = Long.xor;\nexport const op_LogicalNot = Long.not;\nexport const op_LessThan = Long.lessThan;\nexport const op_LessThanOrEqual = Long.lessThanOrEqual;\nexport const op_GreaterThan = Long.greaterThan;\nexport const op_GreaterThanOrEqual = Long.greaterThanOrEqual;\nexport const op_Equality = Long.equals;\nexport const op_Inequality = Long.notEquals;\nexport const equals = Long.equals;\nexport const compare = Long.compare;\nexport const fromInt = Long.fromInt;\nexport const fromBits = Long.fromBits;\nexport const fromBytes = Long.fromBytes;\nexport const fromNumber = Long.fromNumber;\nexport const fromString = Long.fromString;\nexport const fromValue = Long.fromValue;\nexport const toInt = Long.toInt;\nexport const toBytes = Long.toBytes;\nexport const toNumber = Long.toNumber;\nexport const toString = Long.toString;\nexport const getLowBits = Long.getLowBits;\nexport const getHighBits = Long.getHighBits;\nexport const getLowBitsUnsigned = Long.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = Long.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && Long.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return Long.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return Long.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, Long.ZERO];\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(Long.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return Long.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = Long.compare(step, unsigned ? Long.UZERO : Long.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = Long.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Long.js.map","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : null, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return {\n        [Symbol.iterator]: () => {\n            let window = [];\n            const iter = source[Symbol.iterator]();\n            return {\n                next: () => {\n                    let cur;\n                    while (window.length < windowSize) {\n                        if ((cur = iter.next()).done) {\n                            return { done: true };\n                        }\n                        window.push(cur.value);\n                    }\n                    const value = window;\n                    window = window.slice(1);\n                    return { done: false, value };\n                },\n            };\n        },\n    };\n}\n//# sourceMappingURL=Seq.js.map","import { anonRecord as makeAnonRecord, Record, Union } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function anonRecord(...fields) {\n    return new TypeInfo(\"\", null, null, () => fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, null, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enumType(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], null, null, null, enumCases);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    return isArray(t) ? t.generics[0] : null;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\nexport function getEnumUnderlyingType(t) {\n    return t.generics[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t)) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t)) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [null, v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str) {\n    try {\n        const v = parseEnum(t, str);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, null];\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null;\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t)) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t)) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return new uci.declaringType.constructor(uci.tag, uci.name, ...values);\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.constructor != null\n        ? new t.constructor(...values)\n        : makeAnonRecord(fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {}));\n}\nexport function makeTuple(values, t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n//# sourceMappingURL=Reflection.js.map","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + date.offset);\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(date.offset);\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, date.offset);\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport default function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + date.offset, kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(str) {\n    let date = new Date(str);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(str);\n        if (m != null) {\n            let baseDate = null;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v) {\n    try {\n        // if value is null or whitespace, parsing fails\n        if (v == null || v.trim() === \"\") {\n            return [false, minValue()];\n        }\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\" ? add(d, -that) : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\n//# sourceMappingURL=Date.js.map","import { toString as dateToString } from \"./Date\";\nimport Decimal from \"./Decimal\";\nimport Long, * as _Long from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\n// These are used for formatting and only take longs and decimals into account (no bigint)\nfunction isNumeric(x) {\n    return typeof x === \"number\" || x instanceof Long || x instanceof Decimal;\n}\nfunction isLessThan(x, y) {\n    if (x instanceof Long) {\n        return _Long.compare(x, y) < 0;\n    }\n    else if (x instanceof Decimal) {\n        return x.cmp(y) < 0;\n    }\n    else {\n        return x < y;\n    }\n}\nfunction multiply(x, y) {\n    if (x instanceof Long) {\n        return _Long.op_Multiply(x, y);\n    }\n    else if (x instanceof Decimal) {\n        return x.mul(y);\n    }\n    else {\n        return x * y;\n    }\n}\nfunction toFixed(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toFixed(dp).substr(1);\n    }\n    else {\n        return x.toFixed(dp);\n    }\n}\nfunction toPrecision(x, sd) {\n    if (x instanceof Long) {\n        return String(x) + (0).toPrecision(sd).substr(1);\n    }\n    else {\n        return x.toPrecision(sd);\n    }\n}\nfunction toExponential(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toExponential(dp).substr(1);\n    }\n    else {\n        return x.toExponential(dp);\n    }\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return _Long.toString(x.unsigned ? x : _Long.fromBytes(_Long.toBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, padLength, precision, format) => {\n        let sign = \"\";\n        if (isNumeric(rep)) {\n            if (format.toLowerCase() !== \"x\") {\n                if (isLessThan(rep, 0)) {\n                    rep = multiply(rep, -1);\n                    sign = \"-\";\n                }\n                else {\n                    if (flags.indexOf(\" \") >= 0) {\n                        sign = \" \";\n                    }\n                    else if (flags.indexOf(\"+\") >= 0) {\n                        sign = \"+\";\n                    }\n                }\n            }\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 6;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"x\":\n                    rep = toHex(rep);\n                    break;\n                case \"X\":\n                    rep = toHex(rep).toUpperCase();\n                    break;\n                default: // AOid\n                    rep = String(rep);\n                    break;\n            }\n        }\n        padLength = parseInt(padLength, 10);\n        if (!isNaN(padLength)) {\n            const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n            const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n            const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n            if (ch === \"0\") {\n                rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n                rep = sign + rep;\n            }\n            else {\n                rep = padLeft(sign + rep, padLength, ch, minusFlag);\n            }\n        }\n        else {\n            rep = sign + rep;\n        }\n        const once = prefix + rep;\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\n//# sourceMappingURL=String.js.map","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { equals, getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { toText, printf } from \"./String.js\";\nexport const MutableMap$00602 = declare(function Fable_Collections_MutableMap(pairs, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1[\"entries@23\"] = new Map([]);\n  $this$$1[\"init@20-1\"] = 1;\n  iterate(function (pair) {\n    MutableMap$00602$$Add$$5BDDA1(this$.contents, pair[0], pair[1]);\n  }, pairs);\n});\nexport function MutableMap$00602$reflection($gen$$4, $gen$$5) {\n  return type(\"Fable.Collections.MutableMap`2\", [$gen$$4, $gen$$5]);\n}\nexport function MutableMap$00602$$$$002Ector$$6623D9B3(pairs, comparer) {\n  return this instanceof MutableMap$00602 ? MutableMap$00602.call(this, pairs, comparer) : new MutableMap$00602(pairs, comparer);\n}\n\nfunction MutableMap$00602$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1[\"entries@23\"], h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (pair$$1) {\n      return this$$$1.comparer.Equals(k, pair$$1[0]);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nexport function MutableMap$00602$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableMap$00602$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$10;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$10 = 0;\n    } else {\n      $target$$10 = 1;\n    }\n  } else {\n    $target$$10 = 1;\n  }\n\n  switch ($target$$10) {\n    case 0:\n      {\n        return getItemFromDict(this$$$2[\"entries@23\"], matchValue$$1[1])[matchValue$$1[2]];\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\nexport function MutableMap$00602$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableMap$00602$$Clear(this$$$4) {\n  this$$$4[\"entries@23\"].clear();\n}\nexport function MutableMap$00602$$get_Count(this$$$5) {\n  const source = this$$$5[\"entries@23\"].values();\n  return sumBy(function projection(pairs$$2) {\n    return pairs$$2.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableMap$00602$$get_Item$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableMap$00602$$TryFind$$2B595(this$$$6, k$$2);\n\n  if (matchValue$$2 != null) {\n    const pair$$2 = matchValue$$2;\n    return pair$$2[1];\n  } else {\n    throw new Error(\"The item was not found in collection\");\n  }\n}\nexport function MutableMap$00602$$set_Item$$5BDDA1(this$$$7, k$$3, v) {\n  const matchValue$$3 = MutableMap$00602$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$20;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$20 = 0;\n    } else {\n      $target$$20 = 1;\n    }\n  } else {\n    $target$$20 = 1;\n  }\n\n  switch ($target$$20) {\n    case 0:\n      {\n        getItemFromDict(this$$$7[\"entries@23\"], matchValue$$3[1])[matchValue$$3[2]] = [k$$3, v];\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$3[0]) {\n          const value = getItemFromDict(this$$$7[\"entries@23\"], matchValue$$3[1]).push([k$$3, v]);\n          null, null;\n        } else {\n          this$$$7[\"entries@23\"].set(matchValue$$3[1], [[k$$3, v]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$Add$$5BDDA1(this$$$8, k$$4, v$$1) {\n  const matchValue$$4 = MutableMap$00602$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$24;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$24 = 0;\n    } else {\n      $target$$24 = 1;\n    }\n  } else {\n    $target$$24 = 1;\n  }\n\n  switch ($target$$24) {\n    case 0:\n      {\n        let msg;\n        const clo1 = toText(printf(\"An item with the same key has already been added. Key: %A\"));\n        msg = clo1(k$$4);\n        throw new Error(msg);\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$4[0]) {\n          const value$$1 = getItemFromDict(this$$$8[\"entries@23\"], matchValue$$4[1]).push([k$$4, v$$1]);\n          null, null;\n        } else {\n          this$$$8[\"entries@23\"].set(matchValue$$4[1], [[k$$4, v$$1]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$ContainsKey$$2B595(this$$$9, k$$5) {\n  const matchValue$$5 = MutableMap$00602$$TryFindIndex$$2B595(this$$$9, k$$5);\n  var $target$$27;\n\n  if (matchValue$$5[0]) {\n    if (matchValue$$5[2] > -1) {\n      $target$$27 = 0;\n    } else {\n      $target$$27 = 1;\n    }\n  } else {\n    $target$$27 = 1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableMap$00602$$Remove$$2B595(this$$$10, k$$6) {\n  const matchValue$$6 = MutableMap$00602$$TryFindIndex$$2B595(this$$$10, k$$6);\n  var $target$$30;\n\n  if (matchValue$$6[0]) {\n    if (matchValue$$6[2] > -1) {\n      $target$$30 = 0;\n    } else {\n      $target$$30 = 1;\n    }\n  } else {\n    $target$$30 = 1;\n  }\n\n  switch ($target$$30) {\n    case 0:\n      {\n        getItemFromDict(this$$$10[\"entries@23\"], matchValue$$6[1]).splice(matchValue$$6[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableMap$00602.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$11 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (pairs$$3) {\n      return map(function (pair$$3) {\n        return pair$$3;\n      }, pairs$$3);\n    }, this$$$11[\"entries@23\"].values());\n  }), getEnumerator(elems)));\n};\n\nMutableMap$00602.prototype.Add = function (item) {\n  const this$$$12 = this;\n  MutableMap$00602$$Add$$5BDDA1(this$$$12, item[0], item[1]);\n};\n\nMutableMap$00602.prototype.Clear = function () {\n  const this$$$13 = this;\n  MutableMap$00602$$Clear(this$$$13);\n};\n\nMutableMap$00602.prototype.Contains = function (item$$1) {\n  var p;\n  const this$$$14 = this;\n  const matchValue$$7 = MutableMap$00602$$TryFind$$2B595(this$$$14, item$$1[0]);\n  var $target$$31;\n\n  if (matchValue$$7 != null) {\n    if (p = matchValue$$7, equals(p[1], item$$1[1])) {\n      $target$$31 = 0;\n    } else {\n      $target$$31 = 1;\n    }\n  } else {\n    $target$$31 = 1;\n  }\n\n  switch ($target$$31) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n};\n\nMutableMap$00602.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$15 = this;\n  iterateIndexed(function action(i$$10, e) {\n    array[arrayIndex + i$$10] = e;\n  }, this$$$15);\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$16 = this;\n    return MutableMap$00602$$get_Count(this$$$16) | 0;\n  }\n});\nObject.defineProperty(MutableMap$00602.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableMap$00602.prototype.Remove = function (item$$2) {\n  const this$$$18 = this;\n  const matchValue$$8 = MutableMap$00602$$TryFind$$2B595(this$$$18, item$$2[0]);\n\n  if (matchValue$$8 != null) {\n    const pair$$4 = matchValue$$8;\n\n    if (equals(pair$$4[1], item$$2[1])) {\n      const value$$2 = MutableMap$00602$$Remove$$2B595(this$$$18, item$$2[0]);\n      value$$2, null;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$19 = this;\n    return MutableMap$00602$$get_Count(this$$$19) | 0;\n  }\n});\n\nMutableMap$00602.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableMap$00602$$Clear(this$$$20);\n};\n\nMutableMap$00602.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableMap$00602$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableMap$00602.prototype.entries = function () {\n  const this$$$22 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$22);\n};\n\nMutableMap$00602.prototype.get = function (k$$8) {\n  const this$$$23 = this;\n  return MutableMap$00602$$get_Item$$2B595(this$$$23, k$$8);\n};\n\nMutableMap$00602.prototype.has = function (k$$9) {\n  const this$$$24 = this;\n  return MutableMap$00602$$ContainsKey$$2B595(this$$$24, k$$9);\n};\n\nMutableMap$00602.prototype.keys = function () {\n  const this$$$25 = this;\n  return map(function mapping$$1(pair$$5) {\n    return pair$$5[0];\n  }, this$$$25);\n};\n\nMutableMap$00602.prototype.set = function (k$$10, v$$2) {\n  const this$$$26 = this;\n  MutableMap$00602$$set_Item$$5BDDA1(this$$$26, k$$10, v$$2);\n  return this$$$26;\n};\n\nMutableMap$00602.prototype.values = function () {\n  const this$$$27 = this;\n  return map(function mapping$$2(pair$$6) {\n    return pair$$6[1];\n  }, this$$$27);\n};","import { Record, List, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection.js\";\nimport { value as value$$3, some } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$2, unfold, getEnumerator, fold as fold$$1 } from \"./Seq.js\";\nimport { compare, structuralHash, isDisposable } from \"./Util.js\";\nimport { join, toText, printf } from \"./String.js\";\nimport { MutableMap$00602$$$$002Ector$$6623D9B3 as MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3 } from \"./MutableMap\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux($acc$$5, $m$$6) {\n  MapTreeModule$$$sizeAux: while (true) {\n    const acc = $acc$$5,\n          m = $m$$6;\n\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          $acc$$5 = MapTreeModule$$$sizeAux(acc + 1, m.fields[2]);\n          $m$$6 = m.fields[3];\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        return _arg1.fields[4] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  var $target$$14;\n\n  if (l$$1.tag === 0) {\n    if (r$$1.tag === 0) {\n      $target$$14 = 0;\n    } else {\n      $target$$14 = 1;\n    }\n  } else {\n    $target$$14 = 1;\n  }\n\n  switch ($target$$14) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      if (MapTreeModule$$$height(t2.fields[2]) > t1h + 1) {\n        if (t2.fields[2].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2].fields[2]), t2.fields[2].fields[0], t2.fields[2].fields[1], MapTreeModule$$$mk(t2.fields[2].fields[3], t2.fields[0], t2.fields[1], t2.fields[3]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2]), t2.fields[0], t2.fields[1], t2.fields[3]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      if (MapTreeModule$$$height(t1.fields[3]) > t2h + 1) {\n        if (t1.fields[3].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], t1.fields[3].fields[2]), t1.fields[3].fields[0], t1.fields[3].fields[1], MapTreeModule$$$mk(t1.fields[3].fields[3], k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], MapTreeModule$$$mk(t1.fields[3], k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const c = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[2]), m$$3.fields[0], m$$3.fields[1], m$$3.fields[3]);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3.fields[2], m$$3.fields[3], m$$3.fields[4]);\n        } else {\n          return MapTreeModule$$$rebalance(m$$3.fields[2], m$$3.fields[0], m$$3.fields[1], MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find($comparer$$1$$23, $k$$3$$24, $m$$4$$25) {\n  MapTreeModule$$$find: while (true) {\n    const comparer$$1 = $comparer$$1$$23,\n          k$$3 = $k$$3$$24,\n          m$$4 = $m$$4$$25;\n\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const c$$2 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$2 === 0) {\n            return m$$4.fields[1];\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const c$$3 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$3 < 0) {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[2];\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return m$$4.fields[1];\n          } else {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[3];\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind($comparer$$2$$26, $k$$4$$27, $m$$5$$28) {\n  MapTreeModule$$$tryFind: while (true) {\n    const comparer$$2 = $comparer$$2$$26,\n          k$$4 = $k$$4$$27,\n          m$$5 = $m$$5$$28;\n\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const c$$4 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$4 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const c$$5 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$5 < 0) {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[2];\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[3];\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($comparer$$4$$35, $f$$1$$36, $s$$37, $acc_0$$38, $acc_1$$39) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          f$$1 = $f$$1$$36,\n          s = $s$$37,\n          acc_0 = $acc_0$$38,\n          acc_1 = $acc_1$$39;\n\n    switch (s.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc_0, acc_1);\n        }\n\n      case 2:\n        {\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, s.fields[3], acc_0, acc_1);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc$$2[0], acc$$2[1]);\n          $comparer$$4$$35 = comparer$$4;\n          $f$$1$$36 = f$$1;\n          $s$$37 = s.fields[2];\n          $acc_0$$38 = acc$$3[0];\n          $acc_1$$39 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return [acc_0, acc_1];\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($comparer$$7$$48, $f$$4$$49, $s$$2$$50, $acc$$5$$51) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$48,\n          f$$4 = $f$$4$$49,\n          s$$2 = $s$$2$$50,\n          acc$$5 = $acc$$5$$51;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$5);\n        }\n\n      case 2:\n        {\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, s$$2.fields[2], acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$6);\n          $comparer$$7$$48 = comparer$$7;\n          $f$$4$$49 = f$$4;\n          $s$$2$$50 = s$$2.fields[3];\n          $acc$$5$$51 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        return [m$$6.fields[0], m$$6.fields[1], new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        if (m$$6.fields[2].tag === 0) {\n          return [m$$6.fields[0], m$$6.fields[1], m$$6.fields[3]];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(m$$6.fields[2]);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], m$$6.fields[0], m$$6.fields[1], m$$6.fields[3])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const c$$6 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const c$$7 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[2]), m$$7.fields[0], m$$7.fields[1], m$$7.fields[3]);\n        } else if (c$$7 === 0) {\n          if (m$$7.fields[2].tag === 0) {\n            return m$$7.fields[3];\n          } else if (m$$7.fields[3].tag === 0) {\n            return m$$7.fields[2];\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(m$$7.fields[3]);\n            return MapTreeModule$$$mk(m$$7.fields[2], patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(m$$7.fields[2], m$$7.fields[0], m$$7.fields[1], MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem($comparer$$10$$59, $k$$12$$60, $m$$8$$61) {\n  MapTreeModule$$$mem: while (true) {\n    const comparer$$10 = $comparer$$10$$59,\n          k$$12 = $k$$12$$60,\n          m$$8 = $m$$8$$61;\n\n    switch (m$$8.tag) {\n      case 1:\n        {\n          return comparer$$10.Compare(k$$12, m$$8.fields[0]) === 0;\n        }\n\n      case 2:\n        {\n          const c$$8 = comparer$$10.Compare(k$$12, m$$8.fields[0]) | 0;\n\n          if (c$$8 < 0) {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[2];\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[3];\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($f$$6$$62, $m$$9$$63) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $f$$6$$62,\n          m$$9 = $m$$9$$63;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          break;\n        }\n\n      case 2:\n        {\n          MapTreeModule$$$iter(f$$6, m$$9.fields[2]);\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          $f$$6$$62 = f$$6;\n          $m$$9$$63 = m$$9.fields[3];\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($f$$7$$64, $m$$10$$65) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $f$$7$$64,\n          m$$10 = $m$$10$$65;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          return f$$7(m$$10.fields[0], m$$10.fields[1]);\n        }\n\n      case 2:\n        {\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, m$$10.fields[2]);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(m$$10.fields[0], m$$10.fields[1]);\n\n            if (matchValue$$3 == null) {\n              $f$$7$$64 = f$$7;\n              $m$$10$$65 = m$$10.fields[3];\n              continue MapTreeModule$$$tryPick;\n            } else {\n              return matchValue$$3;\n            }\n          } else {\n            return matchValue$$2;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($f$$8$$66, $m$$11$$67) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $f$$8$$66,\n          m$$11 = $m$$11$$67;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          return f$$8(m$$11.fields[0], m$$11.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$exists(f$$8, m$$11.fields[2]) ? true : f$$8(m$$11.fields[0], m$$11.fields[1])) {\n            return true;\n          } else {\n            $f$$8$$66 = f$$8;\n            $m$$11$$67 = m$$11.fields[3];\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($f$$9$$68, $m$$12$$69) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $f$$9$$68,\n          m$$12 = $m$$12$$69;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          return f$$9(m$$12.fields[0], m$$12.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$forall(f$$9, m$$12.fields[2]) ? f$$9(m$$12.fields[0], m$$12.fields[1]) : false) {\n            $f$$9$$68 = f$$9;\n            $m$$12$$69 = m$$12.fields[3];\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$13.fields[0], f$$10(m$$13.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2 = MapTreeModule$$$map(f$$10, m$$13.fields[2]);\n        const v2$$16 = f$$10(m$$13.fields[1]);\n        const r2 = MapTreeModule$$$map(f$$10, m$$13.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$13.fields[0], v2$$16, l2, r2, m$$13.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$14.fields[0], f$$11(m$$14.fields[0], m$$14.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[2]);\n        const v2$$17 = f$$11(m$$14.fields[0], m$$14.fields[1]);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$14.fields[0], v2$$17, l2$$1, r2$$1, m$$14.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($f$$12$$74, $m$$15$$75, $x$$1$$76) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $f$$12$$74,\n          m$$15 = $m$$15$$75,\n          x$$1 = $x$$1$$76;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          return f$$12(m$$15.fields[0], m$$15.fields[1], x$$1);\n        }\n\n      case 2:\n        {\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, m$$15.fields[3], x$$1);\n          const x$$3 = f$$12(m$$15.fields[0], m$$15.fields[1], x$$2);\n          $f$$12$$74 = f$$12;\n          $m$$15$$75 = m$$15.fields[2];\n          $x$$1$$76 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($f$$13$$77, $x$$4$$78, $m$$16$$79) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $f$$13$$77,\n          x$$4 = $x$$4$$78,\n          m$$16 = $m$$16$$79;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          return f$$13(x$$4, m$$16.fields[0], m$$16.fields[1]);\n        }\n\n      case 2:\n        {\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, m$$16.fields[2]);\n          const x$$6 = f$$13(x$$5, m$$16.fields[0], m$$16.fields[1]);\n          $f$$13$$77 = f$$13;\n          $x$$4$$78 = x$$6;\n          $m$$16$$79 = m$$16.fields[3];\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const cLoKey = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const cLoKey$$1 = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[2], x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[3], x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop($m$$19$$92, $acc$$8$$93) {\n  MapTreeModule$$$loop: while (true) {\n    const m$$19 = $m$$19$$92,\n          acc$$8 = $acc$$8$$93;\n\n    switch (m$$19.tag) {\n      case 1:\n        {\n          return new List([m$$19.fields[0], m$$19.fields[1]], acc$$8);\n        }\n\n      case 2:\n        {\n          $m$$19$$92 = m$$19.fields[2];\n          $acc$$8$$93 = new List([m$$19.fields[0], m$$19.fields[1]], MapTreeModule$$$loop(m$$19.fields[3], acc$$8));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator($comparer$$14$$97, $acc$$10$$98, $e$$99) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$14 = $comparer$$14$$97,\n          acc$$10 = $acc$$10$$98,\n          e = $e$$99;\n\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      $comparer$$14$$97 = comparer$$14;\n      $acc$$10$$98 = MapTreeModule$$$add(comparer$$14, patternInput$$2[0], patternInput$$2[1], acc$$10);\n      $e$$99 = e;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$109, $gen$$110) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$109, $gen$$110], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$109, $gen$$110))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS($stack$$111) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$111;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        $stack$$111 = new List(stack.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", stack.head.fields[0], stack.head.fields[1]), new List(stack.head.fields[3], stack.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        $stack$$111 = stack.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$115, $gen$$116) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$115, $gen$$116]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this instanceof MapTreeModule$002EmkIEnumerator$0027$00602 ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$120, $gen$$121) {\n  return type(\"Map.FSharpMap\", [$gen$$120, $gen$$121]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this instanceof FSharpMap ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  var strings;\n  const this$ = this;\n  return \"map [\" + (strings = (map$$2(function mapping(kv) {\n    const clo1 = toText(printf(\"(%A, %A)\"));\n    const clo2 = clo1(kv[0]);\n    return clo2(kv[1]);\n  }, this$)), (join(\"; \", strings))) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const patternInput$$5 = e$$1.Current;\n    const activePatternResult3692 = patternInput$$5;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3692[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3692[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(obj));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nObject.defineProperty(FSharpMap.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$3 = this;\n    return FSharpMap$$get_Count(this$$$3) | 0;\n  }\n});\n\nFSharpMap.prototype.clear = function () {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.delete = function (_arg1$$1) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.entries = function () {\n  const this$$$4 = this;\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$4));\n};\n\nFSharpMap.prototype.get = function (k$$34) {\n  const this$$$5 = this;\n  return FSharpMap$$get_Item$$2B595(this$$$5, k$$34);\n};\n\nFSharpMap.prototype.has = function (k$$35) {\n  const this$$$6 = this;\n  return FSharpMap$$ContainsKey$$2B595(this$$$6, k$$35);\n};\n\nFSharpMap.prototype.keys = function () {\n  const this$$$7 = this;\n  const source$$1 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$7));\n  return map$$2(function mapping$$1(kv$$1) {\n    return kv$$1[0];\n  }, source$$1);\n};\n\nFSharpMap.prototype.set = function (k$$36, v$$26) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.values = function () {\n  const this$$$8 = this;\n  const source$$2 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$8));\n  return map$$2(function mapping$$2(kv$$2) {\n    return kv$$2[1];\n  }, source$$2);\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$37, v$$27, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$37, v$$27);\n}\nexport function find(k$$38, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$38);\n}\nexport function tryFind(k$$39, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$39);\n}\nexport function remove(k$$40, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$40);\n}\nexport function containsKey(k$$41, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$41);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  let _arg1$$2;\n\n  const m$$42 = FSharpMap$$get_Tree(m$$41);\n  _arg1$$2 = MapTreeModule$$$tryPick(function f$$39(k$$42, v$$28) {\n    if (f$$38(k$$42, v$$28)) {\n      return some(k$$42);\n    } else {\n      return null;\n    }\n  }, m$$42);\n\n  if (_arg1$$2 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$43 = value$$3(_arg1$$2);\n    return k$$43;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  const m$$44 = FSharpMap$$get_Tree(m$$43);\n  return MapTreeModule$$$tryPick(function f$$41(k$$44, v$$29) {\n    if (f$$40(k$$44, v$$29)) {\n      return some(k$$44);\n    } else {\n      return null;\n    }\n  }, m$$44);\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  let res$$6;\n  const len = FSharpMap$$get_Count(m$$46) | 0;\n  res$$6 = new Array(len);\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$45) {\n      return MapTreeModule$$$find(comparer$$22, k$$45, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      const source$$3 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$3(kv$$3) {\n        return kv$$3[0];\n      }, source$$3);\n    },\n\n    set(k$$46, v$$30) {\n      const this$$$9 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$46, v$$30, tree$$1);\n      return this$$$9;\n    },\n\n    values() {\n      const source$$4 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$4(kv$$4) {\n        return kv$$4[1];\n      }, source$$4);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$5, comparer$$23) {\n  const map$$1 = MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3(source$$5, comparer$$23);\n  return map$$1;\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$31) {\n    const key = projection(v$$31);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$31);\n    } else {\n      const value = dict.set(key, [v$$31]);\n      value, null;\n    }\n  }, xs);\n  return map$$2(function mapping$$5(kv$$5) {\n    return [kv$$5[0], kv$$5[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    const value$$2 = dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1);\n    value$$2, null;\n  }, xs$$1);\n  return map$$2(function mapping$$6(kv$$6) {\n    return [kv$$6[0], kv$$6[1]];\n  }, dict$$1);\n}\nexport function count(m$$47) {\n  return FSharpMap$$get_Count(m$$47);\n}","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { some } from \"./Option.js\";\nexport const MutableSet$00601 = declare(function Fable_Collections_MutableSet(items, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1[\"entries@24\"] = new Map([]);\n  $this$$1[\"init@21-2\"] = 1;\n  iterate(function (item) {\n    const value = MutableSet$00601$$Add$$2B595(this$.contents, item);\n    value, null;\n  }, items);\n});\nexport function MutableSet$00601$reflection($gen$$4) {\n  return type(\"Fable.Collections.MutableSet`1\", [$gen$$4]);\n}\nexport function MutableSet$00601$$$$002Ector$$Z6150332D(items, comparer) {\n  return this instanceof MutableSet$00601 ? MutableSet$00601.call(this, items, comparer) : new MutableSet$00601(items, comparer);\n}\n\nfunction MutableSet$00601$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1[\"entries@24\"], h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (v) {\n      return this$$$1.comparer.Equals(k, v);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nfunction MutableSet$00601$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableSet$00601$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$9;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 1;\n    }\n  } else {\n    $target$$9 = 1;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return some(getItemFromDict(this$$$2[\"entries@24\"], matchValue$$1[1])[matchValue$$1[2]]);\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\n\nexport function MutableSet$00601$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableSet$00601$$Clear(this$$$4) {\n  this$$$4[\"entries@24\"].clear();\n}\nexport function MutableSet$00601$$get_Count(this$$$5) {\n  const source = this$$$5[\"entries@24\"].values();\n  return sumBy(function projection(pairs) {\n    return pairs.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableSet$00601$$Add$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableSet$00601$$TryFindIndex$$2B595(this$$$6, k$$2);\n  var $target$$16;\n\n  if (matchValue$$2[0]) {\n    if (matchValue$$2[2] > -1) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return false;\n      }\n\n    case 1:\n      {\n        if (matchValue$$2[0]) {\n          const value$$1 = getItemFromDict(this$$$6[\"entries@24\"], matchValue$$2[1]).push(k$$2);\n          null, null;\n          return true;\n        } else {\n          this$$$6[\"entries@24\"].set(matchValue$$2[1], [k$$2]);\n          return true;\n        }\n      }\n  }\n}\nexport function MutableSet$00601$$Contains$$2B595(this$$$7, k$$3) {\n  const matchValue$$3 = MutableSet$00601$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$19;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$19 = 0;\n    } else {\n      $target$$19 = 1;\n    }\n  } else {\n    $target$$19 = 1;\n  }\n\n  switch ($target$$19) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableSet$00601$$Remove$$2B595(this$$$8, k$$4) {\n  const matchValue$$4 = MutableSet$00601$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$22;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$22 = 0;\n    } else {\n      $target$$22 = 1;\n    }\n  } else {\n    $target$$22 = 1;\n  }\n\n  switch ($target$$22) {\n    case 0:\n      {\n        getItemFromDict(this$$$8[\"entries@24\"], matchValue$$4[1]).splice(matchValue$$4[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableSet$00601.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$9 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (values$$1) {\n      return map(function (value$$2) {\n        return value$$2;\n      }, values$$1);\n    }, this$$$9[\"entries@24\"].values());\n  }), getEnumerator(elems)));\n};\n\nMutableSet$00601.prototype.Add = function (item$$1) {\n  const this$$$10 = this;\n  const value$$3 = MutableSet$00601$$Add$$2B595(this$$$10, item$$1);\n  value$$3, null;\n};\n\nMutableSet$00601.prototype.Clear = function () {\n  const this$$$11 = this;\n  MutableSet$00601$$Clear(this$$$11);\n};\n\nMutableSet$00601.prototype.Contains = function (item$$2) {\n  const this$$$12 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$12, item$$2);\n};\n\nMutableSet$00601.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$13 = this;\n  iterateIndexed(function action(i$$8, e) {\n    array[arrayIndex + i$$8] = e;\n  }, this$$$13);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$14 = this;\n    return MutableSet$00601$$get_Count(this$$$14) | 0;\n  }\n});\nObject.defineProperty(MutableSet$00601.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableSet$00601.prototype.Remove = function (item$$3) {\n  const this$$$16 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$16, item$$3);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$17 = this;\n    return MutableSet$00601$$get_Count(this$$$17) | 0;\n  }\n});\n\nMutableSet$00601.prototype.add = function (k$$5) {\n  const this$$$18 = this;\n  const value$$4 = MutableSet$00601$$Add$$2B595(this$$$18, k$$5);\n  value$$4, null;\n  return this$$$18;\n};\n\nMutableSet$00601.prototype.add_ = function (k$$6) {\n  const this$$$19 = this;\n  return MutableSet$00601$$Add$$2B595(this$$$19, k$$6);\n};\n\nMutableSet$00601.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableSet$00601$$Clear(this$$$20);\n};\n\nMutableSet$00601.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableSet$00601.prototype.has = function (k$$8) {\n  const this$$$22 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$22, k$$8);\n};\n\nMutableSet$00601.prototype.keys = function () {\n  const this$$$23 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$23);\n};\n\nMutableSet$00601.prototype.values = function () {\n  const this$$$24 = this;\n  return map(function mapping$$1(x$$1) {\n    return x$$1;\n  }, this$$$24);\n};\n\nMutableSet$00601.prototype.entries = function () {\n  const this$$$25 = this;\n  return map(function mapping$$2(v$$1) {\n    return [v$$1, v$$1];\n  }, this$$$25);\n};","import { List, Record, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection.js\";\nimport { value as value$$2, some, Choice } from \"./Option.js\";\nimport { iterate as iterate$$1, delay, collect, singleton as singleton$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq.js\";\nimport { structuralHash, isDisposable } from \"./Util.js\";\nimport { join } from \"./String.js\";\nimport { MutableSet$00601$$Add$$2B595 as MutableSet$002400601$0024$0024Add$0024$00242B595, MutableSet$00601$$$$002Ector$$Z6150332D as MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D } from \"./MutableSet\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux($s$$4, $acc$$5) {\n  SetTreeModule$$$countAux: while (true) {\n    const s = $s$$4,\n          acc = $acc$$5;\n\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          $s$$4 = s.fields[1];\n          $acc$$5 = SetTreeModule$$$countAux(s.fields[2], acc + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        return t.fields[3] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  var $target$$16;\n\n  if (l$$2.tag === 0) {\n    if (r$$2.tag === 0) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      if (SetTreeModule$$$height(t2.fields[1]) > t1h + 1) {\n        if (t2.fields[1].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1].fields[1]), t2.fields[1].fields[0], SetTreeModule$$$mk(t2.fields[1].fields[2], t2.fields[0], t2.fields[2]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1]), t2.fields[0], t2.fields[2]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      if (SetTreeModule$$$height(t1.fields[2]) > t2h + 1) {\n        if (t1.fields[2].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1.fields[1], t1.fields[0], t1.fields[2].fields[1]), t1.fields[2].fields[0], SetTreeModule$$$mk(t1.fields[2].fields[2], k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1.fields[1], t1.fields[0], SetTreeModule$$$mk(t1.fields[2], k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const c = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, t$$1.fields[1]), t$$1.fields[0], t$$1.fields[2]);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(t$$1.fields[1], t$$1.fields[0], SetTreeModule$$$add(comparer, k$$2, t$$1.fields[2]));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  var $target$$27, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (t1$$1.tag === 2) {\n    if (t2$$1.tag === 0) {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    } else if (t2$$1.tag === 2) {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    } else {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    }\n  } else if (t1$$1.tag === 1) {\n    if (t2$$1.tag === 2) {\n      $target$$27 = 3;\n      k2$$2 = t2$$1.fields[0];\n      t1$$3 = t1$$1;\n    } else if (t2$$1.tag === 1) {\n      $target$$27 = 4;\n      h1 = t1$$1.fields[3];\n      h2 = t2$$1.fields[3];\n      k1$$1 = t1$$1.fields[0];\n      k2$$3 = t2$$1.fields[0];\n      t11 = t1$$1.fields[1];\n      t12 = t1$$1.fields[2];\n      t21 = t2$$1.fields[1];\n      t22 = t2$$1.fields[2];\n    } else {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    }\n  } else {\n    $target$$27 = 0;\n    t2$$2 = t2$$1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const c$$3 = comparer$$2.Compare(t$$2.fields[0], pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const c$$2 = comparer$$2.Compare(pivot, t$$2.fields[0]) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[1]);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], t$$2.fields[0], t$$2.fields[2])];\n        } else if (c$$2 === 0) {\n          return [t$$2.fields[1], true, t$$2.fields[2]];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[2]);\n          return [SetTreeModule$$$balance(comparer$$2, t$$2.fields[1], t$$2.fields[0], patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        return [t$$3.fields[0], new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        if (t$$3.fields[1].tag === 0) {\n          return [t$$3.fields[0], t$$3.fields[2]];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(t$$3.fields[1]);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], t$$3.fields[0], t$$3.fields[2])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const c$$4 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const c$$5 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[1]), t$$4.fields[0], t$$4.fields[2]);\n        } else if (c$$5 === 0) {\n          if (t$$4.fields[1].tag === 0) {\n            return t$$4.fields[2];\n          } else if (t$$4.fields[2].tag === 0) {\n            return t$$4.fields[1];\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(t$$4.fields[2]);\n            return SetTreeModule$$$mk(t$$4.fields[1], patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(t$$4.fields[1], t$$4.fields[0], SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[2]));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem($comparer$$4$$35, $k$$5$$36, $t$$5$$37) {\n  SetTreeModule$$$mem: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          k$$5 = $k$$5$$36,\n          t$$5 = $t$$5$$37;\n\n    switch (t$$5.tag) {\n      case 2:\n        {\n          return comparer$$4.Compare(k$$5, t$$5.fields[0]) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const c$$6 = comparer$$4.Compare(k$$5, t$$5.fields[0]) | 0;\n\n          if (c$$6 < 0) {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[1];\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[2];\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($f$$38, $t$$6$$39) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $f$$38,\n          t$$6 = $t$$6$$39;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          f(t$$6.fields[0]);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          SetTreeModule$$$iter(f, t$$6.fields[1]);\n          f(t$$6.fields[0]);\n          $f$$38 = f;\n          $t$$6$$39 = t$$6.fields[2];\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($f$$1$$40, $m$$1$$41, $x$$1$$42) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $f$$1$$40,\n          m$$1 = $m$$1$$41,\n          x$$1 = $x$$1$$42;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          return f$$1(m$$1.fields[0], x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          $f$$1$$40 = f$$1;\n          $m$$1$$41 = m$$1.fields[1];\n          $x$$1$$42 = f$$1(m$$1.fields[0], SetTreeModule$$$foldBack(f$$1, m$$1.fields[2], x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($f$$2$$43, $x$$2$$44, $m$$2$$45) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $f$$2$$43,\n          x$$2 = $x$$2$$44,\n          m$$2 = $m$$2$$45;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          return f$$2(x$$2, m$$2.fields[0]);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, m$$2.fields[1]);\n          const x$$4 = f$$2(x$$3, m$$2.fields[0]);\n          $f$$2$$43 = f$$2;\n          $x$$2$$44 = x$$4;\n          $m$$2$$45 = m$$2.fields[2];\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($f$$3$$46, $m$$3$$47) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $f$$3$$46,\n          m$$3 = $m$$3$$47;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          return f$$3(m$$3.fields[0]);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          if (f$$3(m$$3.fields[0]) ? SetTreeModule$$$forall(f$$3, m$$3.fields[1]) : false) {\n            $f$$3$$46 = f$$3;\n            $m$$3$$47 = m$$3.fields[2];\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($f$$4$$48, $m$$4$$49) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $f$$4$$48,\n          m$$4 = $m$$4$$49;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          return f$$4(m$$4.fields[0]);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          if (f$$4(m$$4.fields[0]) ? true : SetTreeModule$$$exists(f$$4, m$$4.fields[1])) {\n            return true;\n          } else {\n            $f$$4$$48 = f$$4;\n            $m$$4$$49 = m$$4.fields[2];\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($comparer$$7$$57, $f$$5$$58, $s$$2$$59, $acc$$1$$60) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$57,\n          f$$5 = $f$$5$$58,\n          s$$2 = $s$$2$$59,\n          acc$$1 = $acc$$1$$60;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          if (f$$5(s$$2.fields[0])) {\n            return SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const acc$$2 = f$$5(s$$2.fields[0]) ? SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1) : acc$$1;\n          $comparer$$7$$57 = comparer$$7;\n          $f$$5$$58 = f$$5;\n          $s$$2$$59 = s$$2.fields[1];\n          $acc$$1$$60 = SetTreeModule$$$filterAux(comparer$$7, f$$5, s$$2.fields[2], acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux($comparer$$9$$64, $m$$6$$65, $acc$$3$$66) {\n  SetTreeModule$$$diffAux: while (true) {\n    const comparer$$9 = $comparer$$9$$64,\n          m$$6 = $m$$6$$65,\n          acc$$3 = $acc$$3$$66;\n\n    switch (m$$6.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          $comparer$$9$$64 = comparer$$9;\n          $m$$6$$65 = m$$6.fields[1];\n          $acc$$3$$66 = SetTreeModule$$$diffAux(comparer$$9, m$$6.fields[2], SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  var $target$$73, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (t1$$4.tag === 0) {\n    $target$$73 = 1;\n    t$$7 = t2$$4;\n  } else if (t1$$4.tag === 2) {\n    if (t2$$4.tag === 0) {\n      $target$$73 = 2;\n      t$$8 = t1$$4;\n    } else if (t2$$4.tag === 2) {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    } else {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    }\n  } else if (t2$$4.tag === 0) {\n    $target$$73 = 2;\n    t$$8 = t1$$4;\n  } else if (t2$$4.tag === 2) {\n    $target$$73 = 4;\n    k2$$17 = t2$$4.fields[0];\n    t1$$5 = t1$$4;\n  } else {\n    $target$$73 = 0;\n    h1$$1 = t1$$4.fields[3];\n    h2$$1 = t2$$4.fields[3];\n    k1$$4 = t1$$4.fields[0];\n    k2$$16 = t2$$4.fields[0];\n    t11$$2 = t1$$4.fields[1];\n    t12$$2 = t1$$4.fields[2];\n    t21$$1 = t2$$4.fields[1];\n    t22$$1 = t2$$4.fields[2];\n  }\n\n  switch ($target$$73) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux($comparer$$12$$74, $b$$3$$75, $m$$7$$76, $acc$$4$$77) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    const comparer$$12 = $comparer$$12$$74,\n          b$$3 = $b$$3$$75,\n          m$$7 = $m$$7$$76,\n          acc$$4 = $acc$$4$$77;\n\n    switch (m$$7.tag) {\n      case 2:\n        {\n          if (SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7.fields[2], acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3) ? SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$5) : acc$$5;\n          $comparer$$12$$74 = comparer$$12;\n          $b$$3$$75 = b$$3;\n          $m$$7$$76 = m$$7.fields[1];\n          $acc$$4$$77 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($comparer$$15$$86, $f$$8$$87, $s$$4$$88, $acc_0$$89, $acc_1$$90) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $comparer$$15$$86,\n          f$$8 = $f$$8$$87,\n          s$$4 = $s$$4$$88,\n          acc_0 = $acc_0$$89,\n          acc_1 = $acc_1$$90;\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc_0, acc_1);\n        }\n\n      case 0:\n        {\n          return [acc_0, acc_1];\n        }\n\n      default:\n        {\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, s$$4.fields[2], acc_0, acc_1);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc$$8[0], acc$$8[1]);\n          $comparer$$15$$86 = comparer$$15;\n          $f$$8$$87 = f$$8;\n          $s$$4$$88 = s$$4.fields[1];\n          $acc_0$$89 = acc$$9[0];\n          $acc_1$$90 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], s$$6.fields[1], s$$6.fields[2]]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux($s$$7$$95, $n$$1$$96) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    const s$$7 = $s$$7$$95,\n          n$$1 = $n$$1$$96;\n\n    switch (s$$7.tag) {\n      case 2:\n        {\n          return s$$7.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          $s$$7$$95 = s$$7.fields[1];\n          $n$$1$$96 = s$$7.fields[0];\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        return some(s$$8.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$minimumElementAux(s$$8.fields[1], s$$8.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux($s$$9$$98, $n$$2$$99) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    const s$$9 = $s$$9$$98,\n          n$$2 = $n$$2$$99;\n\n    switch (s$$9.tag) {\n      case 2:\n        {\n          return s$$9.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          $s$$9$$98 = s$$9.fields[2];\n          $n$$2$$99 = s$$9.fields[0];\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        return some(s$$10.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$maximumElementAux(s$$10.fields[2], s$$10.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$103) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$103], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$103))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS($stack$$104) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$104;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        $stack$$104 = new List(stack.head.fields[1], new List(SetTreeModule$$$SetOne(stack.head.fields[0]), new List(stack.head.fields[2], stack.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        $stack$$104 = stack.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$108) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$108]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this instanceof SetTreeModule$002EmkIEnumerator$00601 ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks($comparer$$17$$112, $l1$$113, $l2$$114) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const comparer$$17 = $comparer$$17$$112,\n          l1 = $l1$$113,\n          l2 = $l2$$114;\n    var $target$$115, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (l1.tail != null) {\n      if (l2.tail != null) {\n        if (l2.head.tag === 2) {\n          if (l1.head.tag === 2) {\n            $target$$115 = 4;\n            n1k = l1.head.fields[0];\n            n2k = l2.head.fields[0];\n            t1$$7 = l1.tail;\n            t2$$7 = l2.tail;\n          } else if (l1.head.tag === 1) {\n            if (l1.head.fields[1].tag === 0) {\n              $target$$115 = 6;\n              emp = l1.head.fields[1];\n              n1k$$2 = l1.head.fields[0];\n              n1r = l1.head.fields[2];\n              n2k$$2 = l2.head.fields[0];\n              t1$$9 = l1.tail;\n              t2$$9 = l2.tail;\n            } else {\n              $target$$115 = 9;\n              n1k$$5 = l1.head.fields[0];\n              n1l = l1.head.fields[1];\n              n1r$$2 = l1.head.fields[2];\n              t1$$12 = l1.tail;\n            }\n          } else {\n            $target$$115 = 10;\n            n2k$$4 = l2.head.fields[0];\n            t2$$11 = l2.tail;\n          }\n        } else if (l2.head.tag === 1) {\n          if (l2.head.fields[1].tag === 0) {\n            if (l1.head.tag === 2) {\n              $target$$115 = 5;\n              n1k$$1 = l1.head.fields[0];\n              n2k$$1 = l2.head.fields[0];\n              n2r = l2.head.fields[2];\n              t1$$8 = l1.tail;\n              t2$$8 = l2.tail;\n            } else if (l1.head.tag === 1) {\n              if (l1.head.fields[1].tag === 0) {\n                $target$$115 = 7;\n                n1k$$3 = l1.head.fields[0];\n                n1r$$1 = l1.head.fields[2];\n                n2k$$3 = l2.head.fields[0];\n                n2r$$1 = l2.head.fields[2];\n                t1$$10 = l1.tail;\n                t2$$10 = l2.tail;\n              } else {\n                $target$$115 = 9;\n                n1k$$5 = l1.head.fields[0];\n                n1l = l1.head.fields[1];\n                n1r$$2 = l1.head.fields[2];\n                t1$$12 = l1.tail;\n              }\n            } else {\n              $target$$115 = 11;\n              n2k$$5 = l2.head.fields[0];\n              n2l = l2.head.fields[1];\n              n2r$$2 = l2.head.fields[2];\n              t2$$12 = l2.tail;\n            }\n          } else if (l1.head.tag === 2) {\n            $target$$115 = 8;\n            n1k$$4 = l1.head.fields[0];\n            t1$$11 = l1.tail;\n          } else if (l1.head.tag === 1) {\n            $target$$115 = 9;\n            n1k$$5 = l1.head.fields[0];\n            n1l = l1.head.fields[1];\n            n1r$$2 = l1.head.fields[2];\n            t1$$12 = l1.tail;\n          } else {\n            $target$$115 = 11;\n            n2k$$5 = l2.head.fields[0];\n            n2l = l2.head.fields[1];\n            n2r$$2 = l2.head.fields[2];\n            t2$$12 = l2.tail;\n          }\n        } else if (l1.head.tag === 2) {\n          $target$$115 = 8;\n          n1k$$4 = l1.head.fields[0];\n          t1$$11 = l1.tail;\n        } else if (l1.head.tag === 1) {\n          $target$$115 = 9;\n          n1k$$5 = l1.head.fields[0];\n          n1l = l1.head.fields[1];\n          n1r$$2 = l1.head.fields[2];\n          t1$$12 = l1.tail;\n        } else {\n          $target$$115 = 3;\n          t1$$6 = l1.tail;\n          t2$$6 = l2.tail;\n        }\n      } else {\n        $target$$115 = 2;\n      }\n    } else if (l2.tail != null) {\n      $target$$115 = 1;\n    } else {\n      $target$$115 = 0;\n    }\n\n    switch ($target$$115) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = t1$$6;\n          $l2$$114 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = t1$$7;\n            $l2$$114 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            $l2$$114 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r, t1$$9);\n            $l2$$114 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r$$1, t1$$10);\n            $l2$$114 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  if (s1.tag === 0) {\n    if (s2.tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (s2.tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop($m$$8$$120, $acc$$10$$121) {\n  SetTreeModule$$$loop: while (true) {\n    const m$$8 = $m$$8$$120,\n          acc$$10 = $acc$$10$$121;\n\n    switch (m$$8.tag) {\n      case 2:\n        {\n          return new List(m$$8.fields[0], acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          $m$$8$$120 = m$$8.fields[1];\n          $acc$$10$$121 = new List(m$$8.fields[0], SetTreeModule$$$loop(m$$8.fields[2], acc$$10));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator($comparer$$19$$126, $acc$$11$$127, $e$$128) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$19 = $comparer$$19$$126,\n          acc$$11 = $acc$$11$$127,\n          e = $e$$128;\n\n    if (e.MoveNext()) {\n      $comparer$$19$$126 = comparer$$19;\n      $acc$$11$$127 = SetTreeModule$$$add(comparer$$19, e.Current, acc$$11);\n      $e$$128 = e;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$133) {\n  return type(\"Set.FSharpSet\", [$gen$$133]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this instanceof FSharpSet ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  const matchValue$$10 = FSharpSet$$get_Tree(s$$27);\n\n  if (matchValue$$10.tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  const matchValue$$11 = FSharpSet$$get_Tree(s$$28);\n\n  if (matchValue$$11.tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$7597B8F7(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  const matchValue$$12 = FSharpSet$$get_Tree(a$$4);\n\n  if (matchValue$$12.tag === 0) {\n    return a$$4;\n  } else {\n    const matchValue$$13 = FSharpSet$$get_Tree(b$$5);\n\n    if (matchValue$$13.tag === 0) {\n      return a$$4;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n    }\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  const matchValue$$14 = FSharpSet$$get_Tree(b$$6);\n\n  if (matchValue$$14.tag === 0) {\n    return a$$5;\n  } else {\n    const matchValue$$15 = FSharpSet$$get_Tree(a$$5);\n\n    if (matchValue$$15.tag === 0) {\n      return b$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n    }\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  const matchValue$$16 = FSharpSet$$get_Tree(b$$7);\n\n  if (matchValue$$16.tag === 0) {\n    return b$$7;\n  } else {\n    const matchValue$$17 = FSharpSet$$get_Tree(a$$6);\n\n    if (matchValue$$17.tag === 0) {\n      return a$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n    }\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  var strings;\n  const this$ = this;\n  return \"set [\" + (strings = map$$1(function (x$$21) {\n    let copyOfStruct = x$$21;\n    return String(copyOfStruct);\n  }, this$), (join(\"; \", strings))) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const x$$22 = res | 0;\n    const y$$4 = structuralHash(e$$1.Current) | 0;\n    res = (x$$22 << 1) + y$$4 + 631;\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$7597B8F7(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    keys() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    entries() {\n      const source = SetTreeModule$$$toSeq(tree$$1);\n      return map$$1(function mapping(v) {\n        return [v, v];\n      }, source);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$1, comparer$$32) {\n  const set = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(source$$1, comparer$$32);\n  return set;\n}\nexport function distinct(xs, comparer$$33) {\n  return delay(function () {\n    const set$$1 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$33);\n    return collect(function (x$$37) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$1, x$$37) ? singleton$$1(x$$37) : empty$$1();\n    }, xs);\n  });\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  return delay(function () {\n    const set$$2 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$34);\n    return collect(function (x$$38) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$2, projection(x$$38)) ? singleton$$1(x$$38) : empty$$1();\n    }, xs$$1);\n  });\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$39) {\n    return acc$$14.add(x$$39);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$40) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$40)) {\n      const value = s1$$5.delete(x$$40);\n      value, null;\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$41) {\n    const value$$1 = s1$$6.delete(x$$41);\n    value$$1, null;\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$13, some } from \"./Option.js\";\nimport { min as min$$1, compare, addToDict, addToSet, getItemFromDict, tryGetValue, max as max$$1, comparePrimitives } from \"./Util.js\";\nimport { createMutable } from \"./Map.js\";\nimport { createMutable as createMutable$$1 } from \"./Set.js\";\nimport { List } from \"./Types.js\";\nimport { iterate as iterate$$1 } from \"./Seq.js\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function (delegateArg0, delegateArg1) {\n      return f(delegateArg1, delegateArg0);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function mapping$$1(x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    let acc = state;\n    const res = new cons$$7(matchValue);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(matchValue$$1);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  var arr$$3;\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (arr$$3 = arrays$$1[0], ArrayBuffer.isView(arr$$3)) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], eq);\n  const keys = [];\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n      const value$$3 = keys.push(key);\n      value$$3, null;\n    }\n  }\n\n  const result$$5 = map(function (key$$1) {\n    return [key$$1, getItemFromDict(dict, key$$1)];\n  }, keys, Array);\n  return result$$5;\n}\nexport function distinctBy(projection$$1, array$$17, eq$$1) {\n  const hashSet = createMutable$$1([], eq$$1);\n  return filter(function predicate$$2($arg$$3) {\n    const arg00 = projection$$1($arg$$3);\n    return addToSet(arg00, hashSet);\n  }, array$$17);\n}\nexport function distinct(array$$19, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$19, eq$$2);\n}\nexport function where(predicate$$3, array$$20) {\n  return array$$20.filter(predicate$$3);\n}\nexport function contains(value$$4, array$$22, eq$$3) {\n  const loop = function loop($i$$12$$79) {\n    loop: while (true) {\n      const i$$12 = $i$$12$$79;\n\n      if (i$$12 >= array$$22.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$4, array$$22[i$$12])) {\n        return true;\n      } else {\n        $i$$12$$79 = i$$12 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$23, eq$$4) {\n  if (array$$23.length === 0) {\n    return array$$23;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, eq$$4);\n    return array$$23.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$26, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], eq$$5);\n  const keys$$1 = [];\n\n  for (let idx$$3 = 0; idx$$3 <= array$$26.length - 1; idx$$3++) {\n    const v = array$$26[idx$$3];\n    const key$$2 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$2, null);\n\n    if (matchValue$$4[0]) {\n      dict$$1.set(key$$2, new List(v, matchValue$$4[1]));\n    } else {\n      addToDict(dict$$1, key$$2, new List(v, new List()));\n      const value$$5 = keys$$1.push(key$$2);\n      value$$5, null;\n    }\n  }\n\n  const result$$6 = map(function (key$$3) {\n    var array$$28;\n    return [key$$3, (array$$28 = cons$$11.from(getItemFromDict(dict$$1, key$$3)), (array$$28.reverse()))];\n  }, keys$$1, Array);\n  return result$$6;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$6, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$6;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$7 = new cons$$15(count$$8);\n\n  for (let i$$13 = 0; i$$13 <= count$$8 - 1; i$$13++) {\n    result$$7[i$$13] = initializer(i$$13);\n  }\n\n  return result$$7;\n}\nexport function pairwise(array$$30) {\n  if (array$$30.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$30.length - 1 | 0;\n    const result$$8 = new Array(count$$9);\n\n    for (let i$$14 = 0; i$$14 <= count$$9 - 1; i$$14++) {\n      result$$8[i$$14] = [array$$30[i$$14], array$$30[i$$14 + 1]];\n    }\n\n    return result$$8;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$9 = new cons$$16(count$$10);\n\n  for (let i$$15 = 0; i$$15 <= result$$9.length - 1; i$$15++) {\n    result$$9[i$$15] = initial;\n  }\n\n  return result$$9;\n}\nexport function copy(array$$31, cons$$17) {\n  return array$$31.slice();\n}\nexport function reverse(array$$33, cons$$18) {\n  const array$$35 = array$$33.slice();\n  return array$$35.reverse();\n}\nexport function scan(folder, state$$2, array$$37, cons$$19) {\n  const res$$2 = new cons$$19(array$$37.length + 1);\n  res$$2[0] = state$$2;\n\n  for (let i$$16 = 0; i$$16 <= array$$37.length - 1; i$$16++) {\n    res$$2[i$$16 + 1] = folder(res$$2[i$$16], array$$37[i$$16]);\n  }\n\n  return res$$2;\n}\nexport function scanBack(folder$$1, array$$38, state$$3, cons$$20) {\n  const res$$3 = new cons$$20(array$$38.length + 1);\n  res$$3[array$$38.length] = state$$3;\n\n  for (let i$$17 = array$$38.length - 1; i$$17 >= 0; i$$17--) {\n    res$$3[i$$17] = folder$$1(array$$38[i$$17], res$$3[i$$17 + 1]);\n  }\n\n  return res$$3;\n}\nexport function skip(count$$11, array$$39, cons$$21) {\n  if (count$$11 > array$$39.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$39.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$39.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$41, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$41.length ? predicate$$7(array$$41[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$41.length) {\n    return new cons$$23(0);\n  } else {\n    const count$$15 = count$$14 | 0;\n    return array$$41.slice(count$$15);\n  }\n}\nexport function take(count$$16, array$$43, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$43.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$43.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$45, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$45.length ? predicate$$8(array$$45[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    const count$$19 = count$$18 | 0;\n    return array$$45.slice(0, 0 + count$$19);\n  }\n}\nexport function addRangeInPlace(range, array$$47) {\n  iterate$$1(function (x$$3) {\n    const value$$7 = array$$47.push(x$$3);\n    value$$7, null;\n  }, range);\n}\nexport function removeInPlace(item$$4, array$$49) {\n  const i$$18 = array$$49.indexOf(item$$4);\n\n  if (i$$18 > -1) {\n    const value$$8 = array$$49.splice(i$$18, 1);\n    value$$8, null;\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$52) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$19 = array$$52.findIndex(predicate$$9);\n\n    if (i$$19 > -1) {\n      const value$$9 = array$$52.splice(i$$19, 1);\n      value$$9, null;\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$3, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$20 = sourceIndex; i$$20 <= sourceIndex + count$$21 - 1; i$$20++) {\n    target$$4[i$$20 + diff] = source$$3[i$$20];\n  }\n}\nexport function partition(f$$6, source$$4, cons$$29) {\n  const len$$7 = source$$4.length | 0;\n  const res1 = new cons$$29(len$$7);\n  const res2 = new cons$$29(len$$7);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$21 = 0; i$$21 <= len$$7 - 1; i$$21++) {\n    if (f$$6(source$$4[i$$21])) {\n      res1[iTrue] = source$$4[i$$21];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$4[i$$21];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [(truncate(iTrue, res1)), (truncate(iFalse, res2))];\n}\nexport function find(predicate$$11, array$$57) {\n  const matchValue$$5 = array$$57.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$4 = value$$13(matchValue$$5);\n    return res$$4;\n  }\n}\nexport function tryFind(predicate$$13, array$$59) {\n  return array$$59.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$61) {\n  const matchValue$$6 = array$$61.findIndex(predicate$$15);\n\n  if (matchValue$$6 > -1) {\n    return matchValue$$6 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$63) {\n  const matchValue$$7 = array$$63.findIndex(predicate$$17);\n\n  if (matchValue$$7 > -1) {\n    return matchValue$$7;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$65) {\n  const loop$$1 = function loop$$1($i$$22$$147) {\n    loop$$1: while (true) {\n      const i$$22 = $i$$22$$147;\n\n      if (i$$22 >= array$$65.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$65[i$$22]);\n\n        if (matchValue$$8 != null) {\n          const res$$5 = value$$13(matchValue$$8);\n          return res$$5;\n        } else {\n          $i$$22$$147 = i$$22 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$66) {\n  const loop$$2 = function loop$$2($i$$23$$150) {\n    loop$$2: while (true) {\n      const i$$23 = $i$$23$$150;\n\n      if (i$$23 >= array$$66.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$66[i$$23]);\n\n        if (matchValue$$9 == null) {\n          $i$$23$$150 = i$$23 + 1;\n          continue loop$$2;\n        } else {\n          return matchValue$$9;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$67) {\n  const loop$$3 = function loop$$3($i$$24$$153) {\n    loop$$3: while (true) {\n      const i$$24 = $i$$24$$153;\n\n      if (i$$24 < 0) {\n        return indexNotFound();\n      } else if (predicate$$19(array$$67[i$$24])) {\n        return array$$67[i$$24];\n      } else {\n        $i$$24$$153 = i$$24 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$67.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$68) {\n  const loop$$4 = function loop$$4($i$$25$$156) {\n    loop$$4: while (true) {\n      const i$$25 = $i$$25$$156;\n\n      if (i$$25 < 0) {\n        return null;\n      } else if (predicate$$20(array$$68[i$$25])) {\n        return some(array$$68[i$$25]);\n      } else {\n        $i$$25$$156 = i$$25 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$68.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$69) {\n  const loop$$5 = function loop$$5($i$$26$$159) {\n    loop$$5: while (true) {\n      const i$$26 = $i$$26$$159;\n\n      if (i$$26 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$69[i$$26])) {\n        return i$$26 | 0;\n      } else {\n        $i$$26$$159 = i$$26 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$69.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$70) {\n  const loop$$6 = function loop$$6($i$$27$$162) {\n    loop$$6: while (true) {\n      const i$$27 = $i$$27$$162;\n\n      if (i$$27 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$22(array$$70[i$$27])) {\n        return i$$27 | 0;\n      } else {\n        $i$$27$$162 = i$$27 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$70.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$71) {\n  const loop$$7 = function loop$$7($i$$28$$165) {\n    loop$$7: while (true) {\n      const i$$28 = $i$$28$$165;\n\n      if (i$$28 < 0) {\n        return null;\n      } else if (predicate$$23(array$$71[i$$28])) {\n        return i$$28;\n      } else {\n        $i$$28$$165 = i$$28 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$71.length - 1);\n}\nexport function choose(chooser$$2, array$$72, cons$$30) {\n  const arr$$6 = array$$72.filter(function f$$7(x$$4) {\n    const option = chooser$$2(x$$4);\n    return option != null;\n  });\n  return map(function g(x$$5) {\n    const option$$1 = chooser$$2(x$$5);\n    return value$$13(option$$1);\n  }, arr$$6, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$74) {\n  return array$$74.reduce(function (delegateArg0$$1, delegateArg1$$1, delegateArg2) {\n    return folder$$2(delegateArg2, delegateArg0$$1, delegateArg1$$1);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$76) {\n  return array$$76.reduce(function (delegateArg0$$2, delegateArg1$$2) {\n    return folder$$4(delegateArg0$$2, delegateArg1$$2);\n  }, state$$6);\n}\nexport function iterate(action, array$$78) {\n  for (let i$$30 = 0; i$$30 <= array$$78.length - 1; i$$30++) {\n    action(array$$78[i$$30]);\n  }\n}\nexport function iterateIndexed(action$$1, array$$79) {\n  for (let i$$31 = 0; i$$31 <= array$$79.length - 1; i$$31++) {\n    action$$1(i$$31, array$$79[i$$31]);\n  }\n}\nexport function iterate2(action$$2, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$32 = 0; i$$32 <= array1$$2.length - 1; i$$32++) {\n    action$$2(array1$$2[i$$32], array2$$2[i$$32]);\n  }\n}\nexport function iterateIndexed2(action$$3, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$33 = 0; i$$33 <= array1$$3.length - 1; i$$33++) {\n    action$$3(i$$33, array1$$3[i$$33], array2$$3[i$$33]);\n  }\n}\nexport function isEmpty(array$$80) {\n  return array$$80.length === 0;\n}\nexport function forAll(predicate$$25, array$$81) {\n  return array$$81.every(predicate$$25);\n}\nexport function permute(f$$8, array$$83) {\n  const size = array$$83.length | 0;\n  const res$$7 = new array$$83.constructor(array$$83.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$34, x$$8) {\n    const j$$1 = f$$8(i$$34) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$7[j$$1] = x$$8;\n    checkFlags[j$$1] = 1;\n  }, array$$83);\n  const isValid = forAll(function (y) {\n    return 1 === y;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$7;\n}\nexport function setSlice(target$$5, lower, upper, source$$5) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$5.length <= length : false) {\n    const target$$6 = target$$5;\n    const source$$6 = source$$5;\n    return target$$6.set(source$$6, lower$$1);\n  } else {\n    for (let i$$35 = 0; i$$35 <= length; i$$35++) {\n      target$$5[i$$35 + lower$$1] = source$$5[i$$35];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$10, y$$1) {\n    return comparer.Compare(projection$$3(x$$10), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$11, y$$2) {\n    return comparer$$1.Compare(x$$11, y$$2);\n  });\n}\n\nfunction copyArray(array$$84) {\n  const result$$10 = new array$$84.constructor(array$$84.length);\n\n  for (let i$$36 = 0; i$$36 <= array$$84.length - 1; i$$36++) {\n    result$$10[i$$36] = array$$84[i$$36];\n  }\n\n  return result$$10;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function comparer$$3(x$$12, y$$3) {\n    return comparer$$2.Compare(x$$12, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function comparer$$5(x$$13, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$13), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function comparer$$7(x$$14, y$$5) {\n    return comparer$$6.Compare(x$$14, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function comparer$$9(x$$15, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$15), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$8 = [];\n\n  const loop$$8 = function loop$$8($state$$9$$224) {\n    loop$$8: while (true) {\n      const state$$9 = $state$$9$$224;\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$16 = matchValue$$10[0];\n        const s$0027$$2 = matchValue$$10[1];\n        const value$$10 = res$$8.push(x$$16);\n        value$$10, null;\n        $state$$9$$224 = s$0027$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$8;\n}\nexport function unzip(array$$86) {\n  const len$$9 = array$$86.length | 0;\n  const res1$$1 = new Array(len$$9);\n  const res2$$1 = new Array(len$$9);\n  iterateIndexed(function (i$$37, tupledArg) {\n    res1$$1[i$$37] = tupledArg[0];\n    res2$$1[i$$37] = tupledArg[1];\n  }, array$$86);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$87) {\n  const len$$12 = array$$87.length | 0;\n  const res1$$2 = new Array(len$$12);\n  const res2$$2 = new Array(len$$12);\n  const res3 = new Array(len$$12);\n  iterateIndexed(function (i$$38, tupledArg$$1) {\n    res1$$2[i$$38] = tupledArg$$1[0];\n    res2$$2[i$$38] = tupledArg$$1[1];\n    res3[i$$38] = tupledArg$$1[2];\n  }, array$$87);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$11;\n  const len$$16 = array1$$4.length | 0;\n  result$$11 = new Array(len$$16);\n\n  for (let i$$39 = 0; i$$39 <= array1$$4.length - 1; i$$39++) {\n    result$$11[i$$39] = [array1$$4[i$$39], array2$$4[i$$39]];\n  }\n\n  return result$$11;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$12;\n  const len$$17 = array1$$5.length | 0;\n  result$$12 = new Array(len$$17);\n\n  for (let i$$40 = 0; i$$40 <= array1$$5.length - 1; i$$40++) {\n    result$$12[i$$40] = [array1$$5[i$$40], array2$$5[i$$40], array3[i$$40]];\n  }\n\n  return result$$12;\n}\nexport function chunkBySize(chunkSize, array$$88) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$88.length === 0) {\n    return [[]];\n  } else {\n    const result$$13 = [];\n\n    for (let x$$17 = 0; x$$17 <= ~~Math.ceil(array$$88.length / chunkSize) - 1; x$$17++) {\n      const start$$8 = x$$17 * chunkSize | 0;\n      const slice = array$$88.slice(start$$8, start$$8 + chunkSize);\n      const value$$11 = result$$13.push(slice);\n      value$$11, null;\n    }\n\n    return result$$13;\n  }\n}\nexport function splitAt(index$$4, array$$91) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$91.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$91.slice(0, 0 + index$$4), array$$91.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$41 = 0;\n    let result$$14 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$41 < length1 ? result$$14 === 0 : false) {\n        result$$14 = comparer$$12(array1$$6[i$$41], array2$$6[i$$41]);\n        i$$41 = i$$41 + 1;\n      }\n\n      return result$$14 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$94) {\n  if (array$$94.length === 1) {\n    return array$$94[0];\n  } else if (array$$94.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$95) {\n  if (array$$95.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$95[0];\n  }\n}\nexport function tryHead(array$$96) {\n  if (array$$96.length === 0) {\n    return null;\n  } else {\n    return some(array$$96[0]);\n  }\n}\nexport function tail(array$$97) {\n  if (array$$97.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$97.slice(1);\n}\nexport function item(index$$5, array$$99) {\n  return array$$99[index$$5];\n}\nexport function tryItem(index$$6, array$$100) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$100.length) {\n    return null;\n  } else {\n    return some(array$$100[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$101, state$$10) {\n  return array$$101.reduceRight(function (delegateArg0$$3, delegateArg1$$3, delegateArg2$$1) {\n    return folder$$6(delegateArg2$$1, delegateArg1$$3, delegateArg0$$3);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$103, state$$12) {\n  return array$$103.reduceRight(function (delegateArg0$$4, delegateArg1$$4) {\n    return folder$$8(delegateArg1$$4, delegateArg0$$4);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$43 = 0; i$$43 <= array1$$8.length - 1; i$$43++) {\n    acc$$6 = folder$$10(i$$43, acc$$6, array1$$8[i$$43], array2$$8[i$$43]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$20, y$$7) {\n    return folder$$11(acc$$7, x$$20, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$44 = 1; i$$44 <= size$$1; i$$44++) {\n    acc$$8 = folder$$12(i$$44 - 1, array1$$10[size$$1 - i$$44], array2$$10[size$$1 - i$$44], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$21, y$$8, acc$$9) {\n    return f$$9(x$$21, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$105) {\n  if (array$$105.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$105.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$107) {\n  if (array$$107.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$107.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$27, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$22, y$$9) {\n    return acc$$10 ? predicate$$27(x$$22, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($predicate$$28$$279, $array$$109$$280, $index$$7$$281) {\n  existsOffset: while (true) {\n    const predicate$$28 = $predicate$$28$$279,\n          array$$109 = $array$$109$$280,\n          index$$7 = $index$$7$$281;\n\n    if (index$$7 === array$$109.length) {\n      return false;\n    } else if (predicate$$28(array$$109[index$$7])) {\n      return true;\n    } else {\n      $predicate$$28$$279 = predicate$$28;\n      $array$$109$$280 = array$$109;\n      $index$$7$$281 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$29, array$$110) {\n  return existsOffset(predicate$$29, array$$110, 0);\n}\nexport function existsOffset2($predicate$$30$$284, $array1$$13$$285, $array2$$13$$286, $index$$8$$287) {\n  existsOffset2: while (true) {\n    const predicate$$30 = $predicate$$30$$284,\n          array1$$13 = $array1$$13$$285,\n          array2$$13 = $array2$$13$$286,\n          index$$8 = $index$$8$$287;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$30(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $predicate$$30$$284 = predicate$$30;\n      $array1$$13$$285 = array1$$13;\n      $array2$$13$$286 = array2$$13;\n      $index$$8$$287 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$31, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$31, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$111, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$45 = 0; i$$45 <= array$$111.length - 1; i$$45++) {\n    acc$$11 = adder.Add(acc$$11, array$$111[i$$45]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$112, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$46 = 0; i$$46 <= array$$112.length - 1; i$$46++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$112[i$$46]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$23, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$23)) > 0 ? y$$10 : x$$23;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$24, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$24) > 0 ? y$$11 : x$$24;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$25, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$25)) > 0 ? x$$25 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$26, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$26) > 0 ? x$$26 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$113, averager) {\n  if (array$$113.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$113.length - 1; i$$47++) {\n    total = averager.Add(total, array$$113[i$$47]);\n  }\n\n  return averager.DivideByInt(total, array$$113.length);\n}\nexport function averageBy(projection$$9, array$$114, averager$$1) {\n  if (array$$114.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$48 = 0; i$$48 <= array$$114.length - 1; i$$48++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$114[i$$48]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$114.length);\n}\nexport function ofSeq(source$$7, cons$$31) {\n  return cons$$31.from(source$$7);\n}\nexport function ofList(source$$8, cons$$32) {\n  return cons$$32.from(source$$8);\n}\nexport function toList(source$$9) {\n  const len$$18 = source$$9.length | 0;\n  let target$$7 = new List();\n\n  for (let i$$49 = len$$18 - 1; i$$49 >= 0; i$$49--) {\n    target$$7 = new List(source$$9[i$$49], target$$7);\n  }\n\n  return target$$7;\n}\nexport function windowed(windowSize, source$$10) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$9;\n  const len$$19 = max$$1(comparePrimitives, 0, source$$10.length - windowSize) | 0;\n  res$$9 = new Array(len$$19);\n\n  for (let i$$50 = windowSize; i$$50 <= source$$10.length; i$$50++) {\n    res$$9[i$$50 - windowSize] = source$$10.slice(i$$50 - windowSize, i$$50 - 1 + 1);\n  }\n\n  return res$$9;\n}\nexport function splitInto(chunks, array$$115) {\n  if (chunks < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: chunks\");\n  }\n\n  if (array$$115.length === 0) {\n    return [[]];\n  } else {\n    const result$$15 = [];\n    const chunks$$1 = min$$1(comparePrimitives, chunks, array$$115.length) | 0;\n    const minChunkSize = ~~(array$$115.length / chunks$$1) | 0;\n    const chunksWithExtraItem = array$$115.length % chunks$$1 | 0;\n\n    for (let i$$51 = 0; i$$51 <= chunks$$1 - 1; i$$51++) {\n      const chunkSize$$1 = (i$$51 < chunksWithExtraItem ? minChunkSize + 1 : minChunkSize) | 0;\n      const start$$11 = i$$51 * minChunkSize + min$$1(comparePrimitives, chunksWithExtraItem, i$$51) | 0;\n      const slice$$1 = array$$115.slice(start$$11, start$$11 + chunkSize$$1);\n      const value$$12 = result$$15.push(slice$$1);\n      value$$12, null;\n    }\n\n    return result$$15;\n  }\n}","import { defaultArg, value as value$$1, some } from \"./Option.js\";\nimport { List } from \"./Types.js\";\nimport { collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq.js\";\nimport { partialApply, getItemFromDict, addToDict, tryGetValue, addToSet, count } from \"./Util.js\";\nimport { ofList } from \"./Array.js\";\nimport { splitInto as splitInto$$1, chunkBySize as chunkBySize$$1, permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set.js\";\nimport { createMutable as createMutable$$1 } from \"./Map.js\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    return _arg1.head;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    return some(_arg1$$1.head);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    return _arg1$$2.tail;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last($_arg1$$3$$5) {\n  last: while (true) {\n    const _arg1$$3 = $_arg1$$3$$5;\n\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        $_arg1$$3$$5 = _arg1$$3.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast($_arg1$$4$$6) {\n  tryLast: while (true) {\n    const _arg1$$4 = $_arg1$$4$$6;\n\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        $_arg1$$4$$6 = _arg1$$4.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop($xs$$4$$10, $ys$$1$$11) {\n      loop: while (true) {\n        const xs$$4 = $xs$$4$$10,\n              ys$$1 = $ys$$1$$11;\n\n        if (xs$$4.tail != null) {\n          if (ys$$1.tail != null) {\n            const matchValue$$1 = comparer(xs$$4.head, ys$$1.head) | 0;\n\n            if (matchValue$$1 === 0) {\n              $xs$$4$$10 = xs$$4.tail;\n              $ys$$1$$11 = ys$$1.tail;\n              continue loop;\n            } else {\n              return matchValue$$1 | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (ys$$1.tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($f$$12, $i$$13, $acc$$14, $_arg1$$5$$15) {\n  foldIndexedAux: while (true) {\n    const f = $f$$12,\n          i = $i$$13,\n          acc = $acc$$14,\n          _arg1$$5 = $_arg1$$5$$15;\n\n    if (_arg1$$5.tail != null) {\n      $f$$12 = f;\n      $i$$13 = i + 1;\n      $acc$$14 = f(i, acc, _arg1$$5.head);\n      $_arg1$$5$$15 = _arg1$$5.tail;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($f$$2$$19, $state$$1$$20, $xs$$8$$21) {\n  fold: while (true) {\n    const f$$2 = $f$$2$$19,\n          state$$1 = $state$$1$$20,\n          xs$$8 = $xs$$8$$21;\n\n    if (xs$$8.tail != null) {\n      $f$$2$$19 = f$$2;\n      $state$$1$$20 = f$$2(state$$1, xs$$8.head);\n      $xs$$8$$21 = xs$$8.tail;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  const xs$$13 = fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12);\n  return reverse(xs$$13);\n}\nexport function concat(lists) {\n  const xs$$15 = fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists);\n  return reverse(xs$$15);\n}\nexport function foldIndexed2Aux($f$$5$$31, $i$$1$$32, $acc$$5$$33, $bs$$34, $cs$$35) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $f$$5$$31,\n          i$$1 = $i$$1$$32,\n          acc$$5 = $acc$$5$$33,\n          bs = $bs$$34,\n          cs = $cs$$35;\n    var $target$$36, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (bs.tail != null) {\n      if (cs.tail != null) {\n        $target$$36 = 1;\n        x$$11 = bs.head;\n        xs$$16 = bs.tail;\n        y$$1 = cs.head;\n        ys$$3 = cs.tail;\n      } else {\n        $target$$36 = 2;\n      }\n    } else if (cs.tail == null) {\n      $target$$36 = 0;\n    } else {\n      $target$$36 = 2;\n    }\n\n    switch ($target$$36) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $f$$5$$31 = f$$5;\n          $i$$1$$32 = i$$1 + 1;\n          $acc$$5$$33 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $bs$$34 = xs$$16;\n          $cs$$35 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner($acc$$6$$51, $state$$8$$52) {\n    unfoldInner: while (true) {\n      const acc$$6 = $acc$$6$$51,\n            state$$8 = $state$$8$$52;\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        $acc$$6$$51 = new List(x$$12, acc$$6);\n        $state$$8$$52 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($f$$10$$53, $i$$2$$54, $acc$$7$$55, $bs$$1$$56, $cs$$1$$57, $ds$$58) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $f$$10$$53,\n          i$$2 = $i$$2$$54,\n          acc$$7 = $acc$$7$$55,\n          bs$$1 = $bs$$1$$56,\n          cs$$1 = $cs$$1$$57,\n          ds = $ds$$58;\n    var $target$$59, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (bs$$1.tail != null) {\n      if (cs$$1.tail != null) {\n        if (ds.tail != null) {\n          $target$$59 = 1;\n          x$$13 = bs$$1.head;\n          xs$$20 = bs$$1.tail;\n          y$$2 = cs$$1.head;\n          ys$$7 = cs$$1.tail;\n          z = ds.head;\n          zs = ds.tail;\n        } else {\n          $target$$59 = 2;\n        }\n      } else {\n        $target$$59 = 2;\n      }\n    } else if (cs$$1.tail == null) {\n      if (ds.tail == null) {\n        $target$$59 = 0;\n      } else {\n        $target$$59 = 2;\n      }\n    } else {\n      $target$$59 = 2;\n    }\n\n    switch ($target$$59) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $f$$10$$53 = f$$10;\n          $i$$2$$54 = i$$2 + 1;\n          $acc$$7$$55 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $bs$$1$$56 = xs$$20;\n          $cs$$1$$57 = ys$$7;\n          $ds$$58 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  const xs$$24 = scan$$1(f$$13, state$$11, xs$$23);\n  return ofSeq(xs$$24);\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  const xs$$26 = scanBack$$1(f$$14, xs$$25, state$$12);\n  return ofSeq(xs$$26);\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  const xs$$30 = collect$$1(f$$15, xs$$29);\n  return ofSeq(xs$$30);\n}\nexport function map(f$$16, xs$$31) {\n  const xs$$32 = fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31);\n  return reverse(xs$$32);\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  const xs$$34 = foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33);\n  return reverse(xs$$34);\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  const xs$$37 = fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11);\n  return reverse(xs$$37);\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  const xs$$39 = foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12);\n  return reverse(xs$$39);\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  const xs$$41 = fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3);\n  return reverse(xs$$41);\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  const xs$$43 = foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4);\n  return reverse(xs$$43);\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const patternInput$$1 = fold(function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  }, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($f$$28$$120, $i$$10$$121, $_arg1$$9$$122) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $f$$28$$120,\n          i$$10 = $i$$10$$121,\n          _arg1$$9 = $_arg1$$9$$122;\n\n    if (_arg1$$9.tail != null) {\n      const result = f$$28(i$$10, _arg1$$9.head);\n\n      if (result == null) {\n        $f$$28$$120 = f$$28;\n        $i$$10$$121 = i$$10 + 1;\n        $_arg1$$9$$122 = _arg1$$9.tail;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  let xs$$61;\n  xs$$61 = reverse(xs$$59);\n  return find(f$$36, xs$$61);\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  let xs$$64;\n  xs$$64 = reverse(xs$$62);\n  return tryFind(f$$37, xs$$64);\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  const array = ofList(xs$$66, Array);\n  return tryFindIndexBack$$1(f$$39, array);\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  const array$$1 = ofList(xs$$68, Array);\n  return findIndexBack$$1(f$$41, array$$1) | 0;\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  const xs$$72 = fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71);\n  return reverse(xs$$72);\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  const xs$$75 = fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74);\n  return reverse(xs$$75);\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1($xs$$76$$162) {\n    loop$$1: while (true) {\n      const xs$$76 = $xs$$76$$162;\n\n      if (xs$$76.tail != null) {\n        if (eq.Equals(value, xs$$76.head)) {\n          return true;\n        } else {\n          $xs$$76$$162 = xs$$76.tail;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, eq$$1);\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    return fold(f$$47, _arg1$$16.head, _arg1$$16.tail);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    return foldBack(f$$48, _arg1$$17.tail, _arg1$$17.head);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($f$$51$$180, $_arg1$$18$$181) {\n  exists: while (true) {\n    const f$$51 = $f$$51$$180,\n          _arg1$$18 = $_arg1$$18$$181;\n\n    if (_arg1$$18.tail != null) {\n      if (f$$51(_arg1$$18.head)) {\n        return true;\n      } else {\n        $f$$51$$180 = f$$51;\n        $_arg1$$18$$181 = _arg1$$18.tail;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($f$$52$$182, $bs$$2$$183, $cs$$2$$184) {\n  exists2: while (true) {\n    const f$$52 = $f$$52$$182,\n          bs$$2 = $bs$$2$$183,\n          cs$$2 = $cs$$2$$184;\n    var $target$$185, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (bs$$2.tail != null) {\n      if (cs$$2.tail != null) {\n        $target$$185 = 1;\n        x$$44 = bs$$2.head;\n        xs$$82 = bs$$2.tail;\n        y$$12 = cs$$2.head;\n        ys$$18 = cs$$2.tail;\n      } else {\n        $target$$185 = 2;\n      }\n    } else if (cs$$2.tail == null) {\n      $target$$185 = 0;\n    } else {\n      $target$$185 = 2;\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $f$$52$$182 = f$$52;\n            $bs$$2$$183 = xs$$82;\n            $cs$$2$$184 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  let xs$$89;\n  const xs$$88 = ofList(xs$$87, Array);\n  xs$$88.sort(function comparer$$2(x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  });\n  xs$$89 = xs$$88;\n  return ofArray(xs$$89);\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  let xs$$92;\n  const xs$$91 = ofList(xs$$90, Array);\n  xs$$91.sort(function comparer$$4(x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  });\n  xs$$92 = xs$$91;\n  return ofArray(xs$$92);\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  let xs$$95;\n  const xs$$94 = ofList(xs$$93, Array);\n  xs$$94.sort(function comparer$$6(x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  });\n  xs$$95 = xs$$94;\n  return ofArray(xs$$95);\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  let xs$$98;\n  const xs$$97 = ofList(xs$$96, Array);\n  xs$$97.sort(function comparer$$8(x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  });\n  xs$$98 = xs$$97;\n  return ofArray(xs$$98);\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  let xs$$101;\n  const xs$$100 = ofList(xs$$99, Array);\n  xs$$100.sort(comparer$$9);\n  xs$$101 = xs$$100;\n  return ofArray(xs$$101);\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  let xs$$110;\n  let array$$3;\n  array$$3 = ofList(xs$$109, Array);\n  xs$$110 = permute$$1(f$$55, array$$3);\n  return ofArray(xs$$110);\n}\nexport function chunkBySize(chunkSize, xs$$111) {\n  let xs$$114;\n  let xs$$112;\n  let array$$4;\n  array$$4 = ofList(xs$$111, Array);\n  xs$$112 = chunkBySize$$1(chunkSize, array$$4);\n  xs$$114 = ofArray(xs$$112);\n  return map(function f$$56(xs$$113) {\n    return ofArray(xs$$113);\n  }, xs$$114);\n}\nexport function skip(i$$16, xs$$115) {\n  const skipInner = function skipInner($i$$17$$240, $xs$$116$$241) {\n    skipInner: while (true) {\n      const i$$17 = $i$$17$$240,\n            xs$$116 = $xs$$116$$241;\n\n      if (i$$17 === 0) {\n        return xs$$116;\n      } else if (xs$$116.tail != null) {\n        $i$$17$$240 = i$$17 - 1;\n        $xs$$116$$241 = xs$$116.tail;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  if (i$$16 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$242, i$$20, xs$$119;\n\n    if (i$$16 === 0) {\n      $target$$242 = 0;\n    } else if (i$$16 === 1) {\n      if (xs$$115.tail != null) {\n        $target$$242 = 1;\n      } else {\n        $target$$242 = 2;\n        i$$20 = i$$16;\n        xs$$119 = xs$$115;\n      }\n    } else {\n      $target$$242 = 2;\n      i$$20 = i$$16;\n      xs$$119 = xs$$115;\n    }\n\n    switch ($target$$242) {\n      case 0:\n        {\n          return xs$$115;\n        }\n\n      case 1:\n        {\n          return xs$$115.tail;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$119);\n        }\n    }\n  }\n}\nexport function skipWhile($predicate$$243, $xs$$120$$244) {\n  skipWhile: while (true) {\n    const predicate = $predicate$$243,\n          xs$$120 = $xs$$120$$244;\n    var $target$$245, h$$4, t$$4;\n\n    if (xs$$120.tail != null) {\n      if (predicate(xs$$120.head)) {\n        $target$$245 = 0;\n        h$$4 = xs$$120.head;\n        t$$4 = xs$$120.tail;\n      } else {\n        $target$$245 = 1;\n      }\n    } else {\n      $target$$245 = 1;\n    }\n\n    switch ($target$$245) {\n      case 0:\n        {\n          $predicate$$243 = predicate;\n          $xs$$120$$244 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$120;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux($error$$246, $i$$21$$247, $acc$$25$$248, $xs$$121$$249) {\n  takeSplitAux: while (true) {\n    const error = $error$$246,\n          i$$21 = $i$$21$$247,\n          acc$$25 = $acc$$25$$248,\n          xs$$121 = $xs$$121$$249;\n\n    if (i$$21 === 0) {\n      return [reverse(acc$$25), xs$$121];\n    } else if (xs$$121.tail != null) {\n      $error$$246 = error;\n      $i$$21$$247 = i$$21 - 1;\n      $acc$$25$$248 = new List(xs$$121.head, acc$$25);\n      $xs$$121$$249 = xs$$121.tail;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$121];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$123) {\n  if (i$$22 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$252, i$$25, xs$$124;\n\n    if (i$$22 === 0) {\n      $target$$252 = 0;\n    } else if (i$$22 === 1) {\n      if (xs$$123.tail != null) {\n        $target$$252 = 1;\n      } else {\n        $target$$252 = 2;\n        i$$25 = i$$22;\n        xs$$124 = xs$$123;\n      }\n    } else {\n      $target$$252 = 2;\n      i$$25 = i$$22;\n      xs$$124 = xs$$123;\n    }\n\n    switch ($target$$252) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$123.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple = takeSplitAux(true, i$$25, new List(), xs$$124);\n          return tuple[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$125) {\n  if (xs$$125.tail != null) {\n    if (xs$$125.tail.tail == null) {\n      if (predicate$$1(xs$$125.head)) {\n        return xs$$125;\n      } else {\n        return xs$$125.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$125.head)) {\n        return new List();\n      } else {\n        return new List(xs$$125.head, takeWhile(predicate$$1, xs$$125.tail));\n      }\n    }\n  } else {\n    return xs$$125;\n  }\n}\nexport function truncate(i$$26, xs$$127) {\n  if (i$$26 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$257, i$$29, xs$$128;\n\n    if (i$$26 === 0) {\n      $target$$257 = 0;\n    } else if (i$$26 === 1) {\n      if (xs$$127.tail != null) {\n        $target$$257 = 1;\n      } else {\n        $target$$257 = 2;\n        i$$29 = i$$26;\n        xs$$128 = xs$$127;\n      }\n    } else {\n      $target$$257 = 2;\n      i$$29 = i$$26;\n      xs$$128 = xs$$127;\n    }\n\n    switch ($target$$257) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$127.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple$$1 = takeSplitAux(false, i$$29, new List(), xs$$128);\n          return tuple$$1[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$129) {\n  if (i$$30 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$260, i$$33, xs$$131;\n\n    if (i$$30 === 0) {\n      $target$$260 = 0;\n    } else if (i$$30 === 1) {\n      if (xs$$129.tail != null) {\n        $target$$260 = 1;\n      } else {\n        $target$$260 = 2;\n        i$$33 = i$$30;\n        xs$$131 = xs$$129;\n      }\n    } else {\n      $target$$260 = 2;\n      i$$33 = i$$30;\n      xs$$131 = xs$$129;\n    }\n\n    switch ($target$$260) {\n      case 0:\n        {\n          return [new List(), xs$$129];\n        }\n\n      case 1:\n        {\n          return [new List(xs$$129.head, new List()), xs$$129.tail];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$131);\n        }\n    }\n  }\n}\nexport function outOfRange() {\n  throw new Error(\"Index out of range\");\n}\nexport function slice(lower, upper, xs$$132) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const hasUpper = upper != null;\n\n  if (lower$$1 < 0) {\n    return outOfRange();\n  } else if (hasUpper ? upper < lower$$1 : false) {\n    return new List();\n  } else {\n    let lastIndex = -1 | 0;\n    let res$$2;\n    const state$$13 = new List();\n    res$$2 = foldIndexed(function f$$57(i$$34, acc$$26, x$$67) {\n      lastIndex = i$$34;\n\n      if (lower$$1 <= i$$34 ? !hasUpper ? true : i$$34 <= upper : false) {\n        return new List(x$$67, acc$$26);\n      } else {\n        return acc$$26;\n      }\n    }, state$$13, xs$$132);\n\n    if (lower$$1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {\n      outOfRange();\n    }\n\n    return reverse(res$$2);\n  }\n}\nexport function distinctBy(projection$$4, xs$$134, eq$$2) {\n  const hashSet = createMutable([], eq$$2);\n  return filter(function f$$58($arg$$1) {\n    const arg00$$1 = projection$$4($arg$$1);\n    return addToSet(arg00$$1, hashSet);\n  }, xs$$134);\n}\nexport function distinct(xs$$136, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$136, eq$$3);\n}\nexport function exactlyOne(xs$$137) {\n  if (xs$$137.tail != null) {\n    if (xs$$137.tail.tail != null) {\n      throw new Error(\"Input list too long\\\\nParameter name: list\");\n    } else {\n      return xs$$137.head;\n    }\n  } else {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$139, eq$$4) {\n  const dict = createMutable$$1([], eq$$4);\n  let keys = new List();\n  iterate(function f$$59(v$$2) {\n    const key = projection$$5(v$$2);\n    const matchValue$$16 = tryGetValue(dict, key, null);\n\n    if (matchValue$$16[0]) {\n      dict.set(key, new List(v$$2, matchValue$$16[1]));\n    } else {\n      addToDict(dict, key, new List(v$$2, new List()));\n      keys = new List(key, keys);\n    }\n  }, xs$$139);\n  let result$$1 = new List();\n  const xs$$141 = keys;\n  iterate(function f$$60(key$$1) {\n    result$$1 = new List([key$$1, reverse(getItemFromDict(dict, key$$1))], result$$1);\n  }, xs$$141);\n  return result$$1;\n}\nexport function countBy(projection$$6, xs$$142, eq$$5) {\n  const dict$$1 = createMutable$$1([], eq$$5);\n  let keys$$1 = new List();\n  iterate(function f$$61(v$$3) {\n    const key$$2 = projection$$6(v$$3);\n    const matchValue$$17 = tryGetValue(dict$$1, key$$2, 0);\n\n    if (matchValue$$17[0]) {\n      dict$$1.set(key$$2, matchValue$$17[1] + 1);\n    } else {\n      dict$$1.set(key$$2, 1);\n      keys$$1 = new List(key$$2, keys$$1);\n    }\n  }, xs$$142);\n  let result$$2 = new List();\n  const xs$$144 = keys$$1;\n  iterate(function f$$62(key$$3) {\n    result$$2 = new List([key$$3, getItemFromDict(dict$$1, key$$3)], result$$2);\n  }, xs$$144);\n  return result$$2;\n}\nexport function where(predicate$$2, xs$$145) {\n  return filter(predicate$$2, xs$$145);\n}\nexport function pairwise(xs$$146) {\n  const inner = function inner($xs$$147$$287, $acc$$27$$288, $x1$$1$$289) {\n    inner: while (true) {\n      const xs$$147 = $xs$$147$$287,\n            acc$$27 = $acc$$27$$288,\n            x1$$1 = $x1$$1$$289;\n\n      if (xs$$147.tail != null) {\n        let copyOfStruct = acc$$27;\n        copyOfStruct.push([x1$$1, xs$$147.head]);\n        $xs$$147$$287 = xs$$147.tail;\n        $acc$$27$$288 = acc$$27;\n        $x1$$1$$289 = xs$$147.head;\n        continue inner;\n      } else {\n        return ofArray(acc$$27);\n      }\n\n      break;\n    }\n  };\n\n  var $target$$290, x1$$2, x2$$2, xs$$149;\n\n  if (xs$$146.tail != null) {\n    if (xs$$146.tail.tail != null) {\n      $target$$290 = 1;\n      x1$$2 = xs$$146.head;\n      x2$$2 = xs$$146.tail.head;\n      xs$$149 = xs$$146.tail.tail;\n    } else {\n      $target$$290 = 0;\n    }\n  } else {\n    $target$$290 = 0;\n  }\n\n  switch ($target$$290) {\n    case 0:\n      {\n        return new List();\n      }\n\n    case 1:\n      {\n        const acc$$28 = [];\n        acc$$28.push([x1$$2, x2$$2]);\n        const clo1 = partialApply(2, inner, [xs$$149]);\n        const clo2 = clo1(acc$$28);\n        return clo2(x2$$2);\n      }\n  }\n}\nexport function windowed(windowSize, source) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$3 = new List();\n\n  for (let i$$35 = length(source); i$$35 >= windowSize; i$$35--) {\n    res$$3 = new List(slice(i$$35 - windowSize, i$$35 - 1, source), res$$3);\n  }\n\n  return res$$3;\n}\nexport function splitInto(chunks, source$$1) {\n  let xs$$152;\n  let xs$$150;\n  let array$$5;\n  array$$5 = ofList(source$$1, Array);\n  xs$$150 = splitInto$$1(chunks, array$$5);\n  xs$$152 = ofArray(xs$$150);\n  return map(function f$$63(xs$$151) {\n    return ofArray(xs$$151);\n  }, xs$$152);\n}","namespace Feliz\r\n\r\nopen Fable.Core\r\n\r\ntype ReactDOM =\r\n    [<Import(\"render\", \"react-dom\")>]\r\n    static member render(element: Fable.React.ReactElement, container: Browser.Types.HTMLElement) = jsNative\r\n    static member render(element: Fable.React.FunctionComponent<unit>, container: Browser.Types.HTMLElement) =\r\n        ReactDOM.render(element(), container)","module Aornota.Duh.Common.Domain\r\n\r\nopen System\r\n\r\ntype Colour = | Blue | Coral | Cyan | Goldenrod | Grey | Pink | Salmon | SeaGreen | SkyBlue | SlateBlue | SlateGrey | SteelBlue | Yellow\r\n\r\ntype Repo = | AzureDevOps | Subversion\r\n\r\ntype Solution = { Name : string ; Repo : Repo ; RootPath : string ; Colour : Colour ; SortOrder : int option }\r\n\r\ntype Project = { Name : string ; Solution : Solution ; ExtraPath : string option ; Packaged : bool }\r\n\r\ntype Dependency = | PackageReference of Project | ProjectReference of Project\r\n\r\ntype ProjectDependencies = { Project : Project ; Dependencies : Dependency Set }\r\n\r\nlet colourText (colour:Colour) = colour.ToString().ToLower()\r\nlet colourLightText colour = sprintf \"light%s\" (colourText colour)\r\n\r\nlet repoText = function | AzureDevOps -> \"Azure DevOps\" | Subversion -> \"Subversion\"\r\n\r\nlet solutionFileText (solution:Solution) = sprintf \"%s.sln\" solution.Name\r\nlet solutionAndRepoText (solution:Solution) = sprintf \"%s (%s)\" (solution.Name) (repoText solution.Repo)\r\nlet solutionFolderText solution = sprintf \"/%s/%s\" solution.RootPath solution.Name\r\nlet solutionPathText solution = sprintf \"%s/%s\" (solutionFolderText solution) (solutionFileText solution)\r\nlet solutionFileAndRepoText solution = sprintf \"%s (%s)\" (solutionFileText solution) (repoText solution.Repo)\r\nlet solutionPathAndRepoText solution = sprintf \"%s (%s)\" (solutionPathText solution) (repoText solution.Repo)\r\nlet solutionSortOrder solution = match solution.SortOrder with | Some ordinal -> ordinal | None -> Int32.MaxValue\r\n\r\nlet projectFileText (project:Project) = sprintf \"%s.csproj\" project.Name\r\nlet projectAndSolutionFileText project = sprintf \"%s (%s)\" (projectFileText project) (solutionFileText project.Solution)\r\nlet projectAndSolutionFolderText project =\r\n    match project.ExtraPath with\r\n    | Some extraPath -> sprintf \"%s/%s/%s\" (solutionFolderText project.Solution) extraPath project.Name\r\n    | None -> sprintf \"%s/%s\" (solutionFolderText project.Solution) project.Name\r\nlet projectAndSolutionPathText project = sprintf \"%s/%s\" (projectAndSolutionFolderText project) (projectFileText project)\r\nlet projectColour project = if project.Packaged then colourText project.Solution.Colour else colourLightText project.Solution.Colour\r\n\r\nlet isPackageReference = function | PackageReference _ -> true | ProjectReference _ -> false\r\nlet dependencyProject = function | PackageReference project | ProjectReference project -> project\r\nlet dependencyName = function | PackageReference project | ProjectReference project -> project.Name\r\nlet dependencyIsPackaged = function | PackageReference project | ProjectReference project -> project.Packaged\r\n","module Aornota.Duh.Common.ProjectDependencyData\r\n\r\nopen Aornota.Duh.Common.Domain\r\n\r\n// #region Solutions:\r\n\r\nlet domainSln = { Name = \"Domain\" ; Repo = AzureDevOps ; RootPath = \"source\" ; Colour = Grey ; SortOrder = Some 1 }\r\nlet infrastructureSln = { Name = \"Infrastructure\" ; Repo = AzureDevOps ; RootPath = \"source\" ; Colour = Cyan ; SortOrder = Some 2 }\r\n\r\nlet sharedSln = { Name = \"Shared\" ; Repo = Subversion ; RootPath = \"Shared\" ; Colour = Salmon ; SortOrder = None }\r\n\r\n// #endregion\r\n\r\n// #region Projects:\r\n\r\nlet commonInterfacesProj = { Name = \"Common.Interfaces\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet commonModelsProj = { Name = \"Common.Models\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet commonExtensionsProj = { Name = \"Common.Extensions\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet productInterfacesProj = { Name = \"Product.Interfaces\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet productModelsProj = { Name = \"Product.Models\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet orderInterfacesProj = { Name = \"Order.Interfaces\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet orderModelsProj = { Name = \"Order.Models\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\nlet infrastructureInterfacesProj = { Name = \"Infrastructure.Interfaces\" ; Solution = domainSln ; ExtraPath = None ; Packaged = true }\r\n\r\nlet repositoriesProj = { Name = \"Repositories\" ; Solution = infrastructureSln ; ExtraPath = None ; Packaged = true }\r\nlet repositoriesTestsProj = { Name = \"Repositories.Tests\" ; Solution = infrastructureSln ; ExtraPath = None ; Packaged = false }\r\n\r\nlet toolsProj = { Name = \"Tools\" ; Solution = sharedSln ; ExtraPath = Some \"Non Production\" ; Packaged = false }\r\n\r\n// #endregion\r\n\r\n// #region ProjectDependencies:\r\n\r\nlet commonInterfacesDeps = {\r\n    Project = commonInterfacesProj\r\n    Dependencies = [] |> Set.ofList }\r\nlet commonModelsDeps = {\r\n    Project = commonModelsProj\r\n    Dependencies = [\r\n        PackageReference commonInterfacesProj\r\n    ] |> Set.ofList }\r\nlet commonExtensionsDeps = {\r\n    Project = commonExtensionsProj\r\n    Dependencies = [\r\n        PackageReference commonModelsProj\r\n    ] |> Set.ofList }\r\nlet productInterfacesDeps = {\r\n    Project = productInterfacesProj\r\n    Dependencies = [\r\n        PackageReference commonInterfacesProj\r\n    ] |> Set.ofList }\r\nlet productModelsDeps = {\r\n    Project = productModelsProj\r\n    Dependencies = [\r\n        PackageReference productInterfacesProj\r\n        PackageReference commonModelsProj\r\n    ] |> Set.ofList }\r\nlet orderInterfacesDeps = {\r\n    Project = orderInterfacesProj\r\n    Dependencies = [\r\n        PackageReference productInterfacesProj\r\n    ] |> Set.ofList }\r\nlet orderModelsDeps = {\r\n    Project = orderModelsProj\r\n    Dependencies = [\r\n        PackageReference orderInterfacesProj\r\n        PackageReference productModelsProj\r\n    ] |> Set.ofList }\r\nlet infrastructureInterfacesDeps = {\r\n    Project = infrastructureInterfacesProj\r\n    Dependencies = [\r\n        PackageReference orderInterfacesProj\r\n    ] |> Set.ofList }\r\n\r\nlet repositoriesDeps = {\r\n    Project = repositoriesProj\r\n    Dependencies = [\r\n        PackageReference infrastructureInterfacesProj\r\n        PackageReference orderModelsProj\r\n    ] |> Set.ofList }\r\nlet repositoriesTestsDeps = {\r\n    Project = repositoriesTestsProj\r\n    Dependencies = [\r\n        PackageReference commonExtensionsProj\r\n        ProjectReference repositoriesProj\r\n    ] |> Set.ofList }\r\n\r\nlet toolsDeps = {\r\n    Project = toolsProj\r\n    Dependencies = [\r\n        PackageReference repositoriesProj\r\n        PackageReference commonExtensionsProj\r\n    ] |> Set.ofList }\r\n\r\nlet projectsDependencies= [\r\n    commonInterfacesDeps ; commonModelsDeps ; commonExtensionsDeps\r\n    productInterfacesDeps ; productModelsDeps\r\n    orderInterfacesDeps ; orderModelsDeps\r\n    infrastructureInterfacesDeps\r\n    repositoriesDeps ; repositoriesTestsDeps\r\n    toolsDeps ]\r\n\r\n// #endregion\r\n","// Ported from http://hackage.haskell.org/package/containers-0.6.2.1/docs/src/Data.IntMap.Internal.html\r\n//---------------------------------------------------------------------------\r\n// Module      :  Data.IntMap.Internal\r\n// Copyright   :  (c) Daan Leijen 2002\r\n//                (c) Andriy Palamarchuk 2008\r\n//                (c) wren romano 2016\r\n// License     :  BSD-style (http://hackage.haskell.org/package/containers-0.6.2.1/src/LICENSE)\r\n// Maintainer  :  libraries@haskell.org\r\n// Portability :  portable\r\n//---------------------------------------------------------------------------\r\nnamespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections\r\nopen System.Collections.Generic\r\nopen System\r\n\r\n#nowarn \"25\" // incomplete pattern match\r\n#nowarn \"61\"\r\n\r\ntype internal intmap<'T> =\r\n    | Nil\r\n    | Tip of int * 'T\r\n    | Bin of int * int * intmap<'T> * intmap<'T>\r\n\r\n    member x.FoldBackWithKey f z =\r\n        let rec go z =\r\n            function\r\n            | Nil -> z\r\n            | Tip(kx, x) -> f kx x z\r\n            | Bin(_, _, l, r) -> go (go z r) l\r\n        match x with\r\n        | Bin(_, m, l, r) -> \r\n            if m < 0 then go (go z l) r  // put negative numbers before.\r\n            else go (go z r) l\r\n        | _ -> go z x\r\n    \r\n    member x.ToList() = x.FoldBackWithKey (fun k x xs -> (k, x) :: xs) []\r\n\r\n    member x.ToSeq() =\r\n        match x with\r\n            | Nil -> Seq.empty\r\n            | Tip(k,v) -> Seq.singleton (k,v)\r\n            | Bin(_,_,l,r) -> Seq.append (l.ToSeq()) (Seq.delay r.ToSeq)\r\n        \r\n    member x.Count =\r\n        match x with\r\n            | Nil -> 0\r\n            | Tip _ -> 1\r\n            | Bin(_,_,l,r) -> l.Count + r.Count\r\n\r\n    interface IEnumerable<int * 'T> with\r\n        member x.GetEnumerator() =\r\n            new IntMapEnumerator<_>(x) :> _\r\n        \r\n    interface System.Collections.IEnumerable with\r\n        member x.GetEnumerator() =\r\n            new IntMapEnumerator<_>(x) :> _\r\n\r\nand private IntMapEnumerator<'T1>(m : intmap<'T1>) =\r\n    let mutable stack = [m]\r\n    let mutable current = Unchecked.defaultof<_>\r\n\r\n    let rec moveNext() =\r\n        match stack with\r\n        | [] -> false\r\n        | h :: rest ->\r\n            stack <- rest\r\n            match h with\r\n            | Nil -> \r\n                moveNext()\r\n\r\n            | Tip(k,v) -> \r\n                current <- (k,v)\r\n                true\r\n            | Bin(_,_,l,r) -> \r\n                stack <- l :: r :: stack\r\n                moveNext()\r\n\r\n    interface IEnumerator with\r\n        member x.MoveNext() = moveNext()\r\n        member x.Current = current :> obj\r\n        member x.Reset() =\r\n            stack <- [m]\r\n            current <- Unchecked.defaultof<_>\r\n\r\n    interface IEnumerator<int * 'T1> with\r\n        member x.Current = current\r\n        member x.Dispose() =\r\n            stack <- []\r\n            current <- Unchecked.defaultof<_>\r\n\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule internal IntMap =\r\n\r\n    let inline private maskW i m = int (i &&& (~~~ (m - 1ul) ^^^ m))\r\n    let inline private mask i m = maskW (uint32 i) (uint32 m)\r\n    let inline private match' i p m = mask i m = p\r\n    let inline private nomatch i p m = mask i m <> p\r\n    let inline private zero i m = (uint32 i) &&& (uint32 m) = 0ul\r\n    let inline private shorter m1 m2 = (uint32 m1) > (uint32 m2)\r\n\r\n    let inline private highestBitMask x0 =\r\n        let x1 = x0 ||| (x0 >>> 1)\r\n        let x2 = x1 ||| (x1 >>> 2)\r\n        let x3 = x2 ||| (x2 >>> 4)\r\n        let x4 = x3 ||| (x3 >>> 8)\r\n        let x5 = x4 ||| (x4 >>> 16)\r\n        let x6 = x5 ||| (x5 >>> 32)   // for 64 bit platforms\r\n        x6 ^^^ (x6 >>> 1)\r\n\r\n    let inline private branchMask p1 p2 = int (highestBitMask (uint32 p1 ^^^ uint32 p2))\r\n\r\n    let inline private join p1 t1 p2 t2 =\r\n        let m = branchMask p1 p2\r\n        let p = mask p1 m\r\n        if zero p1 m then Bin(p, m, t1, t2)\r\n        else Bin(p, m, t2, t1)\r\n\r\n    let inline private bin p m l r =\r\n        match l, r with\r\n        | (l, Nil) -> l\r\n        | (Nil, r) -> r\r\n        | (l, r) -> Bin(p, m, l, r)\r\n\r\n    ///O(1). Map is empty.  Credit: Haskell.org\r\n    let isEmpty t =\r\n        match t with\r\n        | Nil -> true\r\n        | _ -> false\r\n\r\n    ///O(min(n,W)). Lookup the value at a key in the map. Returns 'T option. Credit: Haskell.org\r\n    let rec tryFind k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then None\r\n            elif zero k m then tryFind k l\r\n            else tryFind k r\r\n        | Tip(kx, x) ->\r\n            if k = kx then Some x\r\n            else None\r\n        | _ -> None\r\n\r\n    let rec tryRemove k n =\r\n        match n with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then \r\n                None\r\n            elif zero k m then \r\n                match tryRemove k l with\r\n                | Some (v, l') ->\r\n                    Some (v, bin p m l' r)\r\n                | None ->\r\n                    None\r\n            else    \r\n                match tryRemove k r with\r\n                | Some (v, r') ->\r\n                    Some (v, bin p m l r')\r\n                | None ->\r\n                    None\r\n        | Tip(kx, x) ->\r\n            if kx = k then Some (x, Nil)\r\n            else None\r\n        | _ ->\r\n            None\r\n\r\n    ///O(min(n,W)). Is the key a member of the map? Credit: Haskell.org\r\n    let rec exists k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then false\r\n            elif zero k m then exists k l\r\n            else exists k r\r\n        | Tip(kx, _) -> k = kx\r\n        | _ -> false\r\n\r\n    ///O(log n). Is the key not a member of the map? Credit: Haskell.org\r\n    let notExists k m = not <| exists k m\r\n\r\n    ///O(min(n,W)). Lookup the value at a key in the map. Credit: Haskell.org\r\n    let rec find k m =\r\n        let notFound() = failwith <| sprintf \"intmap.find: key %d is not an element of the map\" k\r\n        match m with\r\n        | Bin(p, m, l, r) -> \r\n            if nomatch k p m then notFound()\r\n            else if zero k m then find k l\r\n            else find k r\r\n        | Tip(kx, x) when k = kx -> x\r\n        | _ -> notFound()\r\n\r\n    ///O(min(n,W)). The expression (findWithDefault def k map) returns the value at key k or returns def when the key is not an element of the map.  Credit: Haskell.org\r\n    let rec findWithDefault def k t =\r\n        match t with\r\n        | Bin(p, m, l, r) -> \r\n            if nomatch k p m then def\r\n            elif zero k m then findWithDefault def k l\r\n            else findWithDefault def k r\r\n        | Tip(kx, x) when k = kx -> x\r\n        | _ -> def\r\n\r\n    let rec private unsafeFindMax t =\r\n        match t with\r\n        | Nil -> None\r\n        | Tip(ky, y) -> Some(ky, y)\r\n        | Bin(_, _, _, r) -> unsafeFindMax r\r\n\r\n    ///O(log n). Find largest key smaller than the given one and return the corresponding (key, value) pair.  Credit: Haskell.org\r\n    let tryFindLT k t =\r\n        let rec go def =\r\n            function\r\n            | Bin(p, m, l, r) ->\r\n                if nomatch k p m then \r\n                    if k < p then unsafeFindMax def else unsafeFindMax r\r\n                elif zero k m then go def l\r\n                else go l r\r\n            | Tip(ky, y) -> \r\n                if k <= ky then unsafeFindMax def\r\n                else Some(ky, y)\r\n            | _ -> unsafeFindMax def\r\n        match t with\r\n        | Bin(_, m, l, r) when m < 0 -> if k >= 0 then go r l else go Nil r\r\n        | _ -> go Nil t\r\n\r\n    let rec private unsafeFindMin t =\r\n        match t with\r\n        | Nil -> None\r\n        | Tip(ky, y) -> Some(ky, y)\r\n        | Bin(_, _, l, _) -> unsafeFindMin l\r\n\r\n    ///O(log n). Find smallest key greater than the given one and return the corresponding (key, value) pair. Credit: Haskell.org\r\n    let tryFindGT k t =\r\n        let rec go def =\r\n            function\r\n            | Bin(p, m, l, r) ->\r\n                if nomatch k p m then\r\n                    if k < p then unsafeFindMin l else unsafeFindMin def\r\n                elif zero k m then go r l\r\n                else go def r\r\n            | Tip(ky, y) ->\r\n                if k >= ky then unsafeFindMin def\r\n                else Some(ky, y)\r\n            | _ -> unsafeFindMin def\r\n        match t with\r\n        | Bin(_, m, l, r) when m < 0 -> if k >= 0 then go Nil l else go l r\r\n        | _ -> go Nil t\r\n\r\n    ///O(log n). Find largest key smaller or equal to the given one and return the corresponding (key, value) pair. Credit: Haskell.org\r\n    let tryFindLE k t =\r\n        let rec go def =\r\n            function\r\n            | Bin(p, m, l, r) -> \r\n                if nomatch k p m then\r\n                    if k < p then unsafeFindMax def else unsafeFindMax r\r\n                elif zero k m then go def l\r\n                else go l r\r\n            | Tip(ky, y) ->\r\n                if k < ky then unsafeFindMax def\r\n                else Some(ky, y)\r\n            | _ -> unsafeFindMax def\r\n        match t with\r\n        | Bin(_, m, l, r) when m < 0 -> if k >= 0 then go r l else go Nil r\r\n        | _ -> go Nil t\r\n\r\n    ///O(log n). Find smallest key greater or equal to the given one and return the corresponding (key, value) pair Credit: Haskell.org\r\n    let tryFindGE k t =\r\n        let rec go def =\r\n            function\r\n            | Bin(p, m, l, r) ->\r\n                if nomatch k p m then\r\n                    if k < p then unsafeFindMin l else unsafeFindMin def\r\n                elif zero k m then go r l\r\n                else go def r\r\n            | Tip(ky, y) -> \r\n                if k > ky then unsafeFindMin def\r\n                else Some(ky, y)\r\n            | _ -> unsafeFindMin def\r\n        match t with\r\n        | Bin(_, m, l, r) when m < 0 -> if k >= 0 then go Nil l else go l r\r\n        | _ -> go Nil t\r\n\r\n    ///O(1). The empty map. Credit: Haskell.org\r\n    let empty = Nil\r\n\r\n    ///O(1). A map of one element. Credit: Haskell.org\r\n    let inline singleton k x = Tip(k, x)\r\n\r\n    ///O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. insert is equivalent to insertWith const. Credit: Haskell.org\r\n    let rec insert k x t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then join k (Tip(k, x)) p t\r\n            elif zero k m then Bin(p, m, insert k x l, r)\r\n            else Bin(p, m, l, insert k x r)\r\n        | Tip(ky, _) ->\r\n            if k = ky then Tip(k, x)\r\n            else join k (Tip(k, x)) ky t\r\n        | _ -> Tip(k, x)\r\n\r\n    ///O(min(n,W)). Insert with a combining function. insertWithKey f key value mp will insert the pair (key, value) into mp if key does not exist in the map. If the key does exist, the function will insert f key new_value old_value. Credit: Haskell.org\r\n    let rec insertWithKey f k x t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then join k (Tip(k, x)) p t\r\n            elif zero k m then Bin(p, m, insertWithKey f k x l, r)\r\n            else Bin(p, m, l, insertWithKey f k x r)\r\n        | Tip(ky, y) ->\r\n            if k = ky then Tip(k, f k x y)\r\n            else join k (Tip(k, x)) ky t\r\n        | _ -> Tip(k, x)\r\n\r\n    ///O(min(n,W)). Insert with a combining function. insertWith f key value mp will insert the pair (key, value) into mp if key does not exist in the map. If the key does exist, the function will insert f new_value old_value. Credit: Haskell.org\r\n    let insertWith f k x t = insertWithKey (fun _ x' y' -> f x' y') k x t\r\n\r\n    ///O(min(n,W)). The expression (insertLookupWithKey f k x map) is a pair where the first element is equal to (lookup k map) and the second element equal to (insertWithKey f k x map). Credit: Haskell.org\r\n    let rec insertTryFindWithKey f k x t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then (None, join k (Tip(k, x)) p t)\r\n            elif zero k m then\r\n                let found, l = insertTryFindWithKey f k x l\r\n                (found, Bin(p, m, l, r))\r\n            else\r\n                let found, r = insertTryFindWithKey f k x r\r\n                (found, Bin(p, m, l, r))\r\n        | Tip(ky, y) ->\r\n            if k = ky then (Some y, Tip(k, f k x y))\r\n            else (None, join k (Tip(k, x)) ky t)\r\n        | _ -> (None, Tip(k, x))\r\n\r\n    ///O(min(n,W)). Delete a key and its value from the map. When the key is not a member of the map, the original map is returned. Credit: Haskell.org\r\n    let rec delete k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then t\r\n            elif zero k m then bin p m (delete k l) r\r\n            else bin p m l (delete k r)\r\n        | Tip(ky, _) ->\r\n            if k = ky then Nil\r\n            else t\r\n        | _ -> Nil\r\n\r\n    ///O(min(n,W)). The expression (update f k map) updates the value x at k (if it is in the map). If (f k x) is Nothing, the element is deleted. If it is (Just y), the key k is bound to the new value y. Credit: Haskell.org\r\n    let rec updateWithKey f k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then t\r\n            elif zero k m then bin p m (updateWithKey f k l) r\r\n            else bin p m l (updateWithKey f k r)\r\n        | Tip(ky, y) ->\r\n            if k = ky then\r\n                match f k y with\r\n                | Some y -> Tip(ky, y)\r\n                | None -> Nil\r\n            else\r\n                t\r\n        | _ -> Nil\r\n\r\n    ///O(min(n,W)). The expression (update f k map) updates the value x at k (if it is in the map). If (f x) is Nothing, the element is deleted. If it is (Just y), the key k is bound to the new value y. Credit: Haskell.org\r\n    let update f k m = updateWithKey (fun _ x -> f x) k m\r\n\r\n    ///O(min(n,W)). Adjust a value at a specific key. When the key is not a member of the map, the original map is returned. Credit: Haskell.org\r\n    let adjustWithKey f k m = updateWithKey (fun k' x -> Some (f k' x)) k m\r\n\r\n    ///O(min(n,W)). Adjust a value at a specific key. When the key is not a member of the map, the original map is returned. Credit: Haskell.org\r\n    let adjust f k m = adjustWithKey (fun _ x -> f x) k m\r\n\r\n    ///O(min(n,W)). Lookup and update. Credit: Haskell.org\r\n    let rec updateTryFindWithKey f k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then\r\n                (None, t)\r\n            elif zero k m then\r\n                let (found, l) = updateTryFindWithKey f k l\r\n                (found, bin p m l r)   \r\n            else\r\n                let (found, r) = updateTryFindWithKey f k r\r\n                (found, bin p m l r)\r\n        | Tip(ky, y) ->\r\n            if k = ky then\r\n                match f k y with\r\n                | Some y' -> (Some y, Tip(ky, y'))\r\n                | None -> (Some y, Nil)\r\n            else\r\n                (None, t)\r\n        | _ -> (None, Nil)\r\n\r\n    ///O(log n). The expression (alter f k map) alters the value x at k, or absence thereof. alter can be used to insert, delete, or update a value in an intmap. Credit: Haskell.org\r\n    let rec alter f k t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            if nomatch k p m then\r\n                match f None with\r\n                | None -> t\r\n                | Some x -> join k (Tip(k, x)) p t\r\n            elif zero k m then\r\n                bin p m (alter f k l) r\r\n            else\r\n                bin p m l (alter f k r)\r\n        | Tip(ky, y) -> \r\n            if k = ky then\r\n                match f (Some y) with\r\n                | Some x -> Tip(ky, x)\r\n                | None -> Nil\r\n            else\r\n                match f None with\r\n                | Some x -> join k (Tip(k, x)) ky t\r\n                | None -> t\r\n        | _ ->\r\n            match f None with\r\n            | Some x -> Tip(k, x)\r\n            | None -> Nil\r\n\r\n    let inline private mergeWithKeyAux binOp f g1 g2 =\r\n\r\n        let inline maybe_join p1 t1 p2 t2  =\r\n            match t1, t2 with\r\n            | Nil, t2 -> t2\r\n            | t1, Nil -> t1\r\n            | _ ->  join p1 t1 p2 t2\r\n     \r\n        let rec merge1 p1 m1 t1 l1 r1 p2 m2 t2 =\r\n            if nomatch p2 p1 m1 then maybe_join p1 (g1 t1) p2 (g2 t2)\r\n            elif zero p2 m1 then binOp p1 m1 (go l1 t2) (g1 r1)\r\n            else binOp p1 m1 (g1 l1) (go r1 t2)\r\n\r\n        and merge2 p1 m1 t1 p2 m2 t2 l2 r2 =\r\n            if nomatch p1 p2 m2 then maybe_join p1 (g1 t1) p2 (g2 t2)\r\n            elif zero p1 m2 then binOp p2 m2 (go t1 l2) (g2 r2)\r\n            else binOp p2 m2 (g2 l2) (go t1 r2)\r\n\r\n        and go t1 t2 =\r\n            match t1 with\r\n            | Bin(p1, m1, l1, r1) ->\r\n                match t2 with\r\n                | Bin(p2, m2, l2, r2) -> \r\n                    if shorter m1 m2 then merge1 p1 m1 t1 l1 r1 p2 m2 t2\r\n                    elif shorter m2 m1 then merge2 p1 m1 t1 p2 m2 t2 l2 r2\r\n                    elif p1 = p2 then binOp p1 m1 (go l1 l2) (go r1 r2)\r\n                    else maybe_join p1 (g1 t1) p2 (g2 t2)\r\n                | Tip (k2', _) ->\r\n                    let rec merge t2 k2 t1 =\r\n                        match t1 with\r\n                        | Bin(p1, m1, l1, r1) ->\r\n                            if nomatch k2 p1 m1 then maybe_join p1 (g1 t1) k2 (g2 t2)\r\n                            else if zero k2 m1 then binOp p1 m1 (merge t2 k2 l1) (g1 r1)\r\n                            else binOp p1 m1 (g1 l1) (merge t2 k2 r1)\r\n                        | Tip(k1, _) -> \r\n                            if k1 = k2 then f t1 t2\r\n                            else maybe_join k1 (g1 t1) k2 (g2 t2)\r\n                        | _ -> g2 t2\r\n                    merge t2 k2' t1\r\n                | _ -> g1 t1\r\n            | Tip(k1', _) -> \r\n                let rec merge t1 k1 t2 =\r\n                    match t2 with\r\n                    | Bin(p2, m2, l2, r2) ->\r\n                        if nomatch k1 p2 m2 then maybe_join k1 (g1 t1) p2 (g2 t2)\r\n                        elif zero k1 m2 then binOp p2 m2 (merge t1 k1 l2) (g2 r2)\r\n                        else binOp p2 m2 (g2 l2) (merge t1 k1 r2)\r\n                    | Tip(k2, _) ->\r\n                        if k1 = k2 then f t1 t2\r\n                        else maybe_join k1 (g1 t1) k2 (g2 t2)\r\n                    | _ -> g1 t1\r\n                merge t1 k1' t2\r\n            | _ -> g2 t2\r\n        go\r\n\r\n    ///Refer to Haskell documentation. Unexpected code growth or corruption of the data structure can occure from wrong use. Credit: Haskell.org\r\n    let mergeWithKey f g1 g2 =\r\n        let combine =\r\n            fun (Tip(k1, x1)) (Tip(_, x2)) ->\r\n                match f k1 x1 x2 with\r\n                | None -> Nil\r\n                | Some x -> Tip(k1, x)\r\n        mergeWithKeyAux bin combine g1 g2\r\n\r\n    let inline konst a _ = a\r\n\r\n    let append m1 m2 = mergeWithKeyAux (fun x y m1' m2' -> Bin(x, y, m1', m2')) konst id id m1 m2\r\n\r\n    let appendWithKey f m1 m2 =\r\n        mergeWithKeyAux (fun x y m1' m2' -> Bin(x, y, m1', m2')) (fun (Tip(k1, x1)) (Tip(_, x2)) -> Tip(k1, f k1 x1 x2)) id id m1 m2\r\n\r\n    let appendWith f m1 m2 = appendWithKey (fun _ x y -> f x y) m1 m2\r\n\r\n    let concat xs = List.fold append empty xs\r\n\r\n    let concatWith f xs = List.fold (appendWith f) empty xs\r\n\r\n    ///O(n+m). Difference between two maps (based on keys). Credit: Haskell.org\r\n    let difference m1 m2 = mergeWithKey (fun _ _ _ -> None) id (konst Nil) m1 m2\r\n\r\n    ///O(n+m). Difference with a combining function. When two equal keys are encountered, the combining function is applied to the key and both values. If it returns Nothing, the element is discarded (proper set difference). If it returns (Just y), the element is updated with a new value y. Credit: Haskell.org\r\n    let differenceWithKey f m1 m2 = mergeWithKey f id (konst Nil) m1 m2\r\n\r\n    ///O(n+m). Difference with a combining function. Credit: Haskell.org\r\n    let differenceWith f m1 m2 = differenceWithKey (fun _ x y -> f x y) m1 m2\r\n\r\n    ///O(n+m). The (left-biased) intersection of two maps (based on keys). Credit: Haskell.org\r\n    let intersection m1 m2 = mergeWithKeyAux bin konst (konst Nil) (konst Nil) m1 m2\r\n\r\n    ///O(n+m). The intersection with a combining function. Credit: Haskell.org\r\n    let intersectionWithKey f m1 m2 =\r\n        mergeWithKeyAux bin (fun (Tip(k1, x1)) (Tip(_, x2)) -> Tip(k1, f k1 x1 x2)) (konst Nil) (konst Nil) m1 m2\r\n\r\n    ///O(n+m). The intersection with a combining function. Credit: Haskell.org\r\n    let intersectionWith f m1 m2 = intersectionWithKey (fun _ x y -> f x y) m1 m2\r\n\r\n    ///O(log n). Update the value at the minimal key. Credit: Haskell.org\r\n    let updateMinWithKey f t =\r\n        let rec go f =\r\n            function\r\n            | Bin(p, m, l, r) -> bin p m (go f l) r\r\n            | Tip(k, y) ->\r\n                match f k y with\r\n                | Some y -> Tip(k, y)\r\n                | None -> Nil\r\n            | Nil -> failwith \"updateMinWithKey Nil\"\r\n        match t with\r\n        | Bin(p, m, l, r) when m < 0 -> bin p m l (go f r)\r\n        | _ -> go f t\r\n\r\n    ///O(log n). Update the value at the maximal key. Credit: Haskell.org\r\n    let updateMaxWithKey f t =\r\n        let rec go f =\r\n            function\r\n            | Bin(p, m, l, r) -> bin p m l (go f r)\r\n            | Tip(k, y) ->\r\n                match f k y with\r\n                | Some y -> Tip(k, y)\r\n                | None -> Nil\r\n            | Nil -> failwith \"updateMaxWithKey Nil\"\r\n        match t with\r\n        | Bin(p, m, l, r) when m < 0 -> bin p m (go f l) r\r\n        | _ -> go f t\r\n\r\n    ///O(log n). Retrieves the maximal (key,value) couple of the map, and the map stripped from that element. fails (in the monad) when passed an empty map. Credit: Haskell.org\r\n    let maxViewWithKey t =\r\n        let rec go =\r\n            function\r\n            | Bin(p, m, l, r) -> let (result, r) = go r in (result, bin p m l r)\r\n            | Tip(k, y) -> ((k, y), Nil)\r\n            | Nil -> failwith \"maxViewWithKey Nil\"\r\n        match t with\r\n        | Nil -> None\r\n        | Bin(p, m, l, r) when m < 0 -> let (result, l) = go l in Some(result, bin p m l r)\r\n        | _ -> Some(go t)\r\n\r\n    ///O(log n). Retrieves the minimal (key,value) couple of the map, and the map stripped from that element. fails (in the monad) when passed an empty map. Credit: Haskell.org\r\n    let minViewWithKey t =\r\n        let rec go =\r\n            function\r\n            | Bin(p, m, l, r) -> let (result, l) = go l in (result, bin p m l r)\r\n            | Tip(k, y) -> ((k,y), Nil)\r\n            | Nil -> failwith \"minViewWithKey Nil\"\r\n        match t with\r\n        | Nil -> None\r\n        | Bin(p, m, l, r) when m < 0 -> let (result, r) = go r in Some(result, bin p m l r)\r\n        | _ -> Some(go t)\r\n\r\n    ///O(log n). Update the value at the maximal key. Credit: Haskell.org\r\n    let updateMax f = updateMaxWithKey (konst f)\r\n\r\n    ///O(log n). Update the value at the minimal key. Credit: Haskell.org\r\n    let updateMin f = updateMinWithKey (konst f)\r\n\r\n    let private first f (x, y) = (f x, y)\r\n\r\n    ///O(min(n,W)). Retrieves the maximal key of the map, and the map stripped of that element, or Nothing if passed an empty map. Credit: Haskell.org\r\n    let maxView t = Option.map (first snd) (maxViewWithKey t)\r\n\r\n    ///O(min(n,W)). Retrieves the minimal key of the map, and the map stripped of that element, or Nothing if passed an empty map. Credit: Haskell.org\r\n    let minView t = Option.map (first snd) (minViewWithKey t)\r\n\r\n    ///O(log n). Retrieves the maximal key of the map, and the map stripped from that element. Credit: Haskell.org\r\n    let deleteFindMax t =\r\n        match maxViewWithKey <| t with\r\n        | Some x -> x\r\n        | _ -> failwith \"deleteFindMax: empty map has no maximal element\"\r\n\r\n    ///O(log n). Retrieves the minimal key of the map, and the map stripped from that element. Credit: Haskell.org\r\n    let deleteFindMin t =\r\n        match minViewWithKey <| t with\r\n        | Some x -> x\r\n        | _ -> failwith \"deleteFindMin: empty map has no minimal element\"\r\n\r\n    ///O(log n). The minimal key of the map. Credit: Haskell.org\r\n    let findMin t =\r\n        let rec go =\r\n            function\r\n            | Tip(k, v) -> (k, v)\r\n            | Bin(_, _, l, _) -> go l\r\n            | _ -> failwith \"findMin Nil\"\r\n        match t with\r\n        | Bin(_, m, l, r) -> if m < 0 then go r else go l\r\n        | Tip(k, v) -> (k, v)\r\n        | _ -> failwith \"findMin: empty map has no minimal element\"\r\n\r\n    ///O(log n). The maximal key of the map. Credit: Haskell.org\r\n    let findMax t =\r\n        let rec go =\r\n            function\r\n            | Tip(k, v) -> (k, v)\r\n            | Bin(_, _, _, r) -> go r\r\n            | _ -> failwith \"findMax Nil\"\r\n        match t with\r\n        | Bin(_, m, l, r) -> if m < 0 then go l else go r\r\n        | Tip(k, v) -> (k, v)\r\n        | _ -> failwith \"findMax: empty map has no maximal element\"\r\n\r\n    ///O(log n). Delete the minimal key. Credit: Haskell.org\r\n    let deleteMin t = \r\n        match minView <| t with\r\n        | Some x -> snd x\r\n        | _ -> Nil\r\n\r\n    ///O(log n). Delete the maximal key. Credit: Haskell.org\r\n    let deleteMax t =\r\n        match maxView <| t with\r\n        | Some x -> snd x\r\n        | _ -> Nil\r\n\r\n    ///O(n). Map a function over all values in the map. Credit: Haskell.org\r\n    let rec mapWithKey f t =\r\n        match t with\r\n        | Bin(p, m, l, r) -> Bin(p, m, mapWithKey f l, mapWithKey f r)\r\n        | Tip(k, x) -> Tip(k, f k x)\r\n        | Nil -> Nil\r\n\r\n    ///O(n). Map a function over all values in the map. Credit: Haskell.org\r\n    let rec map<'T1, 'T2> (f : 'T1 -> 'T2) (m : intmap<'T1>) : intmap<'T2> =\r\n        match m with\r\n        | Bin(p, m, l, r) -> Bin(p, m, map f l, map f r)\r\n        | Tip(k, x) -> Tip(k, f x)\r\n        | Nil -> Nil\r\n\r\n\r\n    let rec private mapAccumL f a t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            let (a1,l) = mapAccumL f a l\r\n            let (a2,r) = mapAccumL f a1 r\r\n            (a2, Bin(p, m, l, r))\r\n        | Tip(k, x) -> let (a,x) = f a k x in (a,Tip(k, x))\r\n        | Nil -> (a, Nil)\r\n\r\n    ///O(n). The function mapAccum threads an accumulating argument through the map in ascending order of keys. Credit: Haskell.org\r\n    let mapAccumWithKey f acc t = mapAccumL f acc t\r\n\r\n    ///O(n). The function mapAccumWithKey threads an accumulating argument through the map in ascending order of keys. Credit: Haskell.org\r\n    let mapAccum f acc t= mapAccumWithKey (fun a' _ x -> f a' x) acc t\r\n\r\n    ///O(n). Filter all keys/values that satisfy some predicate. Credit: Haskell.org\r\n    let rec filterWithKey predicate t =\r\n        match t with\r\n        | Bin(p, m, l, r) -> bin p m (filterWithKey predicate l) (filterWithKey predicate r)\r\n        | Tip(k, x) -> if predicate k x then Tip(k, x) else Nil\r\n        | _ -> Nil\r\n\r\n    ///O(n). Filter all values that satisfy some predicate. Credit: Haskell.org\r\n    let filter p m = filterWithKey (fun _ x -> p x) m\r\n\r\n    ///O(n). partition the map according to some predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also split. Credit: Haskell.org\r\n    let rec partitionWithKey predicate t =\r\n        match t with\r\n        | Bin(p, m, l, r)  ->\r\n            let (l1, l2) = partitionWithKey predicate l\r\n            let (r1, r2) = partitionWithKey predicate r\r\n            (bin p m l1 r1, bin p m l2 r2)\r\n        | Tip(k, x) -> if predicate k x then (t, Nil) else (Nil, t)\r\n        | _ -> (Nil, Nil)\r\n\r\n    ///O(n). partition the map according to some predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also split. Credit: Haskell.org\r\n    let partition p m = partitionWithKey (fun _ x -> p x) m\r\n\r\n    ///O(n). Map keys/values and collect the Just results. Credit: Haskell.org\r\n    let rec mapOptionWithKey f t =\r\n        match t with\r\n        | Bin(p, m, l, r) -> bin p m (mapOptionWithKey f l) (mapOptionWithKey f r)\r\n        | Tip(k, x) ->\r\n            match f k x with\r\n            | Some y -> Tip(k, y)\r\n            | None -> Nil\r\n        | Nil -> Nil\r\n        \r\n    ///O(n). Map keys/values and collect the Just results. Credit: Haskell.org\r\n    let rec mapOptionWithKey2 (f : int -> 'T1 -> option<'T2 * 'T3>) (t: intmap<'T1>) : intmap<'T2> * intmap<'T3>  =\r\n        match t with\r\n        | Bin(p, m, l, r) -> \r\n            let la, lb = mapOptionWithKey2 f l\r\n            let ra, rb = mapOptionWithKey2 f r\r\n            bin p m la ra,\r\n            bin p m lb rb\r\n        | Tip(k, x) ->\r\n            match f k x with\r\n            | Some (a,b) -> Tip(k, a), Tip(k, b)\r\n            | None -> Nil, Nil\r\n        | Nil -> Nil, Nil\r\n\r\n    ///O(n). Map values and collect the Just results. Credit: Haskell.org\r\n    let mapOption f = mapOptionWithKey (fun _ x -> f x)\r\n\r\n    ///O(n). Map keys/values and separate the Left and Right results. Credit: Haskell.org\r\n    let rec mapChoiceWithKey f t =\r\n        match t with\r\n        | Bin(p, m, l, r) ->\r\n            let (l1, l2) = mapChoiceWithKey f l\r\n            let (r1, r2) = mapChoiceWithKey f r\r\n            (bin p m l1 r1, bin p m l2 r2)\r\n        | Tip(k, x) ->\r\n            match f k x with\r\n            | Choice1Of2 y  -> (Tip(k, y), Nil)\r\n            | Choice2Of2 z -> (Nil, Tip(k, z))\r\n        | Nil -> (Nil, Nil)\r\n\r\n    ///O(n). Map values and separate the Left and Right results. Credit: Haskell.org\r\n    let mapChoice f = mapChoiceWithKey (fun _ x -> f x)\r\n\r\n    ///O(log n). The expression (split k map) is a pair (map1,map2) where all keys in map1 are lower than k and all keys in map2 larger than k. Any key equal to k is found in neither map1 nor map2. Credit: Haskell.org\r\n    let split k t =\r\n        let rec go k t =\r\n            match t with\r\n            | Bin(p, m, l, r) ->\r\n                if nomatch k p m then\r\n                    if k > p then (t, Nil) else (Nil, t)\r\n                elif zero k m then\r\n                    let (lt, gt) = go k l\r\n                    (lt, append gt r)\r\n                else\r\n                    let (lt, gt) = go k r\r\n                    (append l lt, gt)\r\n            | Tip(ky, _) ->\r\n                if k > ky then (t, Nil)\r\n                else if k < ky then (Nil, t)\r\n                else (Nil, Nil)\r\n            | _ -> (Nil, Nil)\r\n        match t with\r\n        | Bin(_, m, l, r) when  m < 0 ->\r\n            if k >= 0 // handle negative numbers.\r\n                then let (lt, gt) = go k l in let lt = append r lt in (lt, gt)\r\n            else let (lt, gt) = go k r in let gt = append gt l in (lt, gt)\r\n        | _ -> go k t\r\n\r\n    ///O(log n). Performs a split but also returns whether the pivot key was found in the original map. Credit: Haskell.org\r\n    let splitTryFind k t =\r\n        let rec go k t =\r\n            match t with\r\n            | Bin(p, m, l, r) ->\r\n                if nomatch k p m then\r\n                    if k > p then (t, None, Nil) else (Nil, None, t)\r\n                elif zero k m then\r\n                    let (lt, fnd, gt) = go k l\r\n                    let gt = append gt r\r\n                    (lt, fnd, gt)\r\n                else\r\n                    let (lt, fnd, gt) = go k r\r\n                    let lt = append l lt\r\n                    (lt, fnd, gt)\r\n            | Tip(ky, y) ->\r\n                if k > ky then (t, None, Nil)\r\n                elif k < ky then (Nil, None, t)\r\n                else (Nil, Some y, Nil)\r\n            | _ -> (Nil, None, Nil)\r\n        match t with\r\n        | Bin(_, m, l, r) when  m < 0 ->\r\n            if k >= 0 // handle negative numbers.\r\n                then let (lt, fnd, gt) = go k l in let lt = append r lt in (lt, fnd, gt)\r\n            else let (lt, fnd, gt) = go k r in let gt = append gt l in (lt, fnd, gt)\r\n        | _ -> go k t\r\n\r\n    ///O(n). FoldBack the values in the map, such that fold f z == Prelude.foldr f z . elems. Credit: Haskell.org\r\n    let foldBack f z =\r\n        let rec go z =\r\n            function\r\n            | Tip(_, x) -> f x z\r\n            | Bin(_, _, l, r) -> go (go z r) l\r\n            | _ -> z\r\n        fun t ->\r\n            match t with\r\n            | Bin(_, m, l, r) ->\r\n                if m < 0 then go (go z l) r  // put negative numbers before.\r\n                else go (go z r) l\r\n            | _ -> go z t\r\n\r\n    ///O(n). Fold the values in the map, such that fold f z == Prelude.foldr f z . elems. Credit: Haskell.org\r\n    let fold f z =\r\n        let rec go z =\r\n            function\r\n            | Tip(_, x) -> f z x\r\n            | Bin(_, _, l, r) -> go (go z l) r\r\n            | _ -> z\r\n        fun t ->\r\n            match t with\r\n            | Bin(_, m, l, r) ->\r\n                if m < 0 then go (go z r) l  // put negative numbers before.\r\n                else go (go z l) r\r\n            | _ -> go z t\r\n\r\n    ///O(n). FoldBack the keys and values in the map, such that foldWithKey f z == Prelude.foldr (uncurry f) z . toAscList. Credit: Haskell.org\r\n    let inline foldBackWithKey f z = fun (t: _ intmap) -> t.FoldBackWithKey f z\r\n\r\n    ///O(n). Fold the keys and values in the map, such that foldWithKey f z == Prelude.foldr (uncurry f) z . toAscList. Credit: Haskell.org\r\n    let foldWithKey f z =\r\n        let rec go z =\r\n            function\r\n            | Tip(kx, x) -> f z kx x\r\n            | Bin(_, _, l, r) -> go (go z l) r\r\n            | Nil -> z\r\n        fun t ->\r\n            match t with\r\n            | Bin(_, m, l, r) ->\r\n                if m < 0 then go (go z r) l  // put negative numbers before.\r\n                else go (go z l) r\r\n            | _ -> go z t\r\n    \r\n    ///O(n). Return all elements of the map in the ascending order of their keys. Credit: Haskell.org\r\n    let values m = foldBack (fun a b -> List.Cons (a, b)) [] m\r\n\r\n    ///O(n). Return all keys of the map in ascending order. Credit: Haskell.org\r\n    let keys m = foldBackWithKey (fun k _ ks -> k :: ks) [] m\r\n\r\n    ///O(n). Convert the map to a list of key/value pairs. Credit: Haskell.org\r\n    let toList (m: _ intmap) = m.ToList()\r\n\r\n    ///O(n). Convert the map to a seq of key/value pairs. Credit: Haskell.org\r\n    let toSeq (m : intmap<'T1>) = m.ToSeq()\r\n\r\n    ///O(n). Convert the map to an array of key/value pairs. Credit: Haskell.org\r\n    let toArray m = m |> toList |> List.toArray\r\n\r\n    ///O(n*min(n,W)). Create a map from a list of key/value pairs. Credit: Haskell.org\r\n    let ofList xs =\r\n        let ins t (k, x) = insert k x t\r\n        List.fold ins empty xs\r\n\r\n    ///O(n*min(n,W)). Build a map from a list of key/value pairs with a combining function. See also fromAscListWithKey'. Credit: Haskell.org\r\n    let ofListWithKey f xs =\r\n        let ins t (k, x) = insertWithKey f k x t\r\n        List.fold ins empty xs\r\n\r\n    ///O(n*min(n,W)). Create a map from a list of key/value pairs with a combining function. See also fromAscListWith. Credit: Haskell.org\r\n    let ofListWith f xs = ofListWithKey (fun _ x y -> f x y) xs\r\n\r\n    ///O(1). Create a map from a single key/value pair.\r\n    let single k x = Tip(k, x)\r\n\r\n    ///O(n*min(n,W)). Create a map from a seq of key/value pairs. Credit: Haskell.org\r\n    let ofSeq xs = xs |> List.ofSeq |> ofList\r\n\r\n    ///O(n*min(n,W)). Build a map from a seq of key/value pairs with a combining function. See also fromAscListWithKey'. Credit: Haskell.org\r\n    let ofSeqWithKey f xs = xs |> List.ofSeq |> ofListWithKey f\r\n\r\n    ///O(n*min(n,W)). Create a map from a seq of key/value pairs with a combining function. See also fromAscListWith. Credit: Haskell.org\r\n    let ofSeqWith f xs = xs |> List.ofSeq |> ofListWith f\r\n\r\n    ///O(n*min(n,W)). Create a map from an array of key/value pairs. Credit: Haskell.org\r\n    let ofArray xs = xs |> List.ofArray |> ofList\r\n\r\n    ///O(n*min(n,W)). Build a map from an array of key/value pairs with a combining function. See also fromAscListWithKey'. Credit: Haskell.org\r\n    let ofArrayWithKey f xs = xs |> List.ofArray |> ofListWithKey f\r\n\r\n    ///O(n*min(n,W)). Create a map from an array of key/value pairs with a combining function. See also fromAscListWith. Credit: Haskell.org\r\n    let ofArrayWith f xs = xs |> List.ofArray |> ofListWith f\r\n\r\n    ///O(n*min(n,W)). mapKeys f s is the map obtained by applying f to each key of s. The size of the result may be smaller if f maps two or more distinct keys to the same new key. In this case the value at the greatest of the original keys is retained. Credit: Haskell.org\r\n    let mapKeys f = ofList << foldBackWithKey (fun k x xs -> (f k, x) :: xs) []\r\n\r\n    ///O(n*log n). mapKeysWith c f s is the map obtained by applying f to each key of s. The size of the result may be smaller if f maps two or more distinct keys to the same new key. In this case the associated values will be combined using c. Credit: Haskell.org\r\n    let mapKeysWith c f = ofListWith c << foldBackWithKey (fun k x xs -> (f k, x) :: xs) []\r\n\r\n    ///O(n+m). The expression (isSubmapOfBy f m1 m2) returns True if all keys in m1 are in m2, and when f returns True when applied to their respective values. Credit: Haskell.org\r\n    let rec isSubmapOfBy predicate t1 t2 =\r\n        match t1 with\r\n        | Bin(p1, m1, l1, r1) ->\r\n            match t2 with \r\n            | Bin(p2, m2, l2, r2) -> \r\n                if shorter m1 m2 then false\r\n                elif shorter m2 m1 then \r\n                    match' p1 p2 m2 &&\r\n                    (if zero p1 m2 then isSubmapOfBy predicate t1 l2\r\n                        else isSubmapOfBy predicate t1 r2)\r\n                else\r\n                    p1 = p2 && isSubmapOfBy predicate l1 l2 && isSubmapOfBy predicate r1 r2\r\n            | _ -> false\r\n        | Tip(k, x) ->\r\n            match tryFind k t2 with\r\n                | Some y  -> predicate x y\r\n                | None -> false\r\n        | _ -> true\r\n\r\n    ///O(n+m). Is this a submap? Defined as (isSubmapOf = isSubmapOfBy (==)). Credit: Haskell.org\r\n    let isSubmapOf m1 m2 = isSubmapOfBy (=) m1 m2\r\n\r\n    type private Ordering =\r\n        | GT\r\n        | LT\r\n        | EQ\r\n\r\n    let rec private submapCmp predicate t1 t2 =\r\n\r\n        let submapCmpLt p1 r1 t1 p2 m2 l2 r2  =\r\n            if nomatch p1 p2 m2 then GT\r\n            elif zero p1 m2 then submapCmp predicate t1 l2\r\n            else submapCmp predicate t1 r2\r\n\r\n        let submapCmpEq l1 r1 l2 r2 =\r\n            match (submapCmp predicate l1 l2, submapCmp predicate r1 r2) with\r\n            | (GT,_ ) -> GT\r\n            | (_ ,GT) -> GT\r\n            | (EQ,EQ) -> EQ\r\n            | _ -> LT\r\n        match t1 with\r\n        | Bin(p1, m1, l1, r1) ->\r\n            match t2 with \r\n            | Bin(p2, m2, l2, r2) ->\r\n                if shorter m1 m2 then GT\r\n                elif shorter m2 m1 then submapCmpLt p1 r1 t1 p2 m2 l2 r2\r\n                elif p1 = p2 then submapCmpEq l1 r1 l2 r2\r\n                else GT // disjoint\r\n            | _ -> GT\r\n        | Tip(kx, x) ->\r\n            match t2 with\r\n            | Tip(ky, y) ->\r\n                if (kx = ky) && predicate x y then EQ\r\n                else GT// disjoint\r\n            | _ ->\r\n                match tryFind kx t2 with\r\n                | Some y when predicate x y -> LT\r\n                | _ -> GT // disjoint\r\n        | _ ->\r\n            match t2 with \r\n            | Nil -> EQ\r\n            | _ -> LT\r\n\r\n    ///O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (isProperSubmapOfBy f m1 m2) returns True when m1 and m2 are not equal, all keys in m1 are in m2, and when f returns True when applied to their respective values.  Credit: Haskell.org\r\n    let isProperSubmapOfBy predicate t1 t2 =\r\n        match submapCmp predicate t1 t2 with\r\n        | LT -> true\r\n        | _ -> false\r\n\r\n    ///O(n+m). Is this a proper submap? (ie. a submap but not equal). Defined as (isProperSubmapOf = isProperSubmapOfBy (==)). Credit: Haskell.org\r\n    let isProperSubmapOf m1 m2 = isProperSubmapOfBy (=) m1 m2\r\n\r\n\r\n    ///Compares two UIntMaps and calls back:\r\n    ///del for any key-value-pair that is in m1 and not in m2, and\r\n    ///add for any key-value-pair that is in m2 and not in m1, and\r\n    ///mod for any key-value-pair is in both, but has changed.\r\n    ///Untouched sub-trees that are reference-equal are not touched.\r\n    let computeDelta (change : int -> 'T1 -> 'T1 -> option<'T2>) (del : intmap<'T1> -> intmap<'T2>) (add : intmap<'T1> -> intmap<'T2>) =\r\n        \r\n        let inline ifChanged (Tip(k1, x1)) (Tip(_, x2)) =\r\n            match change k1 x1 x2 with\r\n            | None -> Nil\r\n            | Some x -> Tip(k1, x)\r\n\r\n        let inline maybe_join p1 t1 p2 t2  =\r\n            match t1, t2 with\r\n            | Nil, t2 -> t2\r\n            | t1, Nil -> t1\r\n            | _ ->  join p1 t1 p2 t2\r\n     \r\n        let rec merge1 p1 m1 t1 l1 r1 p2 m2 t2 =\r\n            if nomatch p2 p1 m1 then maybe_join p1 (del t1) p2 (add t2)\r\n            elif zero p2 m1 then bin p1 m1 (go l1 t2) (del r1)\r\n            else bin p1 m1 (del l1) (go r1 t2)\r\n\r\n        and merge2 p1 m1 t1 p2 m2 t2 l2 r2 =\r\n            if nomatch p1 p2 m2 then maybe_join p1 (del t1) p2 (add t2)\r\n            elif zero p1 m2 then bin p2 m2 (go t1 l2) (add r2)\r\n            else bin p2 m2 (add l2) (go t1 r2)\r\n\r\n        and go t1 t2 =\r\n            if Object.ReferenceEquals (t1, t2) then\r\n                Nil\r\n            else\r\n                match t1 with\r\n                | Bin(p1, m1, l1, r1) ->\r\n                    match t2 with\r\n                    | Bin(p2, m2, l2, r2) ->\r\n                        if shorter m1 m2 then merge1 p1 m1 t1 l1 r1 p2 m2 t2\r\n                        elif shorter m2 m1 then merge2 p1 m1 t1 p2 m2 t2 l2 r2\r\n                        elif p1 = p2 then bin p1 m1 (go l1 l2) (go r1 r2)\r\n                        else maybe_join p1 (del t1) p2 (add t2)\r\n                    | Tip (k2', _) ->\r\n                        let rec merge t2 k2 t1 =\r\n                            match t1 with\r\n                            | Bin(p1, m1, l1, r1) ->\r\n                                if nomatch k2 p1 m1 then maybe_join p1 (del t1) k2 (add t2)\r\n                                elif zero k2 m1 then bin p1 m1 (merge t2 k2 l1) (del r1)\r\n                                else bin p1 m1 (del l1) (merge t2 k2 r1)\r\n                            | Tip(k1, _) ->\r\n                                if k1 = k2 then ifChanged t1 t2\r\n                                else maybe_join k1 (del t1) k2 (add t2)\r\n                            | _ -> add t2\r\n                        merge t2 k2' t1\r\n                    | _ -> del t1\r\n                | Tip(k1', _) ->\r\n                    let rec merge t1 k1 t2 =\r\n                        match t2 with\r\n                        | Bin(p2, m2, l2, r2) ->\r\n                            if nomatch k1 p2 m2 then maybe_join k1 (del t1) p2 (add t2)\r\n                            elif zero k1 m2 then bin p2 m2 (merge t1 k1 l2) (add r2)\r\n                            else bin p2 m2 (add l2) (merge t1 k1 r2)\r\n                        | Tip(k2, _) ->\r\n                            if k1 = k2 then ifChanged t1 t2\r\n                            else maybe_join k1 (del t1) k2 (add t2)\r\n                        | _ -> del t1\r\n                    merge t1 k1' t2\r\n                | _ -> add t2\r\n        go\r\n\r\n    \r\n\r\n    let rec equals (valueEqual : 'T1 -> 'T1 -> bool) (l : intmap<'T1>) (r : intmap<'T1>) =\r\n        if System.Object.ReferenceEquals(l, r) then\r\n            true\r\n        else\r\n            match l, r with\r\n                | Nil, Nil -> \r\n                    true\r\n\r\n                | Tip(lh,l), Tip(rh,r) -> \r\n                    lh = rh && valueEqual l r\r\n\r\n                | Bin(lp, lm, ll, lr), Bin(rp, rm, rl, rr) ->\r\n                    lp = rp && lm = rm && equals valueEqual ll rl && equals valueEqual lr rr\r\n\r\n                | _ ->\r\n                    false","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections\r\nopen System.Collections.Generic\r\n\r\n/// Helper functions for hash-collision lists.\r\n/// Most members have bad runtime, but the lists should be quite small when using appropriate hashCodes.\r\nmodule internal HashSetList =\r\n\r\n    let inline combineHash (a : int) (b : int) =\r\n        uint32 a ^^^ uint32 b + 0x9e3779b9u + ((uint32 a) <<< 6) + ((uint32 a) >>> 2) |> int\r\n\r\n    let rec add (cnt : ref<int>) (value : 'T) (list : list<'T>) =\r\n        match list with\r\n            | [] -> \r\n                cnt := !cnt + 1\r\n                [value]\r\n            | h :: tail ->\r\n                if Unchecked.equals h value then\r\n                    list\r\n                else\r\n                    h :: add cnt value tail\r\n\r\n    let rec remove (cnt : ref<int>) (value : 'T) (list : list<'T>) =\r\n        match list with\r\n            | [] ->\r\n                None\r\n            | h :: tail ->\r\n                if Unchecked.equals h value then\r\n                    cnt := !cnt - 1\r\n                    match tail with\r\n                        | [] -> None\r\n                        | _ -> Some tail\r\n                else\r\n                    match remove cnt value tail with\r\n                        | Some t -> Some (h :: t)\r\n                        | None -> Some [h]\r\n\r\n    let rec union (dupl : ref<int>) (l : list<'T>) (r : list<'T>) =\r\n        let newR = \r\n            r |> List.filter (fun r ->\r\n                if l |> List.exists (Unchecked.equals r) then\r\n                    dupl := !dupl + 1\r\n                    false\r\n                else\r\n                    true\r\n            )\r\n\r\n        l @ newR\r\n\r\n    let rec difference (cnt : ref<int>) (l : list<'T>) (r : list<'T>) =\r\n        match l with\r\n            | [] -> \r\n                None\r\n            | h :: tail ->\r\n                if List.exists (Unchecked.equals h) r then\r\n                    difference cnt tail r\r\n                else\r\n                    cnt := !cnt + 1\r\n                    match difference cnt tail r with\r\n                        | Some t -> Some (h :: t)\r\n                        | None -> Some [h]\r\n                    \r\n\r\n    let rec intersect (cnt : ref<int>) (l : list<'T>) (r : list<'T>) =\r\n        match l with\r\n            | [] ->\r\n                None\r\n            | h :: tail ->\r\n                if List.exists (Unchecked.equals h) r then\r\n                    cnt := !cnt + 1\r\n                    match intersect cnt tail r with\r\n                        | Some t -> Some (h :: t)\r\n                        | None -> Some [h]\r\n                else\r\n                    intersect cnt tail r\r\n\r\n\r\n    let rec mergeWithOption (f : 'A -> bool -> bool -> option<'B>) (l : list<'A>) (r : list<'A>) =\r\n        let newL = \r\n            l |> List.choose (fun lk ->\r\n                let other = r |> List.exists (fun rk -> Unchecked.equals rk lk)\r\n \r\n                match f lk true other with\r\n                    | Some r -> Some (struct (lk, r))\r\n                    | None -> None\r\n            )\r\n        let newR =\r\n            r |> List.choose (fun rk ->\r\n                if l |> List.forall (fun lk -> not (Unchecked.equals lk rk)) then\r\n                    match f rk false true with\r\n                        | Some r -> Some (struct (rk, r))\r\n                        | None -> None\r\n                else \r\n                    None\r\n            )\r\n\r\n        match newL with\r\n        | [] ->\r\n            match newR with\r\n            | [] -> None\r\n            | _ -> Some newR\r\n        | _ ->\r\n            match newR with\r\n                | [] -> Some newL\r\n                | _ -> Some (newL @ newR)\r\n          \r\n    let rec equals (l : list<'T>) (r : list<'T>) =\r\n        let mutable r = r\r\n        let c = ref 0\r\n        \r\n        use e = (l :> seq<_>).GetEnumerator()\r\n        while !c = 0 && e.MoveNext() do\r\n            let l = e.Current\r\n            c := 1\r\n            r <- remove c l r |> Option.defaultValue []\r\n\r\n        !c = 0 && List.isEmpty r\r\n\r\n/// Immutable hash-based set datastructure.\r\n/// Hash/equality are determined using the Unchecked module\r\n[<Struct; NoComparison; CustomEquality>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype HashSet<'T> internal(cnt : int, store : intmap<list<'T>>) =\r\n    static let empty = HashSet(0, IntMap.empty)\r\n\r\n    /// Internal for getting the IntMap store\r\n    member internal x.Store = store\r\n\r\n    /// The empty HashSet\r\n    static member Empty : HashSet<'T> = empty\r\n    \r\n    /// Is the set empty? `O(1)`\r\n    member x.IsEmpty = cnt = 0\r\n\r\n    /// The number of elements in the set `O(1)`    \r\n    member x.Count = cnt\r\n\r\n    /// Adds the given entry. `O(log N)`\r\n    member x.Add (value : 'T) =\r\n        let hash = Unchecked.hash value\r\n        let cnt = ref cnt\r\n\r\n        let newStore = \r\n            store |> IntMap.alter (fun o ->\r\n                match o with\r\n                    | None -> \r\n                        cnt := !cnt + 1 \r\n                        Some [value]\r\n                    | Some old -> \r\n                        HashSetList.add cnt value old |> Some\r\n            ) hash\r\n\r\n        HashSet(!cnt, newStore)\r\n  \r\n    /// Adds the given entry and returns none if it was already existing. `O(log N)`\r\n    member x.TryAdd (value : 'T) =\r\n        let res = x.Add value\r\n        if res.Count <> cnt then Some res\r\n        else None\r\n      \r\n    /// Removes the given entry. `O(log N)`\r\n    member x.Remove (value : 'T) =\r\n        let hash = Unchecked.hash value\r\n        let cnt = ref cnt\r\n        \r\n        let newStore = \r\n            store |> IntMap.alter (fun o ->\r\n                match o with\r\n                    | None -> None\r\n                    | Some old -> HashSetList.remove cnt value old\r\n            ) hash\r\n\r\n        HashSet(!cnt, newStore)\r\n        \r\n    /// Removes the given entry and returns none if it was not existing. `O(log N)`\r\n    member x.TryRemove (value : 'T) =\r\n        let res = x.Remove value\r\n        if res.Count <> cnt then Some res\r\n        else None\r\n\r\n    /// Tests if the given key exists. `O(log N)`\r\n    member x.Contains (value : 'T) =\r\n        let hash = Unchecked.hash value\r\n        match IntMap.tryFind hash store with\r\n            | Some l -> l |> List.exists (Unchecked.equals value)\r\n            | None -> false\r\n    \r\n    /// Adds or deletes the given key.\r\n    /// The update functions gets a boolean indicating whether the key was contained and\r\n    /// Can return a new \"contained-value\".\r\n    /// `O(log N)`     \r\n    member x.Alter(key : 'T, f : bool -> bool) =\r\n        let hash = Unchecked.hash key\r\n        let mutable cnt = cnt\r\n\r\n        let newStore =  \r\n            store |> IntMap.alter (fun ol ->\r\n                match ol with\r\n                    | None ->\r\n                        if f false then\r\n                            cnt <- cnt + 1\r\n                            Some [key]\r\n                        else\r\n                            None\r\n                    | Some ol ->\r\n                        let mutable was = List.exists (Unchecked.equals key) ol\r\n                        let should = f was\r\n                        if should && not was then \r\n                            cnt <- cnt + 1\r\n                            Some (key :: ol)\r\n                        elif not should && was then\r\n                            cnt <- cnt - 1\r\n                            match List.filter (Unchecked.equals key >> not) ol with\r\n                                | [] -> None\r\n                                | l -> Some l\r\n                        else\r\n                            Some ol\r\n            ) hash\r\n\r\n        HashSet(cnt, newStore)\r\n\r\n    /// Creates a new set by applying the given function to all entries.\r\n    /// `O(N * log N)`\r\n    member x.Map (mapping : 'T -> 'B) =\r\n        let mutable res = HashSet.Empty\r\n        for e in x.ToSeq() do\r\n            res <- res.Add(mapping e)\r\n        res\r\n\r\n    /// Creates a new set by applying the given function to all entries.\r\n    /// `O(N * log N)`\r\n    member x.Choose (mapping : 'T -> option<'B>) =\r\n        let mutable res = HashSet.Empty\r\n        for e in x.ToSeq() do\r\n            match mapping e with\r\n                | Some e ->\r\n                    res <- res.Add(e)\r\n                | None ->\r\n                    ()\r\n        res\r\n\r\n    /// Creates a new set that contains all entries for which predicate was true.\r\n    /// `O(N * log N)`\r\n    member x.Filter (predicate : 'T -> bool) =\r\n        let mutable cnt = 0\r\n        let predicate v =\r\n            if predicate v then\r\n                cnt <- cnt + 1\r\n                true\r\n            else\r\n                false\r\n\r\n        let newStore =\r\n            store |> IntMap.mapOption (fun l ->\r\n                match List.filter predicate l with\r\n                    | [] -> None\r\n                    | l -> Some l\r\n            )\r\n\r\n        HashSet(cnt, newStore)\r\n    \r\n    /// Creates a new set by applying the mapping function to each entry and unioning the results.\r\n    /// `O(N * log N)`\r\n    member x.Collect (mapping : 'T -> HashSet<'B>) =\r\n        let mutable res = HashSet<'B>.Empty\r\n        for (_,l) in IntMap.toSeq store do\r\n            for e in l do\r\n                res <- res.Union (mapping e)\r\n        res\r\n\r\n    /// Applies the iter function to all entries of the set.\r\n    /// `O(N)`\r\n    member x.Iter (iter : 'T -> unit) =\r\n        store |> IntMap.toSeq |> Seq.iter (fun (_,l) -> l |> List.iter iter)\r\n    \r\n    /// Tests whether an entry making the predicate true exists.\r\n    /// `O(N)`\r\n    member x.Exists (predicate : 'T -> bool) =\r\n        store |> IntMap.toSeq |> Seq.exists (fun (_,l) -> l |> List.exists predicate)\r\n\r\n    /// Tests whether all entries fulfil the given predicate.\r\n    /// `O(N)`\r\n    member x.Forall (predicate : 'T -> bool) =\r\n        store |> IntMap.toSeq |> Seq.forall (fun (_,l) -> l |> List.forall predicate)\r\n\r\n    /// Folds over all entries of the set.\r\n    /// Note that the order for elements is undefined.\r\n    /// `O(N)`\r\n    member x.Fold (seed : 'S, folder : 'S -> 'T -> 'S) =\r\n        store |> IntMap.toSeq |> Seq.fold (fun s (_,l) ->\r\n            l |> List.fold folder s\r\n        ) seed\r\n\r\n    /// Creates a new set containing all elements from this and other.\r\n    /// `O(N + M)`\r\n    member x.Union (other : HashSet<'T>) : HashSet<'T> =\r\n        let dupl = ref 0\r\n        let newStore = IntMap.appendWith (fun l r -> HashSetList.union dupl l r) store other.Store\r\n        HashSet(cnt + other.Count - !dupl, newStore)\r\n\r\n    /// Creates a new set containing all elements from this that are not in other.\r\n    /// `O(N + M)`\r\n    member x.Difference (other : HashSet<'T>) : HashSet<'T> =\r\n        let cnt = ref 0\r\n        let newStore =\r\n            IntMap.mergeWithKey \r\n                (fun k ll rl -> HashSetList.difference cnt ll rl) \r\n                (fun l -> cnt := l |> IntMap.fold (fun s l -> s + List.length l) !cnt; l)\r\n                (fun r -> IntMap.empty) \r\n                store \r\n                other.Store\r\n\r\n        HashSet(!cnt, newStore)\r\n    \r\n    /// Creates a new set containing all elements that are present in both sets.\r\n    /// `O(N + M)`\r\n    member x.Intersect (other : HashSet<'T>) : HashSet<'T> =\r\n        let cnt = ref 0\r\n        let newStore =\r\n            IntMap.mergeWithKey \r\n                (fun k ll rl -> HashSetList.intersect cnt ll rl) \r\n                (fun l -> IntMap.empty)\r\n                (fun r -> IntMap.empty) \r\n                store \r\n                other.Store\r\n\r\n        HashSet(!cnt, newStore)\r\n       \r\n    /// Creates a seq holding all values contained in the set.\r\n    /// `O(N)`\r\n    member x.ToSeq() =\r\n        store |> IntMap.toSeq |> Seq.collect snd\r\n       \r\n    /// Creates a list holding all values contained in the set.\r\n    /// `O(N)`\r\n    member x.ToList() =\r\n        store |> IntMap.toList |> List.collect snd\r\n               \r\n    /// Creates an array holding all values contained in the set.\r\n    /// `O(N)`\r\n    member x.ToArray() =\r\n        let result = Array.zeroCreate cnt\r\n        let mutable i = 0\r\n        for (_, list) in IntMap.toSeq store do\r\n            for value in list do\r\n                result.[i] <- value\r\n                i <- i + 1\r\n        result\r\n\r\n    /// Creates a set with a single entry\r\n    /// `O(1)`\r\n    static member Single (value : 'T) =\r\n        empty.Add value\r\n\r\n    /// Creates a set with all entries from the seq.\r\n    /// `O(N * log N)`\r\n    static member OfSeq (seq : seq<'T>) =\r\n        #if !ADAPTIVE_NO_TYPE_TESTS\r\n        match seq with\r\n        | :? HashSet<'T> as set -> set\r\n        | _ -> \r\n        #endif\r\n            let mutable res = empty\r\n            for e in seq do\r\n                res <- res.Add e\r\n            res\r\n        \r\n    /// Creates a set with all entries from the list.\r\n    /// `O(N * log N)`\r\n    static member OfList (list : list<'T>) =\r\n        HashSet.OfSeq list\r\n        \r\n    /// Creates a set with all entries from the array.\r\n    /// `O(N * log N)`\r\n    static member OfArray (arr : array<'T>) =\r\n        HashSet.OfSeq arr\r\n\r\n    /// Conservatively determines whether the two HashSets are equal.\r\n    /// `O(1)`\r\n    member x.ConservativeEquals(other : HashSet<'T>) =\r\n        System.Object.ReferenceEquals(store, other.Store)\r\n\r\n    override x.GetHashCode() =\r\n        match store with\r\n            | Nil -> 0\r\n            | _ -> store |> Seq.fold (fun s (h,_l) -> HashSetList.combineHash s h) 0\r\n\r\n    override x.Equals(o) =\r\n        #if ADAPTIVE_NO_TYPE_TESTS \r\n        IntMap.equals HashSetList.equals store (unbox<HashSet<'T>> o).Store\r\n        #else\r\n        match o with\r\n        | :? HashSet<'T> as o -> \r\n            IntMap.equals HashSetList.equals store o.Store\r\n        | _ ->\r\n            false\r\n        #endif\r\n\r\n    override x.ToString() =\r\n        let suffix =\r\n            if x.Count > 5 then \"; ...\"\r\n            else \"\"\r\n\r\n        let content =\r\n            x.ToSeq() |> Seq.truncate 5 |> Seq.map (sprintf \"%A\") |> String.concat \"; \"\r\n\r\n        \"HashSet [\" + content + suffix + \"]\"\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\n    interface IEnumerable with\r\n        member x.GetEnumerator() = new HashSetEnumerator<_>(store) :> _\r\n\r\n    interface IEnumerable<'T> with\r\n        member x.GetEnumerator() = new HashSetEnumerator<_>(store) :> _\r\n\r\nand private HashSetEnumerator<'T>(store : intmap<list<'T>>) =\r\n    let mutable stack = [store]\r\n    let mutable inner = []\r\n    let mutable current = Unchecked.defaultof<'T>\r\n\r\n    let rec moveNext() =\r\n        match inner with\r\n            | [] -> \r\n                match stack with\r\n                    | [] -> false\r\n                    | h :: rest ->\r\n                        stack <- rest\r\n                        match h with\r\n                            | Nil -> \r\n                                moveNext()\r\n\r\n                            | Tip(_,vs) ->\r\n                                match vs with\r\n                                    | v :: rest ->\r\n                                        current <- v\r\n                                        inner <- rest\r\n                                        true\r\n                                    | [] ->\r\n                                        moveNext()\r\n\r\n                            | Bin(_,_,l,r) ->\r\n                                stack <- l :: r :: stack\r\n                                moveNext()\r\n            | h :: rest ->\r\n                current <- h\r\n                inner <- rest\r\n                true\r\n\r\n    interface IEnumerator with\r\n        member x.MoveNext() = moveNext()\r\n        member x.Current = current :> obj\r\n        member x.Reset() =\r\n            stack <- [store]\r\n            inner <- []\r\n            current <- Unchecked.defaultof<_>\r\n\r\n    interface IEnumerator<'T> with\r\n        member x.Current = current\r\n        member x.Dispose() =\r\n            stack <- []\r\n            inner <- []\r\n            current <- Unchecked.defaultof<_>\r\n            \r\n/// Functional programming operators related to the HashSet<_> type.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule HashSet =\r\n\r\n    /// The empty set.\r\n    [<GeneralizableValue>]\r\n    let empty<'T> = HashSet<'T>.Empty\r\n\r\n    /// Creates a set with a single entry\r\n    /// `O(1)`\r\n    let inline single (value : 'T) =\r\n        HashSet.Single value\r\n\r\n    /// Creates a set with all entries from the seq.\r\n    /// `O(N * log N)`\r\n    let inline ofSeq (seq : seq<'T>) =\r\n        HashSet.OfSeq seq\r\n\r\n    /// Creates a set with all entries from the list.\r\n    /// `O(N * log N)`\r\n    let inline ofList (list : list<'T>) =\r\n        HashSet.OfList list\r\n\r\n    /// Creates a set with all entries from the array.\r\n    /// `O(N * log N)`\r\n    let inline ofArray (arr : 'T[]) =\r\n        HashSet.OfArray arr\r\n\r\n    /// Creates a seq holding all values contained in the set.\r\n    /// `O(N)`\r\n    let inline toSeq (set : HashSet<'T>) =\r\n        set.ToSeq()\r\n\r\n    /// Creates a list holding all values contained in the set.\r\n    /// `O(N)`\r\n    let inline toList (set : HashSet<'T>) =\r\n        set.ToList()\r\n\r\n    /// Creates an array holding all values contained in the set.\r\n    /// `O(N)`\r\n    let inline toArray (set : HashSet<'T>) =\r\n        set.ToArray()\r\n\r\n    /// Adds the given entry. `O(log N)`\r\n    let inline add (value : 'T) (set : HashSet<'T>) =\r\n        set.Add value\r\n        \r\n    /// Adds the given entry and returns none if it was already existing. `O(log N)`\r\n    let inline tryAdd (value : 'T) (set : HashSet<'T>) =\r\n        set.TryAdd value\r\n\r\n    /// Removes the given entry. `O(log N)`\r\n    let inline remove (value : 'T) (set : HashSet<'T>) =\r\n        set.Remove value\r\n        \r\n    /// Removes the given entry and returns none if it was not existing. `O(log N)`\r\n    let inline tryRemove (value : 'T) (set : HashSet<'T>) =\r\n        set.TryRemove value\r\n\r\n    /// Adds or deletes the given key.\r\n    /// The update functions gets a boolean indicating whether the key was contained and\r\n    /// Can return a new \"contained-value\".\r\n    /// `O(log N)`   \r\n    let inline alter (value : 'T) (mapping : bool -> bool) (set : HashSet<'T>) =\r\n        set.Alter(value, mapping)\r\n\r\n    /// Creates a new set containing all elements from l and r.\r\n    /// `O(N + M)`\r\n    let inline union (l : HashSet<'T>) (r : HashSet<'T>) =\r\n        l.Union r\r\n\r\n    /// Creates a new set containing all elements from the given sets.\r\n    /// `O(N + M)`\r\n    let inline unionMany (sets : seq<HashSet<'T>>) =\r\n        sets |> Seq.fold union empty\r\n\r\n    /// Creates a new set containing all elements from l that are not in r.\r\n    /// `O(N + M)`\r\n    let inline difference (l : HashSet<'T>) (r : HashSet<'T>) =\r\n        l.Difference r\r\n\r\n    /// Creates a new set containing all elements that are present in both sets.\r\n    /// `O(N + M)`\r\n    let inline intersect (l : HashSet<'T>) (r : HashSet<'T>) =\r\n        l.Intersect r\r\n\r\n    /// Creates a new set by applying the given function to all entries.\r\n    /// `O(N * log N)`\r\n    let inline map (mapping : 'A -> 'B) (set : HashSet<'A>) =\r\n        set.Map mapping\r\n\r\n    /// Creates a new set by applying the given function to all entries.\r\n    /// `O(N * log N)`\r\n    let inline choose (mapping : 'A -> option<'B>) (set : HashSet<'A>) =\r\n        set.Choose mapping\r\n\r\n    /// Creates a new set that contains all entries for which predicate was true.\r\n    /// `O(N * log N)`\r\n    let inline filter (predicate : 'T -> bool) (set : HashSet<'T>) =\r\n        set.Filter predicate\r\n\r\n    /// Creates a new set by applying the mapping function to each entry and unioning the results.\r\n    /// `O(N * log N)`\r\n    let inline collect (mapping : 'A -> HashSet<'B>) (set : HashSet<'A>) =\r\n        set.Collect mapping\r\n\r\n    /// Applies the iter function to all entries of the set.\r\n    /// `O(N)`\r\n    let inline iter (mapping : 'T -> unit) (set : HashSet<'T>) =\r\n        set.Iter mapping\r\n\r\n    /// Tests whether an entry making the predicate true exists.\r\n    /// `O(N)`\r\n    let inline exists (predicate : 'T -> bool) (set : HashSet<'T>) =\r\n        set.Exists predicate\r\n\r\n    /// Tests whether all entries fulfil the given predicate.\r\n    /// `O(N)`\r\n    let inline forall (predicate : 'T -> bool) (set : HashSet<'T>) =\r\n        set.Forall predicate\r\n\r\n    /// Folds over all entries of the set.\r\n    /// Note that the order for elements is undefined.\r\n    /// `O(N)`\r\n    let inline fold (folder : 'S -> 'T -> 'S) (seed : 'S) (set : HashSet<'T>) =\r\n        set.Fold(seed, folder)\r\n\r\n    /// Is the set empty? `O(1)`\r\n    let inline isEmpty (set : HashSet<'T>) =\r\n        set.IsEmpty\r\n\r\n    /// The number of elements in the set `O(1)` \r\n    let inline count (set : HashSet<'T>) =\r\n        set.Count\r\n\r\n    /// Tests if the given key exists. `O(log N)`\r\n    let inline contains (value : 'T) (set : HashSet<'T>) =\r\n        set.Contains value\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Threading\r\n\r\n/// AdaptiveToken represents a token that can be passed to\r\n/// inner AdaptiveObjects for evaluation.\r\n/// when passing an AdaptiveToken to the evaluation-function of \r\n/// a cell the system will create a dependency edge internally and\r\n/// future marking of the inner cell will also cause the calling cell to\r\n/// be marked.\r\n[<Struct>]\r\ntype AdaptiveToken =\r\n\r\n    /// Represents the calling IAdaptiveObject or null if none.\r\n    ///\r\n    /// Note, this is only mutable because that exposes the underlying field\r\n    /// for (reportedly) more performant access.\r\n    val mutable internal caller : IAdaptiveObject\r\n\r\n    member x.Caller =\r\n        if Unchecked.isNull x.caller then None\r\n        else Some x.caller\r\n\r\n    /// Enters the read-lock on the given object\r\n    member inline internal x.EnterRead(o : IAdaptiveObject) =\r\n        Monitor.Enter o\r\n                \r\n    /// Exits the read-lock on the given object when evaluation faulted\r\n    member inline internal x.ExitFaultedRead(o : IAdaptiveObject) =\r\n        Monitor.Exit o\r\n\r\n    /// Exits the read-lock on the given object downgrading it to a weak-lock\r\n    member inline internal x.Downgrade(o : IAdaptiveObject) =\r\n        //if x.Locked.Add o then\r\n        //    o.ReaderCount <- o.ReaderCount + 1\r\n        Monitor.Exit o\r\n\r\n    /// Exits the read-lock on the given object\r\n    member inline internal x.ExitRead(o : IAdaptiveObject) =\r\n        //if x.Locked.Remove o then\r\n        //    lock o (fun () ->\r\n        //        let rc = o.ReaderCount - 1\r\n        //        o.ReaderCount <- rc\r\n        //        if rc = 0 then Monitor.PulseAll o\r\n        //    )\r\n        Monitor.Exit o\r\n\r\n    /// Releases all held weak-locks\r\n    member inline internal x.Release() =\r\n        //for o in x.Locked do\r\n        //    lock o (fun () ->\r\n        //        let rc = o.ReaderCount - 1\r\n        //        o.ReaderCount <- rc\r\n        //        if rc = 0 then Monitor.PulseAll o\r\n        //    )\r\n        //x.Locked.Clear()\r\n        ()\r\n\r\n    /// Creates a new AdaptiveToken with the given caller\r\n    member inline internal x.WithCaller (c : IAdaptiveObject) =\r\n        AdaptiveToken(c)\r\n\r\n    /// The top-level AdaptiveToken without a calling IAdaptiveObject\r\n    static member Top = AdaptiveToken(Unchecked.defaultof<_>)\r\n\r\n    /// Creates a new AdaptiveToken using the given caller\r\n    internal new(caller : IAdaptiveObject) =\r\n        {\r\n            caller = caller\r\n        }\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections.Generic\r\n\r\n/// Implements a simple priority queue using user-given compare function\r\ntype internal PriorityQueue<'T>(cmp: 'T -> 'T -> int) =\r\n\r\n    let store = List<'T>()\r\n    let cmpFun = OptimizedClosures.FSharpFunc<'T, 'T, int>.Adapt(cmp)\r\n\r\n    /// Enqueues a new element\r\n    member x.Enqueue (v: 'T) =\r\n        store.HeapEnqueue(cmpFun, v)\r\n\r\n    /// Dequeues the min element from the queue and fails if the queue is empty\r\n    member x.Dequeue() =\r\n        store.HeapDequeue(cmpFun)\r\n\r\n    /// Gets the number of elements currently contained in the queue\r\n    member x.Count =\r\n        store.Count\r\n\r\n    /// Gets the current minimal value (according to cmp) contained\r\n    /// and fails if the queue is empty.\r\n    member x.Min = store.[0]\r\n\r\n/// Implements a queue with \"incomparable\" duplicates. \r\n/// This is helpful since regular heap implementation cannot\r\n/// deal with a large number of duplicated keys efficiently.\r\n/// Note: the duplicated values will be returned in the order they were enqueued\r\ntype internal DuplicatePriorityQueue<'T, 'Key when 'Key: comparison>(extract: 'T -> 'Key) =\r\n    let q = PriorityQueue<'Key> compare\r\n    let values = UncheckedDictionary.create<'Key, Queue<'T>>()\r\n    let mutable count = 0\r\n\r\n    /// Enqueues a new element\r\n    member x.Enqueue(v: 'T) =\r\n        let k = extract v\r\n        count <- count + 1\r\n\r\n        match values.TryGetValue(k) with\r\n        | (true, q) ->\r\n            q.Enqueue v\r\n        | _ -> \r\n            let inner = Queue<'T>()\r\n            inner.Enqueue v\r\n            values.[k] <- inner\r\n            q.Enqueue k\r\n             \r\n    /// Dequeues the current minimal value (and its key)\r\n    member x.Dequeue(key: ref<'Key>) =\r\n        let k = q.Min\r\n        match values.TryGetValue(k) with\r\n        | (true, inner) ->\r\n            let res = inner.Dequeue()\r\n            count <- count - 1\r\n            if inner.Count = 0 then\r\n                q.Dequeue() |> ignore\r\n                values.Remove k |> ignore\r\n\r\n            key := k\r\n            res\r\n        | _ ->\r\n            failwith \"inconsistent state in DuplicatePriorityQueue\"\r\n\r\n    /// Gets the number of elements currently contained in the queue\r\n    member x.Count =\r\n        count\r\n\r\n","namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Collections\r\nopen System.Collections.Generic\r\nopen FSharp.Data.Adaptive\r\n\r\n/// Represents the difference of two HashSets.\r\n/// Internally uses reference counts to represent deltas and provides \r\n/// convenient combine functions.\r\n[<Struct; CustomEquality; NoComparison>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype HashSetDelta<'T>(store: HashMap<'T, int>) =\r\n\r\n    /// The empty set.\r\n    static member Empty = HashSetDelta<'T>(HashMap.empty)\r\n\r\n    /// The internal store used by the HashSetDelta.\r\n    member internal x.Store = store\r\n\r\n    /// The number of operations contained in the HashSetDelta.\r\n    member x.Count = store.Count\r\n\r\n    /// Is the set empty?\r\n    member x.IsEmpty = store.IsEmpty\r\n\r\n    /// Adds a SetOperation to the HashSetDelta.\r\n    member x.Add (op: SetOperation<'T>) =\r\n        if op.Count <> 0 then\r\n            store |> HashMap.alter op.Value (fun o ->\r\n                let n = defaultArg o 0 + op.Count\r\n                if n = 0 then None\r\n                else Some n\r\n            )\r\n            |> HashSetDelta\r\n        else\r\n            x\r\n\r\n    /// Removes a SetOperation from the HashSetDelta.\r\n    member x.Remove (op: SetOperation<'T>) =\r\n        x.Add op.Inverse\r\n\r\n    /// The inverse operations for the given set.\r\n    member x.Inverse =\r\n        store |> HashMap.map (fun _ v -> -v) |> HashSetDelta\r\n\r\n    /// Combines two DHashSets to one using a reference counting implementation.\r\n    member x.Combine (other: HashSetDelta<'T>) =\r\n        if store.IsEmpty then \r\n            other\r\n\r\n        elif other.IsEmpty then \r\n            x\r\n\r\n        // factor 5 heuristically determined\r\n        elif store.Count * 5 < other.Count then\r\n            let mutable big = other\r\n            for d in x do\r\n                big <- big.Add d\r\n            big\r\n\r\n        elif other.Count * 5 < store.Count then\r\n            let mutable big = x\r\n            for d in other do\r\n                big <- big.Add d\r\n            big\r\n                \r\n        else\r\n            HashMap.choose2 (fun k l r -> \r\n                let r = Option.defaultValue 0 l + Option.defaultValue 0 r\r\n                if r <> 0 then Some r\r\n                else None\r\n            ) store other.Store\r\n            |> HashSetDelta\r\n\r\n    /// Applies the mapping function to all operations in the set.\r\n    member x.Map (mapping: SetOperation<'T> -> SetOperation<'T2>) =\r\n        let mutable res = HashSetDelta<'T2>.Empty\r\n        for (k,v) in store do\r\n            res <- res.Add (mapping (SetOperation(k,v)))\r\n        res\r\n        \r\n    /// Applies the mapping function to all operations in the set.\r\n    member x.Choose (f: SetOperation<'T> -> option<SetOperation<'T2>>) =\r\n        let mutable res = HashSetDelta<'T2>.Empty\r\n        for (k,v) in store do\r\n            match f (SetOperation(k,v)) with\r\n            | Some r -> res <- res.Add r\r\n            | _ -> ()\r\n        res\r\n        \r\n    /// Filters the operations contains using the given predicate.\r\n    member x.Filter (f: SetOperation<'T> -> bool) =\r\n        store |> HashMap.filter (fun k v -> SetOperation(k,v) |> f) |> HashSetDelta\r\n        \r\n    /// Applies the mapping function to all operations in the set and combines all the results.\r\n    member x.Collect (f: SetOperation<'T> -> HashSetDelta<'T2>) =\r\n        let mutable res = HashSetDelta<'T2>.Empty\r\n        for (k,v) in store do\r\n            res <- res.Combine (f (SetOperation(k,v)))\r\n        res\r\n\r\n    /// Iterates over all operations in the set.\r\n    member x.Iter (f: SetOperation<'T> -> unit) =\r\n        store |> HashMap.iter (fun k v ->\r\n            f (SetOperation(k,v))\r\n        )\r\n\r\n    /// Folds over the set.\r\n    member x.Fold (seed: 'State, f: 'State -> SetOperation<'T> -> 'State) =\r\n        (seed, store) ||> HashMap.fold (fun s k v ->\r\n            f s (SetOperation(k,v))\r\n        ) \r\n\r\n    /// Checks whether an entry fulfilling the predicate exists.\r\n    member x.Exists (f: SetOperation<'T> -> bool) =\r\n        store |> HashMap.exists (fun k v -> f (SetOperation(k,v)))\r\n        \r\n    /// Checks whether all entries fulfill the predicate exists.\r\n    member x.Forall (f: SetOperation<'T> -> bool) =\r\n        store |> HashMap.forall (fun k v -> f (SetOperation(k,v)))\r\n\r\n    /// Creates a seq containing all operations from the set.\r\n    member x.ToSeq() =\r\n        store.Store |> IntMap.toSeq |> Seq.collect (fun (_hash, values) ->\r\n            values |> Seq.map (fun struct(k,v) -> SetOperation(k,v))\r\n        )\r\n\r\n    /// Creates a list containing all operations from the set.\r\n    member x.ToList() =\r\n        store.Store |> IntMap.toList |> List.collect (fun (_hash, values) ->\r\n            values |> List.map (fun struct(k,v) -> SetOperation(k,v))\r\n        )\r\n        \r\n    /// Creates an array containing all operations from the set.\r\n    member x.ToArray() =\r\n        store |> HashMap.toArray |> Array.map SetOperation\r\n\r\n    \r\n    /// Creates a HashMap containing all operations from the set.\r\n    /// Note that this works in O(1).\r\n    member x.ToMap() = store\r\n\r\n    /// Creates a HashSetDelta using the given operations.\r\n    static member OfSeq (seq: seq<SetOperation<'T>>) =\r\n        let mutable res = HashSetDelta<'T>.Empty\r\n        for e in seq do\r\n            res <- res.Add e\r\n        res\r\n        \r\n    /// Creates a HashSetDelta using the given operations.\r\n    static member OfList (list: list<SetOperation<'T>>) =\r\n        list |> HashSetDelta.OfSeq\r\n        \r\n    /// Creates a HashSetDelta using the given operations.\r\n    static member OfArray (arr: array<SetOperation<'T>>) =\r\n        arr |> HashSetDelta.OfSeq\r\n        \r\n\r\n    override x.GetHashCode() = store.GetHashCode()\r\n    override x.Equals o =\r\n        #if ADAPTIVE_NO_TYPE_TESTS\r\n        let o = unbox<HashSetDelta<'T>> o\r\n        Unchecked.equals store o.Store\r\n        #else\r\n        match o with\r\n        | :? HashSetDelta<'T> as o -> Unchecked.equals store o.Store\r\n        | _ -> false\r\n        #endif\r\n            \r\n\r\n    override x.ToString() =\r\n        let suffix =\r\n            if x.Count > 5 then \"; ...\"\r\n            else \"\"\r\n\r\n        let content =\r\n            x.ToSeq() |> Seq.truncate 5 |> Seq.map (sprintf \"%A\") |> String.concat \"; \"\r\n\r\n        \"HashSetDelta [\" + content + suffix + \"]\"\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\n    interface IEnumerable with\r\n        member x.GetEnumerator() = new DHashSetEnumerator<_>(store) :> _\r\n\r\n    interface IEnumerable<SetOperation<'T>> with\r\n        member x.GetEnumerator() = new DHashSetEnumerator<_>(store) :> _\r\n\r\n/// Special enumerator for HashSetDelta.\r\nand private DHashSetEnumerator<'T>(store: HashMap<'T, int>) =\r\n    let e = (store :> seq<_>).GetEnumerator()\r\n\r\n    member x.Current = \r\n        let (v,c) = e.Current\r\n        SetOperation(v,c)\r\n\r\n    interface IEnumerator with\r\n        member x.MoveNext() = e.MoveNext()\r\n        member x.Current = x.Current :> obj\r\n        member x.Reset() = e.Reset()\r\n\r\n    interface IEnumerator<SetOperation<'T>> with\r\n        member x.Dispose() = e.Dispose()\r\n        member x.Current = x.Current\r\n\r\n/// Functional operators for HashSetDelta.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule HashSetDelta =\r\n\r\n    /// The empty set.\r\n    [<GeneralizableValue>]\r\n    let inline empty<'T> = HashSetDelta<'T>.Empty\r\n\r\n    /// The inverse operations for the given set.\r\n    let inline inverse (set: HashSetDelta<'T>) = set.Inverse\r\n\r\n    /// Is the set empty?\r\n    let inline isEmpty (set: HashSetDelta<'T>) = set.IsEmpty\r\n    \r\n    /// The number of operations contained in the HashSetDelta.\r\n    let inline count (set: HashSetDelta<'T>) = set.Count\r\n\r\n    /// Creates a set from a single operation.\r\n    let inline single (op: SetOperation<'T>) =\r\n        HashSetDelta(HashMap.single op.Value op.Count)\r\n\r\n    /// Creates a HashSetDelta using the given operations.\r\n    let inline ofSeq (seq: seq<SetOperation<'T>>) =\r\n        HashSetDelta.OfSeq seq\r\n\r\n    /// Creates a HashSetDelta using the given operations.\r\n    let inline ofList (list: list<SetOperation<'T>>) =\r\n        HashSetDelta.OfList list\r\n\r\n    /// Creates a HashSetDelta using the given operations.\r\n    let inline ofArray (arr: array<SetOperation<'T>>) =\r\n        HashSetDelta.OfArray arr\r\n        \r\n    /// Creates a HashSetDelta using the given operations.\r\n    /// Note that the values from the map are interpreted as reference-deltas and should therefore not be 0.\r\n    let inline ofHashMap (map: HashMap<'T, int>) =\r\n        HashSetDelta map\r\n\r\n    /// Creates a seq containing all operations from the set.\r\n    let inline toSeq (set: HashSetDelta<'T>) =\r\n        set.ToSeq()\r\n\r\n    /// Creates a list containing all operations from the set.\r\n    let inline toList (set: HashSetDelta<'T>) =\r\n        set.ToList()\r\n        \r\n    /// Creates an array containing all operations from the set.\r\n    let inline toArray (set: HashSetDelta<'T>) =\r\n        set.ToArray()\r\n\r\n    /// Creates a HashMap containing all operations from the set.\r\n    /// Note that this works in O(1).\r\n    let inline toHashMap (set: HashSetDelta<'T>) =\r\n        set.ToMap()\r\n\r\n    /// Adds a SetOperation to the HashSetDelta.\r\n    let inline add (value: SetOperation<'T>) (set: HashSetDelta<'T>) =\r\n        set.Add value\r\n\r\n    /// Removes a SetOperation from the HashSetDelta.\r\n    let inline remove (value: SetOperation<'T>) (set: HashSetDelta<'T>) =\r\n        set.Remove value\r\n\r\n    /// Combines two DHashSets to one using a reference counting implementation.\r\n    let inline combine (l: HashSetDelta<'T>) (r: HashSetDelta<'T>) =\r\n        l.Combine r\r\n\r\n    /// Applies the mapping function to all operations in the set.\r\n    let inline map (f: SetOperation<'T> -> SetOperation<'T2>) (set: HashSetDelta<'T>) =\r\n        set.Map f\r\n\r\n    /// Applies the mapping function to all operations in the set.\r\n    let inline choose (f: SetOperation<'T> -> option<SetOperation<'T2>>) (set: HashSetDelta<'T>) =\r\n        set.Choose f\r\n\r\n    /// Filters the operations contains using the given predicate.\r\n    let inline filter (f: SetOperation<'T> -> bool) (set: HashSetDelta<'T>) =\r\n        set.Filter f\r\n\r\n    /// Applies the mapping function to all operations in the set and combines all the results.\r\n    let inline collect (f: SetOperation<'T> -> HashSetDelta<'T2>) (set: HashSetDelta<'T>) =\r\n        set.Collect f\r\n\r\n    /// Iterates over all operations in the set.\r\n    let inline iter (iterator: SetOperation<'T> -> unit) (set: HashSetDelta<'T>) =\r\n        set.Iter iterator\r\n\r\n    /// Checks whether an entry fulfilling the predicate exists.\r\n    let inline exists (predicate: SetOperation<'T> -> bool) (set: HashSetDelta<'T>) =\r\n        set.Exists predicate\r\n\r\n    /// Checks whether all entries fulfill the predicate exists.\r\n    let inline forall (predicate: SetOperation<'T> -> bool) (set: HashSetDelta<'T>) =\r\n        set.Forall predicate\r\n\r\n    /// Folds over the set.\r\n    let inline fold (folder: 'State -> SetOperation<'T> -> 'State) (seed: 'State) (set: HashSetDelta<'T>) =\r\n        set.Fold(seed, folder)\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\ntype UncheckedEqualityComparer<'T> private() =\r\n    static let cmp =\r\n        { new System.Collections.Generic.IEqualityComparer<'T> with\r\n            member __.GetHashCode(o : 'T) = Unchecked.hash o\r\n            member __.Equals(l : 'T, r : 'T) = Unchecked.equals l r\r\n        }\r\n    static member Instance = cmp\r\n\r\ntype ReferenceEqualityComparer<'T when 'T : not struct> private() =\r\n    static let cmp =\r\n        { new System.Collections.Generic.IEqualityComparer<'T> with\r\n            member __.GetHashCode(o : 'T) = System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode o\r\n            member __.Equals(l : 'T, r : 'T) = System.Object.ReferenceEquals(l, r)\r\n        }\r\n    static member Instance = cmp\r\n\r\nmodule UncheckedDictionary =\r\n    let inline create<'Key, 'Value> () =\r\n        System.Collections.Generic.Dictionary<'Key, 'Value>(UncheckedEqualityComparer<'Key>.Instance)\r\n\r\nmodule UncheckedHashSet =\r\n    let inline create<'T> () =\r\n        System.Collections.Generic.HashSet<'T>(UncheckedEqualityComparer<'T>.Instance)\r\n\r\n\r\nmodule ReferenceHashSet =\r\n    let inline create<'T when 'T : not struct> () =\r\n        System.Collections.Generic.HashSet<'T>(ReferenceEqualityComparer<'T>.Instance)\r\n\r\n\r\n\r\n#if FABLE_COMPILER\r\nnamespace System.Collections.Generic\r\n\r\ntype Queue<'T>() =\r\n    let mutable store : 'T[] = Array.zeroCreate 16\r\n    let mutable next = 0\r\n    let mutable first = 0\r\n    let mutable count = 0\r\n\r\n    member x.Count = count\r\n\r\n    member x.Enqueue(value : 'T) =\r\n        if count < store.Length then\r\n            store.[next] <- value\r\n            next <- (next + 1) % store.Length\r\n            count <- count + 1\r\n        else\r\n            let res = Array.zeroCreate (2 * store.Length)\r\n            let mutable si = first\r\n            for di in 0 .. count - 1 do\r\n                res.[di] <- store.[si]\r\n                si <- (si + 1) % store.Length\r\n            store <- res\r\n            next <- count\r\n            first <- 0\r\n            x.Enqueue value\r\n\r\n    member x.Dequeue() =\r\n        if count = 0 then failwith \"Queue empty\"\r\n        let v = store.[first]\r\n        store.[first] <- Unchecked.defaultof<_>\r\n        first <- (first + 1) % store.Length\r\n        count <- count - 1\r\n        v\r\n\r\n\r\nnamespace System\r\n\r\n[<AllowNullLiteral>]\r\ntype WeakReference<'a when 'a : not struct>(value : 'a) =\r\n    member x.TryGetTarget() =\r\n        (true, value)\r\n\r\nnamespace System.Threading\r\n\r\ntype Monitor =\r\n    static member inline Enter (_o : obj) = ()\r\n    static member inline Exit (_o : obj) = ()\r\n    static member inline IsEntered (_o : obj) = true\r\n    static member inline TryEnter (_o : obj) = true\r\n\r\nnamespace Microsoft.FSharp.Core\r\n\r\nmodule OptimizedClosures =\r\n    type FSharpFunc<'T1, 'T2, 'T3>(value : 'T1 -> 'T2 -> 'T3) =\r\n        member x.Invoke(a1, a2) = value a1 a2\r\n        static member Adapt(value : 'T1 -> 'T2 -> 'T3) = FSharpFunc<'T1, 'T2, 'T3>(value)\r\n        \r\n    type FSharpFunc<'T1, 'T2, 'T3, 'T4>(value : 'T1 -> 'T2 -> 'T3 -> 'T4) =\r\n        member x.Invoke(a1, a2, a3) = value a1 a2 a3\r\n        static member Adapt(value : 'T1 -> 'T2 -> 'T3 -> 'T4) = FSharpFunc<'T1, 'T2, 'T3, 'T4>(value)\r\n\r\nnamespace System.Runtime.CompilerServices\r\n\r\n\r\n[<AutoOpen>]\r\nmodule private WeakTableHelpers =\r\n    open Fable.Core\r\n    open Fable.Core.JsInterop\r\n\r\n    type [<AllowNullLiteral>] WeakMap<'K, 'V> =\r\n        abstract clear: unit -> unit\r\n        abstract delete: key: 'K -> bool\r\n        abstract get: key: 'K -> 'V\r\n        abstract has: key: 'K -> bool\r\n        abstract set: key: 'K * ?value: 'V -> WeakMap<'K, 'V>\r\n\r\n    and [<AllowNullLiteral>] WeakMapConstructor =\r\n        [<Emit(\"new $0($1...)\")>] abstract Create: ?iterable: seq<'K * 'V> -> WeakMap<'K, 'V>\r\n\r\n    let [<Global>] WeakMap: WeakMapConstructor = jsNative\r\n\r\ntype ConditionalWeakTable<'K, 'V when 'K : not struct and 'V : not struct>() =\r\n    \r\n    let m = WeakMap.Create<'K, 'V> []\r\n\r\n    member x.TryGetValue(key : 'K) =\r\n        if m.has key then (true, m.get key)\r\n        else (false, Unchecked.defaultof<_>)\r\n\r\n    member x.Add(key : 'K, value : 'V) =\r\n        m.set(key, value) |> ignore\r\n\r\n    member x.Remove(key : 'K) =\r\n        m.delete key\r\n\r\n\r\n\r\n#endif\r\n","import { compare, identityHash, equals, structuralHash } from \"./Util.js\";\nexport function HashIdentity$$$FromFunctions(hash, eq) {\n  return {\n    Equals(x, y) {\n      return eq(x, y);\n    },\n\n    GetHashCode(x$$1) {\n      return hash(x$$1);\n    }\n\n  };\n}\nexport function HashIdentity$$$Structural() {\n  return HashIdentity$$$FromFunctions(structuralHash, equals);\n}\nexport function HashIdentity$$$Reference() {\n  return HashIdentity$$$FromFunctions(identityHash, function (e1$$1, e2$$1) {\n    return e1$$1 === e2$$1;\n  });\n}\nexport function ComparisonIdentity$$$FromFunction(comparer) {\n  return {\n    Compare(x$$2, y$$1) {\n      return comparer(x$$2, y$$1);\n    }\n\n  };\n}\nexport function ComparisonIdentity$$$Structural() {\n  return ComparisonIdentity$$$FromFunction(compare);\n}","import { declare } from \"./Types.js\";\nimport { type } from \"./Reflection.js\";\nimport { join, format } from \"./String.js\";\nexport const StringBuilder = declare(function System_Text_StringBuilder(value, capacity) {\n  const $this$$1 = this;\n  $this$$1.buf = [];\n\n  if (!(value == null)) {\n    $this$$1.buf.push(value);\n  }\n});\nexport function StringBuilder$reflection() {\n  return type(\"System.Text.StringBuilder\");\n}\nexport function StringBuilder$$$$002Ector$$Z18115A39(value, capacity) {\n  return this instanceof StringBuilder ? StringBuilder.call(this, value, capacity) : new StringBuilder(value, capacity);\n}\nexport function StringBuilder$$$$002Ector$$Z524259A4(capacity$$1) {\n  return StringBuilder$$$$002Ector$$Z18115A39.call(this, null, capacity$$1);\n}\nexport function StringBuilder$$$$002Ector$$Z721C83C5(value$$1) {\n  return StringBuilder$$$$002Ector$$Z18115A39.call(this, value$$1, 16);\n}\nexport function StringBuilder$$$$002Ector() {\n  return StringBuilder$$$$002Ector$$Z18115A39.call(this, null, 16);\n}\nexport function StringBuilder$$Append$$Z721C83C5(x, s) {\n  x.buf.push(s);\n  return x;\n}\nexport function StringBuilder$$Append$$244C7CD6(x$$1, c) {\n  x$$1.buf.push(c);\n  return x$$1;\n}\nexport function StringBuilder$$AppendFormat$$433E080(x$$2, fmt, o) {\n  x$$2.buf.push(format(fmt, o));\n  return x$$2;\n}\n\nStringBuilder.prototype.toString = function () {\n  const __ = this;\n  return join(\"\", __.buf);\n};","import { structuralHash, equals } from \"./Util.js\";\nimport { HashIdentity$$$Structural as HashIdentity$0024$0024$0024Structural, ComparisonIdentity$$$Structural as ComparisonIdentity$0024$0024$0024Structural } from \"./FSharp.Collections\";\nimport { StringBuilder$$Append$$Z721C83C5 as StringBuilder$0024$0024Append$0024$0024Z721C83C5 } from \"./System.Text\";\nexport const LanguagePrimitives$$$GenericEqualityComparer = {\n  Equals(x, y) {\n    return equals(x, y);\n  },\n\n  GetHashCode(x$$1) {\n    return structuralHash(x$$1);\n  }\n\n};\nexport const LanguagePrimitives$$$GenericEqualityERComparer = {\n  Equals(x$$2, y$$1) {\n    return equals(x$$2, y$$1);\n  },\n\n  GetHashCode(x$$3) {\n    return structuralHash(x$$3);\n  }\n\n};\nexport function LanguagePrimitives$$$FastGenericComparer() {\n  return ComparisonIdentity$0024$0024$0024Structural();\n}\nexport function LanguagePrimitives$$$FastGenericComparerFromTable() {\n  return ComparisonIdentity$0024$0024$0024Structural();\n}\nexport function LanguagePrimitives$$$FastGenericEqualityComparer() {\n  return HashIdentity$0024$0024$0024Structural();\n}\nexport function LanguagePrimitives$$$FastGenericEqualityComparerFromTable() {\n  return HashIdentity$0024$0024$0024Structural();\n}\nexport function Operators$$$Failure(message) {\n  return new Error(message);\n}\nexport function Operators$$$FailurePattern(exn) {\n  return exn.message;\n}\nexport function Operators$$$NullArg(x$$4) {\n  throw new Error(x$$4);\n}\nexport function Operators$$$Lock(_lockObj, action) {\n  return action();\n}\nexport function ExtraTopLevelOperators$$$LazyPattern(input) {\n  return input.Value;\n}\nexport function PrintfModule$$$PrintFormatToStringBuilderThen(continuation, builder, format) {\n  return format.cont(function append(s) {\n    const value = StringBuilder$0024$0024Append$0024$0024Z721C83C5(builder, s);\n    value, null;\n    return continuation();\n  });\n}\nexport function PrintfModule$$$PrintFormatToStringBuilder(builder$$1, format$$1) {\n  return PrintfModule$$$PrintFormatToStringBuilderThen(function () {\n    null, null;\n  }, builder$$1, format$$1);\n}","﻿// THIS IS A MODIFIED VERSION OF F#'s Map<'Key, 'Value> !!!!\r\n// THE ORIGINAL CAN BE FOUND AT https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/map.fs\r\n\r\n// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\r\n\r\nnamespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Collections.Generic\r\nopen System.Diagnostics\r\nopen Microsoft.FSharp.Core\r\nopen Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators\r\n\r\nmodule internal MapExtImplementation = \r\n    [<CompilationRepresentation(CompilationRepresentationFlags.UseNullAsTrueValue)>]\r\n    [<NoEquality; NoComparison>]\r\n    type MapTree<'Key,'Value> = \r\n        | MapEmpty \r\n        | MapOne of 'Key * 'Value\r\n        | MapNode of 'Key * 'Value * MapTree<'Key,'Value> *  MapTree<'Key,'Value> * int * int\r\n            // REVIEW: performance rumour has it that the data held in MapNode and MapOne should be\r\n            // exactly one cache line. It is currently ~7 and 4 words respectively. \r\n\r\n    type MapExtReference<'v> =\r\n        | NonExisting of index : int\r\n        | Existing of index : int * value : 'v\r\n\r\n\r\n    type internal EnumeratorEnumerable<'T>(get : unit -> IEnumerator<'T>) =\r\n        interface System.Collections.IEnumerable with\r\n            member x.GetEnumerator() = get() :> System.Collections.IEnumerator\r\n\r\n        interface IEnumerable<'T> with\r\n            member x.GetEnumerator() = get()\r\n\r\n    \r\n\r\n    [<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\n    module MapTree = \r\n\r\n        let empty = MapEmpty \r\n\r\n        let height = function\r\n            | MapEmpty -> 0\r\n            | MapOne _ -> 1\r\n            | MapNode(_,_,_,_,h,_) -> h\r\n\r\n        let size = function\r\n            | MapEmpty -> 0\r\n            | MapOne _ -> 1\r\n            | MapNode(_,_,_,_,_,s) -> s\r\n\r\n        let isEmpty m = \r\n            match m with \r\n            | MapEmpty -> true\r\n            | _ -> false\r\n\r\n        let mk l k v r = \r\n            match l,r with \r\n            | MapEmpty,MapEmpty -> MapOne(k,v)\r\n            | _ -> \r\n                let hl = height l \r\n                let hr = height r \r\n                let m = if hl < hr then hr else hl \r\n                MapNode(k,v,l,r,m+1, 1 + size l + size r)\r\n\r\n        let rebalance t1 k v t2 =\r\n            let t1h = height t1 \r\n            let t2h = height t2 \r\n            if  t2h > t1h + 2 then (* right is heavier than left *)\r\n                match t2 with \r\n                | MapNode(t2k,t2v,t2l,t2r,_,_) -> \r\n                    (* one of the nodes must have height > height t1 + 1 *)\r\n                    if height t2l > t1h + 1 then  (* balance left: combination *)\r\n                        match t2l with \r\n                        | MapNode(t2lk,t2lv,t2ll,t2lr,_,_) ->\r\n                        mk (mk t1 k v t2ll) t2lk t2lv (mk t2lr t2k t2v t2r) \r\n                        | _ -> failwith \"rebalance\"\r\n                    else (* rotate left *)\r\n                        mk (mk t1 k v t2l) t2k t2v t2r\r\n                | _ -> failwith \"rebalance\"\r\n            else\r\n                if  t1h > t2h + 2 then (* left is heavier than right *)\r\n                    match t1 with \r\n                    | MapNode(t1k,t1v,t1l,t1r,_,_) -> \r\n                        (* one of the nodes must have height > height t2 + 1 *)\r\n                        if height t1r > t2h + 1 then \r\n                            (* balance right: combination *)\r\n                            match t1r with \r\n                            | MapNode(t1rk,t1rv,t1rl,t1rr,_,_) ->\r\n                                mk (mk t1l t1k t1v t1rl) t1rk t1rv (mk t1rr k v t2)\r\n                            | _ -> failwith \"rebalance\"\r\n                        else\r\n                            mk t1l t1k t1v (mk t1r k v t2)\r\n                    | _ -> failwith \"rebalance\"\r\n                else mk t1 k v t2\r\n\r\n        let rec add (comparer: IComparer<'Value>) k v m = \r\n            match m with \r\n            | MapEmpty -> MapOne(k,v)\r\n            | MapOne(k2,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0   then MapNode (k,v,MapEmpty,m,2, 2)\r\n                elif c = 0 then MapOne(k,v)\r\n                else            MapNode (k,v,m,MapEmpty,2, 2)\r\n            | MapNode(k2,v2,l,r,h,s) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then rebalance (add comparer k v l) k2 v2 r\r\n                elif c = 0 then MapNode(k,v,l,r,h,s)\r\n                else rebalance l k2 v2 (add comparer k v r) \r\n\r\n        let rec find (comparer: IComparer<'Value>) k m = \r\n            match m with \r\n            | MapEmpty -> raise (KeyNotFoundException())\r\n            | MapOne(k2,v2) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c = 0 then v2\r\n                else raise (KeyNotFoundException())\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then find comparer k l\r\n                elif c = 0 then v2\r\n                else find comparer k r\r\n\r\n        let rec tryFind (comparer: IComparer<'Value>) k m = \r\n            match m with \r\n            | MapEmpty -> None\r\n            | MapOne(k2,v2) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c = 0 then Some v2\r\n                else None\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then tryFind comparer k l\r\n                elif c = 0 then Some v2\r\n                else tryFind comparer k r\r\n\r\n        let partition1 (comparer: IComparer<'Value>) (f:OptimizedClosures.FSharpFunc<_,_,_>) k v (acc1,acc2) = \r\n            if f.Invoke(k, v) then (add comparer k v acc1,acc2) else (acc1,add comparer k v acc2) \r\n        \r\n        let rec partitionAux (comparer: IComparer<'Value>) (f:OptimizedClosures.FSharpFunc<_,_,_>) s acc = \r\n            match s with \r\n            | MapEmpty -> acc\r\n            | MapOne(k,v) -> partition1 comparer f k v acc\r\n            | MapNode(k,v,l,r,_,_) -> \r\n                let acc = partitionAux comparer f r acc \r\n                let acc = partition1 comparer f k v acc\r\n                partitionAux comparer f l acc\r\n\r\n        let partition (comparer: IComparer<'Value>) f s = partitionAux comparer (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) s (empty,empty)\r\n\r\n        let filter1 (comparer: IComparer<'Value>) (f:OptimizedClosures.FSharpFunc<_,_,_>) k v acc = if f.Invoke(k, v) then add comparer k v acc else acc \r\n\r\n        let rec filterAux (comparer: IComparer<'Value>) (f:OptimizedClosures.FSharpFunc<_,_,_>) s acc = \r\n            match s with \r\n            | MapEmpty -> acc\r\n            | MapOne(k,v) -> filter1 comparer f k v acc\r\n            | MapNode(k,v,l,r,_,_) ->\r\n                let acc = filterAux comparer f l acc\r\n                let acc = filter1 comparer f k v acc\r\n                filterAux comparer f r acc\r\n\r\n        let filter (comparer: IComparer<'Value>) f s = filterAux comparer (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) s empty\r\n\r\n        let rec spliceOutSuccessor m = \r\n            match m with \r\n            | MapEmpty -> failwith \"internal error: MapExt.spliceOutSuccessor\"\r\n            | MapOne(k2,v2) -> k2,v2,MapEmpty\r\n            | MapNode(k2,v2,l,r,_,_) ->\r\n                match l with \r\n                | MapEmpty -> k2,v2,r\r\n                | _ -> let k3,v3,l' = spliceOutSuccessor l in k3,v3,mk l' k2 v2 r\r\n\r\n        let rec remove (comparer: IComparer<'Value>) k m = \r\n            match m with \r\n            | MapEmpty -> empty\r\n            | MapOne(k2,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c = 0 then MapEmpty else m\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then rebalance (remove comparer k l) k2 v2 r\r\n                elif c = 0 then \r\n                    match l with\r\n                    | MapEmpty -> r\r\n                    | _ ->\r\n                        match r with\r\n                        | MapEmpty -> l\r\n                        | _ -> \r\n                            let sk,sv,r' = spliceOutSuccessor r \r\n                            mk l sk sv r'\r\n                else \r\n                    rebalance l k2 v2 (remove comparer k r) \r\n\r\n\r\n        let rec tryRemove (comparer: IComparer<'Value>) k m = \r\n            match m with \r\n            | MapEmpty -> None\r\n            | MapOne(k2,v) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c = 0 then Some (v, MapEmpty) else None\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then \r\n                    match tryRemove comparer k l with\r\n                    | Some (v,l) ->\r\n                        Some (v, rebalance l k2 v2 r)\r\n                    | None ->\r\n                        None\r\n                elif c = 0 then \r\n                    match l with\r\n                    | MapEmpty -> Some(v2, r)\r\n                    | _ ->\r\n                        match r with\r\n                        | MapEmpty -> Some(v2, l)\r\n                        | _ -> \r\n                            let sk,sv,r' = spliceOutSuccessor r \r\n                            Some(v2, mk l sk sv r')\r\n                else \r\n                    match tryRemove comparer k r with\r\n                    | Some (v,r) ->\r\n                        Some (v, rebalance l k2 v2 r)\r\n                    | None ->\r\n                        None\r\n\r\n\r\n        let rec tryRemoveMin m = \r\n            match m with \r\n            | MapEmpty -> \r\n                None\r\n\r\n            | MapOne(k2,v) ->\r\n                Some (k2, v, MapEmpty)\r\n\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                match tryRemoveMin l with\r\n                | Some (k,v,rest) ->\r\n                    match rest with\r\n                    | MapEmpty -> Some (k,v,r)\r\n                    | _ -> Some (k,v, rebalance rest k2 v2 r)\r\n                | None ->\r\n                    Some(k2, v2, r)\r\n\r\n        let rec tryRemoveMax m = \r\n            match m with \r\n            | MapEmpty -> \r\n                None\r\n\r\n            | MapOne(k2,v) ->\r\n                Some (k2, v, MapEmpty)\r\n\r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                match tryRemoveMax r with\r\n                | Some (k,v,rest) ->\r\n                    match rest with\r\n                    | MapEmpty -> Some (k,v,l)\r\n                    | _ -> Some (k,v, rebalance l k2 v2 rest)\r\n                | None ->\r\n                    Some(k2, v2, l)\r\n\r\n        let rec alter (comparer : IComparer<'Value>) k f m =\r\n            match m with   \r\n            | MapEmpty ->\r\n                match f None with\r\n                    | Some v -> MapOne(k,v)\r\n                    | None -> MapEmpty\r\n\r\n            | MapOne(k2, v2) ->\r\n                let c = comparer.Compare(k,k2) \r\n                if c = 0 then\r\n                    match f (Some v2) with\r\n                        | Some v3 -> MapOne(k2, v3)\r\n                        | None -> MapEmpty\r\n                else\r\n                    match f None with\r\n                        | None -> \r\n                            MapOne(k2, v2)\r\n\r\n                        | Some v3 -> \r\n                            if c > 0 then MapNode (k2,v2,MapEmpty,MapOne(k, v3),2, 2)\r\n                            else MapNode(k2, v2, MapOne(k, v3), MapEmpty, 2, 2)\r\n            | MapNode(k2, v2, l, r, h, cnt) ->\r\n            \r\n                let c = comparer.Compare(k, k2)\r\n\r\n                if c = 0 then\r\n                    match f (Some v2) with\r\n                        | Some v3 -> \r\n                            MapNode(k2, v3, l, r, h, cnt)\r\n\r\n                        | None ->\r\n                            match l with\r\n                            | MapEmpty -> r\r\n                            | _ ->\r\n                                match r with\r\n                                | MapEmpty -> l\r\n                                | _ -> \r\n                                    let sk,sv,r' = spliceOutSuccessor r \r\n                                    mk l sk sv r'\r\n                elif c > 0 then\r\n                    rebalance l k2 v2 (alter comparer k f r) \r\n                else\r\n                    rebalance (alter comparer k f l)  k2 v2 r\r\n       \r\n        let rec join left k v right =\r\n            let lh = height left\r\n            let rh = height right\r\n            if lh > rh + 2 then\r\n                match left with\r\n                    | MapNode(k2,v2,l,r,_,_) ->\r\n                        // the join-result can at most be one level higher than r\r\n                        // therefore rebalance is sufficient here\r\n                        rebalance l k2 v2 (join r k v right)\r\n                    | _ ->\r\n                        failwith \"join\"\r\n            elif rh > lh + 2 then\r\n                match right with\r\n                    | MapNode(k2,v2,l,r,_,_) ->\r\n                        // the join-result can at most be one level higher than l\r\n                        // therefore rebalance is sufficient here\r\n                        rebalance (join left k v l) k2 v2 r\r\n                    | _ ->\r\n                        failwith \"join\"\r\n            else\r\n                mk left k v right\r\n\r\n        let rec split (comparer: IComparer<'Value>) k m =\r\n            match m with\r\n                | MapEmpty -> \r\n                    MapEmpty, None, MapEmpty\r\n\r\n                | MapOne(k2,v2) ->\r\n                    let c = comparer.Compare(k, k2)\r\n                    if c < 0 then MapEmpty, None, MapOne(k2,v2)\r\n                    elif c = 0 then MapEmpty, Some(v2), MapEmpty\r\n                    else MapOne(k2,v2), None, MapEmpty\r\n\r\n                | MapNode(k2,v2,l,r,_,_) ->\r\n                    let c = comparer.Compare(k, k2)\r\n                    if c > 0 then\r\n                        let rl, res, rr = split comparer k r\r\n                        join l k2 v2 rl, res, rr\r\n\r\n                    elif c = 0 then \r\n                        l, Some(v2), r\r\n\r\n                    else\r\n                        let ll, res, lr = split comparer k l\r\n                        ll, res, join lr k2 v2 r\r\n\r\n        let rec getReference (comparer: IComparer<'Value>) (current : int) k m =\r\n            match m with\r\n                | MapEmpty -> \r\n                    NonExisting current\r\n\r\n                | MapOne(key,v) ->\r\n                    let c = comparer.Compare(k, key)\r\n                    \r\n                    if c > 0 then NonExisting (current + 1)\r\n                    elif c < 0 then NonExisting current\r\n                    else Existing(current, v)\r\n\r\n                | MapNode(key,v,l,r,_,s) ->\r\n                    let c = comparer.Compare(k, key)\r\n                    if c > 0 then getReference comparer (current + size l + 1) k r\r\n                    elif c < 0 then getReference comparer current k l\r\n                    else Existing(current+size l, v)\r\n\r\n\r\n                    \r\n\r\n        let rec unionWithOpt (comparer: IComparer<'Value>) (f : OptimizedClosures.FSharpFunc<_,_,_>) l r =\r\n            match l, r with\r\n                | MapEmpty, r -> r\r\n                | l, MapEmpty -> l\r\n                | MapOne(k,v), r ->\r\n                    r |> alter comparer k (fun o -> \r\n                        match o with\r\n                            | None -> v |> Some\r\n                            | Some o -> f.Invoke(v, o) |> Some\r\n                    )\r\n\r\n                | l, MapOne(k,v) ->\r\n                    l |> alter comparer k (fun o ->\r\n                        match o with\r\n                            | None -> v |> Some\r\n                            | Some o -> f.Invoke(o, v) |> Some\r\n                    )\r\n\r\n                | MapNode(k,v,ll,lr,_,_),r ->\r\n                    let rs, self, rg = split comparer k r\r\n                    \r\n                    let v = \r\n                        match self with\r\n                            | Some rv -> f.Invoke(v, rv)\r\n                            | None -> v\r\n                    join (unionWithOpt comparer f ll rs) k v (unionWithOpt comparer f lr rg)\r\n                 \r\n        let unionWith(comparer: IComparer<'Value>) f l r =\r\n            unionWithOpt comparer (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) l r\r\n\r\n\r\n\r\n        let rec stupidHeight m =\r\n            match m with\r\n                | MapEmpty -> 0\r\n                | MapOne _ -> 1\r\n                | MapNode(_,_,l,r,_,_) -> max (stupidHeight l) (stupidHeight r) + 1\r\n\r\n        let rec stupidCount m =\r\n            match m with\r\n                | MapEmpty -> 0\r\n                | MapOne _ -> 1\r\n                | MapNode(_,_,l,r,_,_) ->\r\n                    1 + stupidCount l + stupidCount r\r\n\r\n        let rec validateAux (comparer: IComparer<'Value>) (min : option<_>) (max : option<_>) m =\r\n            match m with\r\n                | MapNode(k,v,l,r,h,c) ->\r\n                    let lh = height l\r\n                    let rh = height r\r\n\r\n                    if Option.isSome min && comparer.Compare(k, min.Value) <= 0 then failwith \"invalid order\"\r\n                    if Option.isSome max && comparer.Compare(k, max.Value) >= 0 then failwith \"invalid order\"\r\n                    if stupidCount m <> c then failwith \"invalid count\"\r\n                    if stupidHeight l <> lh then failwith \"invalid height\"\r\n                    if stupidHeight r <> rh then failwith \"invalid height\"\r\n                    if abs (lh - rh) > 2 then failwith \"imbalanced\"   \r\n                    \r\n                    validateAux comparer min (Some k) l\r\n                    validateAux comparer (Some k) max r\r\n\r\n                | MapOne(k,v) ->\r\n                    if Option.isSome min && comparer.Compare(k, min.Value) <= 0 then failwith \"invalid order\"\r\n                    if Option.isSome max && comparer.Compare(k, max.Value) >= 0 then failwith \"invalid order\"\r\n\r\n                | MapEmpty ->\r\n                    ()\r\n\r\n        let validate (comparer: IComparer<'Value>) m =\r\n            validateAux comparer None None m\r\n\r\n\r\n        let rec mem (comparer: IComparer<'Value>) k m = \r\n            match m with \r\n            | MapEmpty -> false\r\n            | MapOne(k2,_) -> (comparer.Compare(k,k2) = 0)\r\n            | MapNode(k2,_,l,r,_,_) -> \r\n                let c = comparer.Compare(k,k2) \r\n                if c < 0 then mem comparer k l\r\n                else (c = 0 || mem comparer k r)\r\n\r\n        let rec iterOpt (f:OptimizedClosures.FSharpFunc<_,_,_>) m =\r\n            match m with \r\n            | MapEmpty -> ()\r\n            | MapOne(k2,v2) -> f.Invoke(k2, v2)\r\n            | MapNode(k2,v2,l,r,_,_) -> iterOpt f l; f.Invoke(k2, v2); iterOpt f r\r\n\r\n        let iter f m = iterOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n        let rec tryPickOpt (f:OptimizedClosures.FSharpFunc<_,_,_>) m =\r\n            match m with \r\n            | MapEmpty -> None\r\n            | MapOne(k2,v2) -> f.Invoke(k2, v2) \r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                match tryPickOpt f l with \r\n                | Some _ as res -> res \r\n                | None -> \r\n                match f.Invoke(k2, v2) with \r\n                | Some _ as res -> res \r\n                | None -> \r\n                tryPickOpt f r\r\n\r\n        let tryPick f m = tryPickOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n        let rec tryPickOptBack (f:OptimizedClosures.FSharpFunc<_,_,_>) m =\r\n            match m with \r\n            | MapEmpty -> None\r\n            | MapOne(k2,v2) -> f.Invoke(k2, v2) \r\n            | MapNode(k2,v2,l,r,_,_) -> \r\n                match tryPickOptBack f r with \r\n                | Some _ as res -> res \r\n                | None -> \r\n                match f.Invoke(k2, v2) with \r\n                | Some _ as res -> res \r\n                | None -> \r\n                tryPickOptBack f l\r\n\r\n        let tryPickBack f m = tryPickOptBack (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n\r\n        let rec existsOpt (f:OptimizedClosures.FSharpFunc<_,_,_>) m = \r\n            match m with \r\n            | MapEmpty -> false\r\n            | MapOne(k2,v2) -> f.Invoke(k2, v2)\r\n            | MapNode(k2,v2,l,r,_,_) -> existsOpt f l || f.Invoke(k2, v2) || existsOpt f r\r\n\r\n        let exists f m = existsOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n        let rec forallOpt (f:OptimizedClosures.FSharpFunc<_,_,_>) m = \r\n            match m with \r\n            | MapEmpty -> true\r\n            | MapOne(k2,v2) -> f.Invoke(k2, v2)\r\n            | MapNode(k2,v2,l,r,_,_) -> forallOpt f l && f.Invoke(k2, v2) && forallOpt f r\r\n\r\n        let forall f m = forallOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n        let rec map f m = \r\n            match m with \r\n            | MapEmpty -> empty\r\n            | MapOne(k,v) -> MapOne(k,f v)\r\n            | MapNode(k,v,l,r,h,c) -> \r\n                let l2 = map f l \r\n                let v2 = f v \r\n                let r2 = map f r \r\n                MapNode(k,v2,l2, r2,h,c)\r\n\r\n        let rec mapiOpt (f:OptimizedClosures.FSharpFunc<_,_,_>) m = \r\n            match m with\r\n            | MapEmpty -> empty\r\n            | MapOne(k,v) -> MapOne(k, f.Invoke(k, v))\r\n            | MapNode(k,v,l,r,h,c) -> \r\n                let l2 = mapiOpt f l \r\n                let v2 = f.Invoke(k, v) \r\n                let r2 = mapiOpt f r \r\n                MapNode(k,v2, l2, r2,h,c)\r\n\r\n        let mapi f m = mapiOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n\r\n        let rec mapiMonotonicAux (f:OptimizedClosures.FSharpFunc<_,_,_>) m =\r\n            match m with\r\n            | MapEmpty -> empty\r\n            | MapOne(k,v) -> \r\n                let (k2, v2) = f.Invoke(k, v)\r\n                MapOne(k2, v2)\r\n            | MapNode(k,v,l,r,h,c) -> \r\n                let l2 = mapiMonotonicAux f l \r\n                let k2, v2 = f.Invoke(k, v) \r\n                let r2 = mapiMonotonicAux f r \r\n                MapNode(k2,v2, l2, r2,h,c)\r\n\r\n        let mapiMonotonic f m = mapiMonotonicAux (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n    \r\n\r\n        let rec chooseiMonotonicAux (f:OptimizedClosures.FSharpFunc<_,_,_>) m =\r\n            match m with\r\n            | MapEmpty -> empty\r\n            | MapOne(k,v) -> \r\n                match f.Invoke(k, v) with\r\n                | Some (k2, v2) ->\r\n                    MapOne(k2, v2)\r\n                | None ->\r\n                    MapEmpty\r\n            | MapNode(k,v,l,r,h,c) -> \r\n                let l2 = chooseiMonotonicAux f l \r\n                let self = f.Invoke(k, v) \r\n                let r2 = chooseiMonotonicAux f r \r\n                match self with\r\n                | Some (k2, v2) ->\r\n                    join l2 k2 v2 r2\r\n                | None ->\r\n                    match l2 with\r\n                    | MapEmpty -> r2\r\n                    | _ ->\r\n                        match r2 with\r\n                        | MapEmpty -> l2\r\n                        | _ ->\r\n                            let k,v,r2 = spliceOutSuccessor r2\r\n                            join l2 k v r2\r\n\r\n        let chooseiMonotonic f m = chooseiMonotonicAux (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n    \r\n        let rec chooseiOpt (f:OptimizedClosures.FSharpFunc<'Key,'T1,option<'T2>>) m =\r\n            match m with\r\n                | MapEmpty -> empty\r\n                | MapOne(k,v) ->\r\n                    match f.Invoke(k,v) with\r\n                        | Some v -> MapOne(k,v)\r\n                        | None -> MapEmpty\r\n\r\n                | MapNode(k,v,l,r,h,c) ->\r\n                    let l' = chooseiOpt f l\r\n                    let s' = f.Invoke(k,v)\r\n                    let r' = chooseiOpt f r\r\n                    match s' with\r\n                        | None -> \r\n                            match l' with\r\n                            | MapEmpty -> r'\r\n                            | _ ->\r\n                                match r' with\r\n                                | MapEmpty -> l'\r\n                                | _ ->\r\n                                    let k,v,r' = spliceOutSuccessor r'\r\n                                    join l' k v r'\r\n                        | Some v ->\r\n                            join l' k v r'\r\n\r\n        let choosei f m = chooseiOpt (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(f)) m\r\n    \r\n        let rec tryMinAux acc m =\r\n            match m with\r\n            | MapEmpty -> acc\r\n            | MapOne(k,v) -> Some (k,v)\r\n            | MapNode(k,v,l,_,_,_) -> tryMinAux (Some (k,v)) l\r\n\r\n        let rec tryMin m = tryMinAux None m\r\n    \r\n        let rec tryMaxAux acc m =\r\n            match m with\r\n            | MapEmpty -> acc\r\n            | MapOne(k,v) -> Some (k,v)\r\n            | MapNode(k,v,_,r,_,_) -> tryMaxAux (Some (k,v)) r\r\n\r\n        let rec tryMax m = tryMaxAux None m\r\n\r\n        let rec neighboursAux (comparer: IComparer<'Value>) k l r m =\r\n            match m with\r\n                | MapEmpty -> l, None, r\r\n                | MapOne(k2,v2) -> \r\n                    let c = comparer.Compare(k, k2)\r\n                    if c > 0 then Some(k2,v2), None, r\r\n                    elif c = 0 then l, Some(k2,v2), r\r\n                    else l, None, Some(k2,v2)\r\n\r\n                | MapNode(k2,v2,l2,r2,_,_) ->\r\n                    let c = comparer.Compare(k, k2)\r\n                    if c > 0 then \r\n                        let l = Some(k2, v2)\r\n                        neighboursAux comparer k l r r2\r\n\r\n                    elif c = 0 then\r\n                        let l =\r\n                            match tryMax l2 with\r\n                                | None -> l\r\n                                | l -> l\r\n\r\n                        let r =\r\n                            match tryMin r2 with\r\n                                | None -> r\r\n                                | r -> r\r\n\r\n                        l,Some(k2, v2),r\r\n\r\n                    else\r\n                        let r = Some(k2, v2)\r\n                        neighboursAux comparer k l r l2\r\n\r\n        let neighbours (comparer: IComparer<'Value>) k m =\r\n            neighboursAux comparer k None None m\r\n    \r\n        let rec neighboursiAux idx l r m =\r\n            match m with\r\n                | MapEmpty -> \r\n                    l, None, r\r\n\r\n                | MapOne(k2,v2) -> \r\n                    if idx > 0 then Some(k2,v2), None, r\r\n                    elif idx = 0 then l, Some(k2,v2), r\r\n                    else l, None, Some(k2,v2)\r\n\r\n                | MapNode(k2,v2,l2,r2,_,cnt) ->\r\n                    if idx < 0 then\r\n                        None, None, tryMin m\r\n                    elif idx >= cnt then\r\n                        tryMax m, None, None\r\n                    else\r\n                        let lc = size l2\r\n                        if idx < lc then \r\n                            let r = Some(k2, v2)\r\n                            neighboursiAux idx l r l2\r\n\r\n                        elif idx = lc then\r\n                            let l =\r\n                                match tryMax l2 with\r\n                                    | None -> l\r\n                                    | l -> l\r\n\r\n                            let r =\r\n                                match tryMin r2 with\r\n                                    | None -> r\r\n                                    | r -> r\r\n\r\n                            l, Some(k2, v2), r\r\n                        else\r\n                            let l = Some(k2, v2)\r\n                            neighboursiAux (idx-lc-1) l r r2\r\n\r\n        let neighboursi idx m =\r\n            neighboursiAux idx None None m\r\n    \r\n\r\n        let rec tryAt i m =\r\n            match m with\r\n            | MapEmpty -> \r\n                None\r\n\r\n            | MapOne(k,v) -> \r\n                if i = 0 then Some (k,v)\r\n                else None\r\n\r\n            | MapNode(k,v,l,r,_,c) ->\r\n                if i < 0 || i >= c then\r\n                    None\r\n                else\r\n                    let ls = size l\r\n                    if i = ls then\r\n                        Some (k,v)\r\n                    elif i < ls then\r\n                        tryAt i l\r\n                    else\r\n                        tryAt (i - ls - 1) r\r\n\r\n        let rec private tryGetIndexAux (comparer: IComparer<'Key>) (i : int) (key : 'Key) (m : MapTree<'Key, 'Value>) =\r\n            match m with\r\n            | MapEmpty -> \r\n                None\r\n            | MapOne(k,_value) -> \r\n                if comparer.Compare(key, k) = 0 then Some i\r\n                else None\r\n            | MapNode(k,_value,left,right,_,_) ->\r\n                let cmp = comparer.Compare(key, k)\r\n                if cmp > 0 then\r\n                    tryGetIndexAux comparer (i + size left + 1) key right\r\n                elif cmp < 0 then\r\n                    tryGetIndexAux comparer i key left\r\n                else\r\n                    Some (i + size left)\r\n                \r\n        let tryGetIndex (comparer: IComparer<'Key>) (key : 'Key) (m : MapTree<'Key, 'Value>) =\r\n            tryGetIndexAux comparer 0 key m\r\n\r\n        let rec map2 (comparer: IComparer<'Value>) f l r =\r\n            match l, r with\r\n                | MapEmpty, r -> mapi (fun i rv -> f i None (Some rv)) r\r\n                | l, MapEmpty -> mapi (fun i lv -> f i (Some lv) None) l\r\n                | MapOne(k,v), r ->\r\n                    let mutable found = false\r\n                    let res = \r\n                        r |> mapi (fun i rv -> \r\n                            if i = k then \r\n                                found <- true\r\n                                f i (Some v) (Some rv)\r\n                            else \r\n                                f i None (Some rv)\r\n                        )\r\n                    if found then res \r\n                    else res |> add comparer k (f k (Some v) None)\r\n\r\n                | l, MapOne(k,v) ->\r\n                    let mutable found = false\r\n                    let res = \r\n                        l |> mapi (fun i lv -> \r\n                            if i = k then \r\n                                found <- true\r\n                                f i (Some lv) (Some v)\r\n                            else \r\n                                f i None (Some v)\r\n                        )\r\n                    if found then res \r\n                    else res |> add comparer k (f k None (Some v))\r\n\r\n                | MapNode(k,v,ll,lr,_,_),r ->\r\n                    let rs, self, rg = split comparer k r\r\n                    \r\n                    let v = \r\n                        match self with\r\n                            | Some rv -> f k (Some v) (Some rv)\r\n                            | None -> f k (Some v) None\r\n                    join (map2 comparer f ll rs) k v (map2 comparer f lr rg)\r\n                      \r\n        let rec choose2 (comparer: IComparer<'Value>) f l r =\r\n            match l, r with\r\n                | MapEmpty, r -> choosei (fun i rv -> f i None (Some rv)) r\r\n                | l, MapEmpty -> choosei (fun i lv -> f i (Some lv) None) l\r\n                | MapOne(k,v), r ->\r\n                    let mutable found = false\r\n                    let res = \r\n                        r |> choosei (fun i rv -> \r\n                            if i = k then \r\n                                found <- true\r\n                                f i (Some v) (Some rv)\r\n                            else \r\n                                f i None (Some rv)\r\n                        )\r\n                    if found then \r\n                        res \r\n                    else \r\n                        match f k (Some v) None with\r\n                            | Some v -> add comparer k v res\r\n                            | None -> res\r\n\r\n                | l, MapOne(k,v) ->\r\n                    let mutable found = false\r\n                    let res = \r\n                        l |> choosei (fun i lv -> \r\n                            if i = k then \r\n                                found <- true\r\n                                f i (Some lv) (Some v)\r\n                            else \r\n                                f i (Some lv) None\r\n                        )\r\n                    if found then \r\n                        res \r\n                    else \r\n                        match f k None (Some v) with\r\n                            | Some v -> add comparer k v res\r\n                            | None -> res\r\n\r\n                | MapNode(k,v,ll,lr,_,_),r ->\r\n                    let rs, self, rg = split comparer k r\r\n                    \r\n                    let v = \r\n                        match self with\r\n                            | Some rv -> f k (Some v) (Some rv)\r\n                            | None -> f k (Some v) None\r\n\r\n                    let l = choose2 comparer f ll rs\r\n                    let r = choose2 comparer f lr rg\r\n\r\n                    match v with\r\n                        | Some v -> \r\n                            join l k v r\r\n                        | None -> \r\n                            match l with\r\n                            | MapEmpty -> r\r\n                            | _ ->\r\n                                match r with\r\n                                | MapEmpty -> l\r\n                                | _ -> \r\n                                    let k,v,r = spliceOutSuccessor r\r\n                                    join l k v r\r\n\r\n        let rec intersectWithAux (f:OptimizedClosures.FSharpFunc<'Key,'T1,'T2>) (comparer: IComparer<'k>) (l : MapTree<'k, 'Key>) (r : MapTree<'k, 'T1>) : MapTree<'k, 'T2> =\r\n            match l with\r\n            | MapEmpty -> \r\n                MapEmpty\r\n\r\n            | MapOne(k,lv) ->\r\n                match tryFind comparer k r with\r\n                | Some rv -> MapOne(k, f.Invoke(lv, rv))\r\n                | None -> MapEmpty\r\n\r\n            | MapNode(k,v,l1,r1,_,_) ->\r\n                let a, s, b = split comparer k r\r\n                match s with\r\n                | Some s ->\r\n                    let v = f.Invoke(v,s)\r\n                    rebalance (intersectWithAux f comparer l1 a) k v (intersectWithAux f comparer r1 b)\r\n                | None ->\r\n                    let l = intersectWithAux f comparer l1 a\r\n                    let r = intersectWithAux f comparer r1 b\r\n                    match l with\r\n                    | MapEmpty -> r\r\n                    | _ ->\r\n                        match r with\r\n                        | MapEmpty -> l\r\n                        | _ ->\r\n                            let k,v,r' = spliceOutSuccessor r\r\n                            rebalance l k v r'\r\n\r\n        let intersectWith (f : 'Key -> 'T1 -> 'T2) (comparer : IComparer<'k>) (l : MapTree<'k, 'Key>) (r : MapTree<'k, 'T1>) =\r\n            let lc = size l\r\n            let rc = size r\r\n            if lc <= rc then\r\n                intersectWithAux (OptimizedClosures.FSharpFunc<_,_,_>.Adapt f) comparer l r\r\n            else\r\n                intersectWithAux (OptimizedClosures.FSharpFunc<_,_,_>.Adapt(fun a b -> f b a)) comparer r l\r\n\r\n\r\n                      \r\n        let rec foldBackOpt (f:OptimizedClosures.FSharpFunc<_,_,_,_>) m x = \r\n            match m with \r\n            | MapEmpty -> x\r\n            | MapOne(k,v) -> f.Invoke(k,v,x)\r\n            | MapNode(k,v,l,r,_,_) -> \r\n                let x = foldBackOpt f r x\r\n                let x = f.Invoke(k,v,x)\r\n                foldBackOpt f l x\r\n\r\n        let foldBack f m x = foldBackOpt (OptimizedClosures.FSharpFunc<_,_,_,_>.Adapt(f)) m x\r\n\r\n        let rec foldOpt (f:OptimizedClosures.FSharpFunc<_,_,_,_>) x m  = \r\n            match m with \r\n            | MapEmpty -> x\r\n            | MapOne(k,v) -> f.Invoke(x,k,v)\r\n            | MapNode(k,v,l,r,_,_) -> \r\n                let x = foldOpt f x l\r\n                let x = f.Invoke(x,k,v)\r\n                foldOpt f x r\r\n\r\n        let fold f x m = foldOpt (OptimizedClosures.FSharpFunc<_,_,_,_>.Adapt(f)) x m\r\n\r\n        let foldSectionOpt (comparer: IComparer<'Value>) lo hi (f:OptimizedClosures.FSharpFunc<_,_,_,_>) m x =\r\n            let rec foldFromTo (f:OptimizedClosures.FSharpFunc<_,_,_,_>) m x = \r\n                match m with \r\n                | MapEmpty -> x\r\n                | MapOne(k,v) ->\r\n                    let cLoKey = comparer.Compare(lo,k)\r\n                    let cKeyHi = comparer.Compare(k,hi)\r\n                    let x = if cLoKey <= 0 && cKeyHi <= 0 then f.Invoke(k, v, x) else x\r\n                    x\r\n                | MapNode(k,v,l,r,_,_) ->\r\n                    let cLoKey = comparer.Compare(lo,k)\r\n                    let cKeyHi = comparer.Compare(k,hi)\r\n                    let x = if cLoKey < 0                 then foldFromTo f l x else x\r\n                    let x = if cLoKey <= 0 && cKeyHi <= 0 then f.Invoke(k, v, x) else x\r\n                    let x = if cKeyHi < 0                 then foldFromTo f r x else x\r\n                    x\r\n           \r\n            if comparer.Compare(lo,hi) = 1 then x else foldFromTo f m x\r\n\r\n        let foldSection (comparer: IComparer<'Value>) lo hi f m x =\r\n            foldSectionOpt comparer lo hi (OptimizedClosures.FSharpFunc<_,_,_,_>.Adapt(f)) m x\r\n\r\n        let toList m = \r\n            let rec loop m acc = \r\n                match m with \r\n                | MapEmpty -> acc\r\n                | MapOne(k,v) -> (k,v)::acc\r\n                | MapNode(k,v,l,r,_,_) -> loop l ((k,v)::loop r acc)\r\n            loop m []\r\n        let toArray m = m |> toList |> Array.ofList\r\n        let ofList comparer l = List.fold (fun acc (k,v) -> add comparer k v acc) empty l\r\n\r\n        let rec mkFromEnumerator comparer acc (e : IEnumerator<_>) = \r\n            if e.MoveNext() then \r\n                let (x,y) = e.Current \r\n                mkFromEnumerator comparer (add comparer x y acc) e\r\n            else acc\r\n          \r\n        let ofArray comparer (arr : array<_>) =\r\n            let mutable res = empty\r\n            for (x,y) in arr do\r\n                res <- add comparer x y res \r\n            res\r\n\r\n        let ofSeq comparer (c : seq<'Key * 'T>) =\r\n            match c with \r\n            | :? array<'Key * 'T> as xs -> ofArray comparer xs\r\n            | :? list<'Key * 'T> as xs -> ofList comparer xs\r\n            | _ -> \r\n                use ie = c.GetEnumerator()\r\n                mkFromEnumerator comparer empty ie \r\n\r\n          \r\n        let copyToArray s (arr: _[]) i =\r\n            let j = ref i \r\n            s |> iter (fun x y -> arr.[!j] <- KeyValuePair(x,y); j := !j + 1)\r\n\r\n\r\n        /// Imperative left-to-right iterators.\r\n        [<NoEquality; NoComparison>]\r\n        type MapIterator<'Key,'Value when 'Key : comparison > = \r\n                { /// invariant: always collapseLHS result \r\n                mutable stack: MapTree<'Key,'Value> list;  \r\n                /// true when MoveNext has been called   \r\n                mutable started : bool }\r\n\r\n        // collapseLHS:\r\n        // a) Always returns either [] or a list starting with MapOne.\r\n        // b) The \"fringe\" of the set stack is unchanged. \r\n        let rec collapseLHS stack =\r\n            match stack with\r\n            | []                           -> []\r\n            | MapEmpty             :: rest -> collapseLHS rest\r\n            | MapOne _         :: _ -> stack\r\n            | (MapNode(k,v,l,r,_,_)) :: rest -> collapseLHS (l :: MapOne (k,v) :: r :: rest)\r\n          \r\n        let mkIterator s = { stack = collapseLHS [s]; started = false }\r\n\r\n        let notStarted() = raise (InvalidOperationException(\"enumeration not started\"))\r\n        let alreadyFinished() = raise (InvalidOperationException(\"enumeration finished\"))\r\n\r\n        let current i =\r\n            if i.started then\r\n                match i.stack with\r\n                    | MapOne (k,v) :: _ -> new KeyValuePair<_,_>(k,v)\r\n                    | []            -> alreadyFinished()\r\n                    | _             -> failwith \"Please report error: MapExt iterator, unexpected stack for current\"\r\n            else\r\n                notStarted()\r\n\r\n        let rec moveNext i =\r\n            if i.started then\r\n                match i.stack with\r\n                    | MapOne _ :: rest -> \r\n                        i.stack <- collapseLHS rest\r\n                        not i.stack.IsEmpty\r\n                    | [] -> false\r\n                    | _ -> failwith \"Please report error: MapExt iterator, unexpected stack for moveNext\"\r\n            else\r\n                i.started <- true  (* The first call to MoveNext \"starts\" the enumeration. *)\r\n                not i.stack.IsEmpty\r\n\r\n        let mkIEnumerator s = \r\n            let i = ref (mkIterator s) \r\n            { new IEnumerator<_> with \r\n                member __.Current = current !i\r\n            interface System.Collections.IEnumerator with\r\n                member __.Current = box (current !i)\r\n                member __.MoveNext() = moveNext !i\r\n                member __.Reset() = i :=  mkIterator s\r\n            interface System.IDisposable with \r\n                member __.Dispose() = ()}\r\n\r\n\r\n        type MapTreeEnumerator<'k, 'v when 'k : comparison>(m : MapTree<'k, 'v>) =\r\n            let mutable stack = [m]\r\n            let mutable current = Unchecked.defaultof<'k * 'v>\r\n            \r\n            let rec move () =\r\n                match stack with\r\n                    | [] ->\r\n                        false\r\n                    | MapEmpty :: rest ->\r\n                        stack <- rest\r\n                        move()\r\n\r\n                    | MapOne(key,value) :: rest ->\r\n                        stack <- rest\r\n                        current <- (key, value)\r\n                        true\r\n\r\n                    | MapNode(k,v,l,r,_,_) :: rest ->\r\n                        stack <- l :: (MapOne(k,v)) :: r :: rest\r\n                        move()\r\n                        \r\n            interface System.Collections.IEnumerator with\r\n                member x.MoveNext() = move()\r\n                member x.Reset() =\r\n                    stack <- [m]\r\n                    current <- Unchecked.defaultof<'k * 'v>\r\n\r\n                member x.Current = current :> obj\r\n                \r\n            interface IEnumerator<'k * 'v> with\r\n                member x.Dispose() =\r\n                    stack <- []\r\n                    current <- Unchecked.defaultof<'k * 'v>\r\n                member x.Current = current\r\n\r\n        type MapTreeBackwardEnumerator<'k, 'v when 'k : comparison>(m : MapTree<'k, 'v>) =\r\n            let mutable stack = [m]\r\n            let mutable current = Unchecked.defaultof<'k * 'v>\r\n            \r\n            let rec move () =\r\n                match stack with\r\n                    | [] ->\r\n                        false\r\n                    | MapEmpty :: rest ->\r\n                        stack <- rest\r\n                        move()\r\n\r\n                    | MapOne(key,value) :: rest ->\r\n                        stack <- rest\r\n                        current <- (key, value)\r\n                        true\r\n\r\n                    | MapNode(k,v,l,r,_,_) :: rest ->\r\n                        stack <- r :: (MapOne(k,v)) :: l :: rest\r\n                        move()\r\n                        \r\n            interface System.Collections.IEnumerator with\r\n                member x.MoveNext() = move()\r\n                member x.Reset() =\r\n                    stack <- [m]\r\n                    current <- Unchecked.defaultof<'k * 'v>\r\n\r\n                member x.Current = current :> obj\r\n                \r\n            interface IEnumerator<'k * 'v> with\r\n                member x.Dispose() =\r\n                    stack <- []\r\n                    current <- Unchecked.defaultof<'k * 'v>\r\n                member x.Current = current\r\n\r\nopen MapExtImplementation\r\n\r\n\r\n[<System.Diagnostics.DebuggerTypeProxy(typedefof<MapDebugView<_,_>>)>]\r\n[<System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")>]\r\n[<Sealed>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype internal MapExt<[<EqualityConditionalOn>]'Key,[<EqualityConditionalOn;ComparisonConditionalOn>]'Value when 'Key : comparison >(comparer: IComparer<'Key>, tree: MapTree<'Key,'Value>) =\r\n\r\n    static let defaultComparer = LanguagePrimitives.FastGenericComparer<'Key> \r\n    // We use .NET generics per-instantiation static fields to avoid allocating a new object for each empty\r\n    // set (it is just a lookup into a .NET table of type-instantiation-indexed static fields).\r\n    static let empty = new MapExt<'Key,'Value>(defaultComparer, MapTree<_,_>.MapEmpty)\r\n\r\n    static member Empty : MapExt<'Key,'Value> = empty\r\n\r\n    static member Create(ie : IEnumerable<_>) : MapExt<'Key,'Value> = \r\n        let comparer = LanguagePrimitives.FastGenericComparer<'Key> \r\n        new MapExt<_,_>(comparer,MapTree.ofSeq comparer ie)\r\n    \r\n    static member Create() : MapExt<'Key,'Value> = empty\r\n\r\n    new(ie : seq<_>) = \r\n        let comparer = LanguagePrimitives.FastGenericComparer<'Key> \r\n        new MapExt<_,_>(comparer,MapTree.ofSeq comparer ie)\r\n\r\n    [<DebuggerBrowsable(DebuggerBrowsableState.Never)>]\r\n    member internal m.Comparer = comparer\r\n    //[<DebuggerBrowsable(DebuggerBrowsableState.Never)>]\r\n    member internal m.Tree = tree\r\n    member m.Add(k,v) : MapExt<'Key,'Value> = \r\n        new MapExt<'Key,'Value>(comparer,MapTree.add comparer k v tree)\r\n\r\n    [<DebuggerBrowsable(DebuggerBrowsableState.Never)>]\r\n    member m.IsEmpty = MapTree.isEmpty tree\r\n    member m.Item \r\n        with get(k : 'Key) = MapTree.find comparer k tree\r\n\r\n\r\n    member x.Keys = \r\n        let mutable s = Set.empty\r\n        for (KeyValue(k,_)) in x do s <- s.Add k\r\n        s\r\n\r\n    member x.Values =\r\n        x |> Seq.map (fun (KeyValue(_,v)) -> v)\r\n\r\n    member x.TryAt i = MapTree.tryAt i tree\r\n    member x.Neighbours k = MapTree.neighbours comparer k tree\r\n    member x.NeighboursAt i = MapTree.neighboursi i tree\r\n    member x.TryGetIndex k = MapTree.tryGetIndex comparer k tree\r\n\r\n    member m.TryPick(f) = MapTree.tryPick f tree \r\n    member m.TryPickBack(f) = MapTree.tryPickBack f tree \r\n    member m.Exists(f) = MapTree.exists f tree \r\n    member m.Filter(f)  : MapExt<'Key,'Value> = new MapExt<'Key,'Value>(comparer ,MapTree.filter comparer f tree)\r\n    member m.ForAll(f) = MapTree.forall f tree \r\n    member m.Fold f acc = MapTree.foldBack f tree acc\r\n\r\n    member m.FoldSection (lo:'Key) (hi:'Key) f (acc:'z) = MapTree.foldSection comparer lo hi f tree acc \r\n\r\n    member m.Iterate f = MapTree.iter f tree\r\n\r\n    member m.MapRange f  = new MapExt<'Key,'T2>(comparer,MapTree.map f tree)\r\n\r\n    member m.Map f  = new MapExt<'Key,'T2>(comparer,MapTree.mapi f tree)\r\n    \r\n    member m.MapMonotonic<'Key2, 'Value2 when 'Key2 : comparison> (f : 'Key -> 'Value -> 'Key2 * 'Value2) : MapExt<'Key2,'Value2> = new MapExt<'Key2,'Value2>(LanguagePrimitives.FastGenericComparer<'Key2>, MapTree.mapiMonotonic f tree)\r\n   \r\n    member m.ChooseMonotonic<'Key2, 'Value2 when 'Key2 : comparison> (f : 'Key -> 'Value -> option<'Key2 * 'Value2>) : MapExt<'Key2,'Value2> = new MapExt<'Key2,'Value2>(LanguagePrimitives.FastGenericComparer<'Key2>, MapTree.chooseiMonotonic f tree)\r\n   \r\n    member x.GetReference key =\r\n        MapTree.getReference comparer 0 key tree\r\n        \r\n    member x.TryIndexOf key =\r\n        match MapTree.getReference comparer 0 key tree with\r\n            | Existing(i,_) -> Some i\r\n            | _ -> None\r\n\r\n    member x.TryRemoveMin() = \r\n        match MapTree.tryRemoveMin tree with\r\n        | Some (k,v,t) -> Some(k,v, MapExt(comparer, t))\r\n        | None -> None\r\n\r\n    member x.TryRemoveMax() = \r\n        match MapTree.tryRemoveMax tree with\r\n        | Some (k,v,t) -> Some(k,v, MapExt(comparer, t))\r\n        | None -> None\r\n\r\n    member m.Map2(other:MapExt<'Key,'Value2>, f)  = \r\n        new MapExt<'Key,'Result>(comparer, MapTree.map2 comparer f tree other.Tree)\r\n        \r\n    member m.Choose2(other:MapExt<'Key,'Value2>, f)  = \r\n        new MapExt<'Key,'Result>(comparer, MapTree.choose2 comparer f tree other.Tree)\r\n\r\n    member m.Choose(f) =\r\n        new MapExt<'Key, 'Value2>(comparer, MapTree.choosei f tree)\r\n\r\n    member m.Alter(k, f) = new MapExt<'Key, 'Value>(comparer, MapTree.alter comparer k f tree)\r\n\r\n    member m.Partition(f)  : MapExt<'Key,'Value> * MapExt<'Key,'Value> = \r\n        let r1,r2 = MapTree.partition comparer f tree  in \r\n        new MapExt<'Key,'Value>(comparer,r1), new MapExt<'Key,'Value>(comparer,r2)\r\n\r\n    member m.Count = MapTree.size tree\r\n\r\n    member x.TryMinKey = MapTree.tryMin tree |> Option.map fst\r\n    member x.TryMaxKey = MapTree.tryMax tree |> Option.map fst\r\n    \r\n    member x.TryMinValue = MapTree.tryMin tree |> Option.map snd\r\n    member x.TryMaxValue = MapTree.tryMax tree |> Option.map snd\r\n\r\n    member x.Split (k) =\r\n        let l, self, r = MapTree.split comparer k tree\r\n        MapExt<'Key, 'Value>(comparer, l), self, MapExt<'Key, 'Value>(comparer, r)\r\n        \r\n    member x.UnionWith (other : MapExt<_,_>, resolve) =\r\n        if x.IsEmpty then other\r\n        elif other.IsEmpty then x\r\n        else new MapExt<'Key, 'Value>(comparer, MapTree.unionWith comparer resolve tree other.Tree)\r\n        \r\n    member x.IntersectWith(other : MapExt<_,_>, resolve) =\r\n        if x.IsEmpty || other.IsEmpty then MapExt<_,_>.Empty\r\n        else new MapExt<'Key, _>(comparer, MapTree.intersectWith resolve comparer tree other.Tree)\r\n        \r\n    member x.Intersect(other : MapExt<_,_>) =\r\n        if x.IsEmpty || other.IsEmpty then MapExt<_,_>.Empty\r\n        else new MapExt<'Key, _>(comparer, MapTree.intersectWith (fun l r -> (l,r)) comparer tree other.Tree)\r\n\r\n    member x.Validate() =\r\n        MapTree.validate comparer tree\r\n\r\n\r\n    member m.ContainsKey(k) = \r\n        MapTree.mem comparer k tree\r\n\r\n\r\n    member m.Remove(k)  : MapExt<'Key,'Value> = \r\n        new MapExt<'Key,'Value>(comparer,MapTree.remove comparer k tree)\r\n        \r\n    member m.TryRemove(k)  : option<'Value * MapExt<'Key,'Value>> = \r\n        match MapTree.tryRemove comparer k tree with\r\n        | Some (v, t) -> \r\n            Some(v, new MapExt<'Key,'Value>(comparer, t))\r\n        | None ->\r\n            None\r\n            \r\n    member m.TryFind(k) = \r\n        MapTree.tryFind comparer k tree\r\n\r\n    member m.ToList() = MapTree.toList tree\r\n\r\n    member m.ToArray() = MapTree.toArray tree\r\n\r\n    static member ofList(l) : MapExt<'Key,'Value> = \r\n        let comparer = LanguagePrimitives.FastGenericComparer<'Key> \r\n        new MapExt<_,_>(comparer,MapTree.ofList comparer l)\r\n           \r\n    member this.ComputeHashCode() = \r\n        let combineHash x y = (x <<< 1) + y + 631 \r\n        let mutable res = 0\r\n        for (KeyValue(x,y)) in this do\r\n            res <- combineHash res (hash x)\r\n            res <- combineHash res (Unchecked.hash y)\r\n        abs res\r\n\r\n    override this.Equals(that) = \r\n        if System.Object.ReferenceEquals(this, that) then\r\n            true\r\n        else\r\n            #if ADAPTIVE_NO_TYPE_TESTS \r\n            let that = unbox<MapExt<'Key, 'Value>> that\r\n            use e1 = (this :> seq<_>).GetEnumerator() \r\n            use e2 = (that :> seq<_>).GetEnumerator() \r\n            let rec loop () = \r\n                let m1 = e1.MoveNext() \r\n                let m2 = e2.MoveNext()\r\n                (m1 = m2) && (not m1 || let e1c, e2c = e1.Current, e2.Current in ((e1c.Key = e2c.Key) && (Unchecked.equals e1c.Value e2c.Value) && loop()))\r\n            loop()\r\n            #else\r\n            match that with \r\n            | :? MapExt<'Key,'Value> as that -> \r\n                use e1 = (this :> seq<_>).GetEnumerator() \r\n                use e2 = (that :> seq<_>).GetEnumerator() \r\n                let rec loop () = \r\n                    let m1 = e1.MoveNext() \r\n                    let m2 = e2.MoveNext()\r\n                    (m1 = m2) && (not m1 || let e1c, e2c = e1.Current, e2.Current in ((e1c.Key = e2c.Key) && (Unchecked.equals e1c.Value e2c.Value) && loop()))\r\n                loop()\r\n            | _ -> false\r\n            #endif\r\n\r\n    override this.GetHashCode() = this.ComputeHashCode()\r\n\r\n    member x.GetForwardEnumerator() = new MapTree.MapTreeEnumerator<'Key, 'Value>(tree) :> IEnumerator<_> \r\n    member x.GetBackwardEnumerator() = new MapTree.MapTreeBackwardEnumerator<'Key, 'Value>(tree) :> IEnumerator<_> \r\n\r\n    interface IEnumerable<KeyValuePair<'Key, 'Value>> with\r\n        member __.GetEnumerator() = MapTree.mkIEnumerator tree\r\n\r\n    interface System.Collections.IEnumerable with\r\n        member __.GetEnumerator() = (MapTree.mkIEnumerator tree :> System.Collections.IEnumerator)\r\n\r\n    //interface IDictionary<'Key, 'Value> with \r\n    //    member m.Item \r\n    //        with get x = m.[x]            \r\n    //        and  set x v = ignore(x,v); raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\"))\r\n\r\n    //    // REVIEW: this implementation could avoid copying the Values to an array    \r\n    //    member s.Keys = ([| for kvp in s -> kvp.Key |] :> ICollection<'Key>)\r\n\r\n    //    // REVIEW: this implementation could avoid copying the Values to an array    \r\n    //    member s.Values = ([| for kvp in s -> kvp.Value |] :> ICollection<'Value>)\r\n\r\n    //    member s.Add(k,v) = ignore(k,v); raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\"))\r\n    //    member s.ContainsKey(k) = s.ContainsKey(k)\r\n    //    member s.TryGetValue(k,r) = if s.ContainsKey(k) then (r <- s.[k]; true) else false\r\n    //    member s.Remove(k : 'Key) = ignore(k); (raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\")) : bool)\r\n\r\n    //interface ICollection<KeyValuePair<'Key, 'Value>> with \r\n    //    member __.Add(x) = ignore(x); raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\"));\r\n    //    member __.Clear() = raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\"));\r\n    //    member __.Remove(x) = ignore(x); raise (NotSupportedException(\"SR.GetString(SR.mapCannotBeMutated)\"));\r\n    //    member s.Contains(x) = s.ContainsKey(x.Key) && Unchecked.equals s.[x.Key] x.Value\r\n    //    member __.CopyTo(arr,i) = MapTree.copyToArray tree arr i\r\n    //    member s.IsReadOnly = true\r\n    //    member s.Count = s.Count\r\n\r\n    interface System.IComparable with \r\n        member m.CompareTo(obj: obj) = \r\n            #if ADAPTIVE_NO_TYPE_TESTS\r\n            let m2 = unbox<MapExt<'Key,'Value>> obj\r\n            Seq.compareWith \r\n                (fun (kvp1 : KeyValuePair<_,_>) (kvp2 : KeyValuePair<_,_>)-> \r\n                    let c = comparer.Compare(kvp1.Key,kvp2.Key) in \r\n                    if c <> 0 then c else Unchecked.compare kvp1.Value kvp2.Value)\r\n                m m2 \r\n            #else\r\n            match obj with \r\n            | :? MapExt<'Key,'Value>  as m2->\r\n                Seq.compareWith \r\n                    (fun (kvp1 : KeyValuePair<_,_>) (kvp2 : KeyValuePair<_,_>)-> \r\n                        let c = comparer.Compare(kvp1.Key,kvp2.Key) in \r\n                        if c <> 0 then c else Unchecked.compare kvp1.Value kvp2.Value)\r\n                    m m2 \r\n            | _ -> \r\n                invalidArg \"obj\" (\"SR.GetString(SR.notComparable)\")\r\n            #endif\r\n    override x.ToString() = \r\n        let suffix = if x.Count > 4 then \"; ...\" else \"\"\r\n        let content = Seq.truncate 4 x |> Seq.map (fun (KeyValue t) -> sprintf \"%A\" t) |> String.concat \"; \"\r\n        \"map [\" + content + suffix + \"]\"\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\nand \r\n    [<Sealed>]\r\n    internal MapDebugView<'Key,'Value when 'Key : comparison>(v: MapExt<'Key,'Value>)  =  \r\n\r\n        [<DebuggerBrowsable(DebuggerBrowsableState.RootHidden)>]\r\n        member x.Items = v |> Seq.truncate 10000 |> Seq.toArray\r\n\r\n\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\n[<RequireQualifiedAccess>]\r\nmodule internal MapExt = \r\n\r\n    [<CompiledName(\"IsEmpty\")>]\r\n    let isEmpty (m:MapExt<_,_>) = m.IsEmpty\r\n    \r\n    [<CompiledName(\"Keys\")>]\r\n    let keys (m:MapExt<_,_>) = m.Keys\r\n    \r\n    [<CompiledName(\"Values\")>]\r\n    let values (m:MapExt<_,_>) = m.Values\r\n\r\n    [<CompiledName(\"Add\")>]\r\n    let add k v (m:MapExt<_,_>) = m.Add(k,v)\r\n\r\n    [<CompiledName(\"Find\")>]\r\n    let find k (m:MapExt<_,_>) = m.[k]\r\n\r\n    [<CompiledName(\"TryFind\")>]\r\n    let tryFind k (m:MapExt<_,_>) = m.TryFind(k)\r\n\r\n    [<CompiledName(\"Remove\")>]\r\n    let remove k (m:MapExt<_,_>) = m.Remove(k)\r\n    \r\n    [<CompiledName(\"TryRemove\")>]\r\n    let tryRemove k (m:MapExt<_,_>) = m.TryRemove(k)\r\n    \r\n    [<CompiledName(\"TryRemoveMin\")>]\r\n    let tryRemoveMin (m:MapExt<_,_>) = m.TryRemoveMin()\r\n\r\n    [<CompiledName(\"TryRemoveMax\")>]\r\n    let tryRemoveMax (m:MapExt<_,_>) = m.TryRemoveMax()\r\n\r\n    [<CompiledName(\"ContainsKey\")>]\r\n    let containsKey k (m:MapExt<_,_>) = m.ContainsKey(k)\r\n\r\n    [<CompiledName(\"Iterate\")>]\r\n    let iter f (m:MapExt<_,_>) = m.Iterate(f)\r\n\r\n    [<CompiledName(\"TryPick\")>]\r\n    let tryPick f (m:MapExt<_,_>) = m.TryPick(f)\r\n\r\n    [<CompiledName(\"TryPickBack\")>]\r\n    let tryPickBack f (m:MapExt<_,_>) = m.TryPickBack(f)\r\n\r\n    [<CompiledName(\"Pick\")>]\r\n    let pick f (m:MapExt<_,_>) = match tryPick f m with None -> raise (KeyNotFoundException()) | Some res -> res\r\n\r\n    [<CompiledName(\"Exists\")>]\r\n    let exists f (m:MapExt<_,_>) = m.Exists(f)\r\n\r\n    [<CompiledName(\"Filter\")>]\r\n    let filter f (m:MapExt<_,_>) = m.Filter(f)\r\n\r\n    [<CompiledName(\"Partition\")>]\r\n    let partition f (m:MapExt<_,_>) = m.Partition(f)\r\n\r\n    [<CompiledName(\"ForAll\")>]\r\n    let forall f (m:MapExt<_,_>) = m.ForAll(f)\r\n    \r\n    [<CompiledName(\"MapRange\")>]\r\n    let mapRange f (m:MapExt<_,_>) = m.MapRange(f)\r\n\r\n    [<CompiledName(\"Map\")>]\r\n    let map f (m:MapExt<_,_>) = m.Map(f)\r\n\r\n    [<CompiledName(\"Fold\")>]\r\n    let fold<'Key,'T,'State when 'Key : comparison> f (z:'State) (m:MapExt<'Key,'T>) = MapTree.fold f z m.Tree\r\n\r\n    [<CompiledName(\"FoldBack\")>]\r\n    let foldBack<'Key,'T,'State  when 'Key : comparison> f (m:MapExt<'Key,'T>) (z:'State) =  MapTree.foldBack  f m.Tree z\r\n        \r\n    [<CompiledName(\"ToSeq\")>]\r\n    let toSeq (m:MapExt<_,_>) = m |> Seq.map (fun kvp -> kvp.Key, kvp.Value)\r\n    \r\n    [<CompiledName(\"ToSeqBack\")>]\r\n    let toSeqBack (m : MapExt<_,_>) = new EnumeratorEnumerable<_>(m.GetBackwardEnumerator) :> seq<_> \r\n\r\n    [<CompiledName(\"FindKey\")>]\r\n    let findKey f (m : MapExt<_,_>) = m |> toSeq |> Seq.pick (fun (k,v) -> if f k v then Some(k) else None)\r\n\r\n    [<CompiledName(\"TryFindKey\")>]\r\n    let tryFindKey f (m : MapExt<_,_>) = m |> toSeq |> Seq.tryPick (fun (k,v) -> if f k v then Some(k) else None)\r\n\r\n    [<CompiledName(\"OfList\")>]\r\n    let ofList (l: ('Key * 'Value) list) = MapExt<_,_>.ofList(l)\r\n\r\n    [<CompiledName(\"OfSeq\")>]\r\n    let ofSeq l = MapExt<_,_>.Create(l)\r\n    \r\n    [<CompiledName(\"Singleton\")>]\r\n    let singleton k v = MapExt<_,_>(LanguagePrimitives.FastGenericComparer<_>,MapOne(k,v))\r\n\r\n    [<CompiledName(\"OfArray\")>]\r\n    let ofArray (array: ('Key * 'Value) array) = \r\n        let comparer = LanguagePrimitives.FastGenericComparer<'Key> \r\n        new MapExt<_,_>(comparer,MapTree.ofArray comparer array)\r\n\r\n    [<CompiledName(\"ToList\")>]\r\n    let toList (m:MapExt<_,_>) = m.ToList()\r\n\r\n    [<CompiledName(\"ToArray\")>]\r\n    let toArray (m:MapExt<_,_>) = m.ToArray()\r\n\r\n    [<CompiledName(\"Empty\")>]\r\n    let empty<'Key,'Value  when 'Key : comparison> = MapExt<'Key,'Value>.Empty\r\n\r\n    [<CompiledName(\"Count\")>]\r\n    let count (m:MapExt<_,_>) = m.Count\r\n    \r\n    [<CompiledName(\"TryMin\")>]\r\n    let tryMin (m:MapExt<_,_>) = m.TryMinKey\r\n    \r\n    [<CompiledName(\"Min\")>]\r\n    let min (m:MapExt<_,_>) = \r\n        match m.TryMinKey with\r\n            | Some min -> min\r\n            | None -> raise <| ArgumentException(\"The input sequence was empty.\")\r\n\r\n    [<CompiledName(\"TryMax\")>]\r\n    let tryMax (m:MapExt<_,_>) = m.TryMaxKey\r\n\r\n    [<CompiledName(\"Max\")>]\r\n    let max (m:MapExt<_,_>) = \r\n        match m.TryMaxKey with\r\n        | Some min -> min\r\n        | None -> raise <| ArgumentException(\"The input sequence was empty.\")\r\n\r\n    \r\n    [<CompiledName(\"TryItem\")>]\r\n    let tryItem i (m:MapExt<_,_>) = m.TryAt i\r\n\r\n    [<CompiledName(\"Item\")>]\r\n    let item i (m:MapExt<_,_>) = \r\n        match m.TryAt i with\r\n            | Some t -> t\r\n            | None -> raise <| IndexOutOfRangeException()\r\n\r\n    [<CompiledName(\"Alter\")>]\r\n    let alter k f (m:MapExt<_,_>) = m.Alter(k, f)\r\n    \r\n    [<CompiledName(\"MapMonotonic\")>]\r\n    let mapMonotonic f (m:MapExt<_,_>) = m.MapMonotonic(f)\r\n    \r\n    [<CompiledName(\"ChooseMonotonic\")>]\r\n    let chooseMonotonic f (m:MapExt<_,_>) = m.ChooseMonotonic(f)\r\n\r\n    [<CompiledName(\"Split\")>]\r\n    let split k (m:MapExt<_,_>) = m.Split k\r\n\r\n    [<CompiledName(\"TryIndexOf\")>]\r\n    let tryIndexOf i (m:MapExt<_,_>) = m.TryIndexOf i\r\n\r\n    [<CompiledName(\"GetReference\")>]\r\n    let reference i (m:MapExt<_,_>) = m.GetReference i\r\n\r\n\r\n    [<CompiledName(\"Union\")>]\r\n    let union (l:MapExt<_,_>) r = l.UnionWith (r, fun _ r -> r)\r\n\r\n    [<CompiledName(\"UnionWith\")>]\r\n    let unionWith f (l:MapExt<_,_>) r = l.UnionWith (r, f)\r\n    \r\n    [<CompiledName(\"IntersectWith\")>]\r\n    let intersectWith f (l:MapExt<_,_>) r = l.IntersectWith (r, f)\r\n    \r\n    [<CompiledName(\"Intersect\")>]\r\n    let intersect (l:MapExt<_,_>) r = l.Intersect r\r\n\r\n    [<CompiledName(\"Map2\")>]\r\n    let map2 f (l:MapExt<_,_>) r = l.Map2 (r, f)\r\n\r\n    [<CompiledName(\"Choose\")>]\r\n    let choose f (l:MapExt<_,_>) = l.Choose (f)\r\n    \r\n    [<CompiledName(\"Choose2\")>]\r\n    let choose2 f (l:MapExt<_,_>) r = l.Choose2 (r, f)\r\n    \r\n    [<CompiledName(\"Neighbours\")>]\r\n    let neighbours k (m:MapExt<_,_>) = m.Neighbours k\r\n    \r\n    [<CompiledName(\"NeighboursAt\")>]\r\n    let neighboursAt i (m:MapExt<_,_>) = m.NeighboursAt i\r\n    \r\n    [<CompiledName(\"TryGetIndex\")>]\r\n    let tryGetIndex k (m:MapExt<_,_>) = m.TryGetIndex k\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Collections.Generic\r\n\r\n/// the internal implementation of our order-maintenance structure.\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype IndexNode =\r\n    class\r\n\r\n        /// Root-node for this cycle\r\n        val mutable public Root : IndexNode\r\n\r\n        /// Prev node in the cycle\r\n        val mutable public Prev : IndexNode\r\n\r\n        /// Next node in the cycle\r\n        val mutable public Next : IndexNode\r\n\r\n        /// the current tag (must only be modified when holding a lock to the Value)\r\n        val mutable public Tag : uint64\r\n\r\n        /// The current reference count of the value (used for tracking disposal)\r\n        val mutable public RefCount : int\r\n\r\n        /// Relabel a part of the list starting at start until distance(start, a) >= cnt^2 + 1.\r\n        /// this should ensure amortized costs of O(log N) for insert.\r\n        static member private Relabel(start : IndexNode) =\r\n            let all = List<IndexNode>()\r\n\r\n            let distance (l : IndexNode) (r : IndexNode) =\r\n                if l = r then UInt64.MaxValue\r\n                else r.Tag - l.Tag\r\n\r\n            // assuming distance start start.Next == 1\r\n            let mutable current = start.Next\r\n            all.Add start.Next\r\n            Monitor.Enter start.Next\r\n\r\n            let mutable cnt = 1UL\r\n            while distance start current < 1UL + cnt * cnt do\r\n                current <- current.Next\r\n                cnt <- cnt + 1UL\r\n                all.Add current\r\n                Monitor.Enter current\r\n\r\n            let space = distance start current\r\n\r\n            // the last node does not get relabeled\r\n            current <- current.Prev\r\n            all.RemoveAt (all.Count - 1)\r\n            Monitor.Exit current.Next\r\n            cnt <- cnt - 1UL\r\n\r\n            let step = space / (1UL + cnt)\r\n            let mutable current = start.Tag + step\r\n            for n in all do\r\n                n.Tag <- current\r\n                current <- current + step\r\n                Monitor.Exit n\r\n                    \r\n            step\r\n\r\n        /// the current sort-label for the node\r\n        member x.Key = x.Tag - x.Root.Tag\r\n\r\n        /// insert a node directly after this one.\r\n        member x.InsertAfter() =\r\n            lock x (fun () ->\r\n                let next = x.Next\r\n                    \r\n                /// initially we increment the distance by Uint64.MaxValue/2\r\n                let mutable distance = \r\n                    if next = x then UInt64.MaxValue\r\n                    else next.Tag - x.Tag\r\n\r\n                // we're out of luck and there's no space for an additional node.\r\n                if distance = 1UL then\r\n                    distance <- IndexNode.Relabel x\r\n                        \r\n                // put the new node in between me and the next.\r\n                let key = x.Tag + (distance / 2UL)\r\n                let res = IndexNode(x.Root, Prev = x, Next = x.Next, Tag = key)\r\n\r\n                // link the node\r\n                next.Prev <- res\r\n                x.Next <- res\r\n\r\n                res\r\n            )\r\n\r\n        /// Delete a node from the cycle.\r\n        member x.Delete() =\r\n            let prev = x.Prev\r\n            Monitor.Enter prev\r\n            if prev.Next <> x then\r\n                Monitor.Exit prev\r\n                x.Delete()\r\n            else\r\n                Monitor.Enter x\r\n                try\r\n                    if x.RefCount = 1 then\r\n                        prev.Next <- x.Next\r\n                        x.Next.Prev <- prev\r\n                        x.RefCount <- 0\r\n                    else\r\n                        x.RefCount <- x.RefCount - 1\r\n\r\n                finally\r\n                    Monitor.Exit x\r\n                    Monitor.Exit prev\r\n\r\n        /// add a reference to the node.\r\n        member x.AddRef() =\r\n            lock x (fun () ->\r\n                x.RefCount <- x.RefCount + 1\r\n            )\r\n\r\n        /// Compare me to another node.\r\n        member x.CompareTo(o : IndexNode) =\r\n            match Monitor.TryEnter x, Monitor.TryEnter o with\r\n            | true, true ->\r\n                try \r\n                    compare x.Key o.Key\r\n                finally\r\n                    Monitor.Exit x\r\n                    Monitor.Exit o\r\n\r\n            | true, false ->\r\n                Monitor.Exit x\r\n                x.CompareTo o\r\n\r\n            | false, true ->\r\n                Monitor.Exit o\r\n                x.CompareTo o\r\n\r\n            | false, false ->\r\n                x.CompareTo o\r\n\r\n        interface IComparable with\r\n            member x.CompareTo (o : obj) =\r\n                match o with\r\n                | :? IndexNode as o -> x.CompareTo o\r\n                | _ -> failwithf \"[Real] cannot compare real to %A\" o\r\n\r\n        override x.GetHashCode() = System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(x)\r\n        override x.Equals o = System.Object.ReferenceEquals(x,o)\r\n        override x.ToString() = sprintf \"%f\" (float x.Key / float UInt64.MaxValue)\r\n        member private x.AsString = x.ToString()\r\n\r\n        new(root : IndexNode) = { Root = root; Prev = Unchecked.defaultof<_>; Next = Unchecked.defaultof<_>; Tag = 0UL; RefCount = 0 }\r\n    end\r\n        \r\n#if !FABLE_COMPILER\r\n/// datastructure representing an abstract index.\r\n/// supported operations are: Index.zero, Index.after(index), Index.before(index), Index.between(l, r).\r\n/// this is a 'simple' solution to the order-maintenance problem that has insert in O(log N), delete in O(1) and compare in O(1).\r\n/// Note that the implementation is quite obfuscated due to concurrency.\r\n[<Sealed; StructuredFormatDisplay(\"{AsString}\")>]\r\ntype Index private(real : IndexNode) =\r\n    do real.AddRef()\r\n\r\n    /// we create a thread for deleting the underlying values when Index goes out of scope.\r\n    /// this way we avoid blocking the finalizer for Index.\r\n    static let startThread (run : unit -> unit) =\r\n        let start = System.Threading.ThreadStart(run)\r\n        let thread = System.Threading.Thread(start, IsBackground = true, Name = \"Index cleanup thread\")\r\n        thread.Start()\r\n        thread\r\n\r\n    static let queue = new System.Collections.Concurrent.BlockingCollection<IndexNode>()\r\n    static let runner =\r\n        startThread (fun () -> \r\n            while true do\r\n                try queue.Take().Delete()\r\n                with e -> printfn \"Index cleanup thread failed with: %A\" e\r\n        )\r\n\r\n    member private x.Value = real\r\n\r\n    member x.After() =\r\n        lock real (fun () ->\r\n            if real.Next <> real.Root then Index real.Next \r\n            else Index (real.InsertAfter()) \r\n        )   \r\n\r\n    member x.Before() =\r\n        let prev = real.Prev\r\n        Monitor.Enter prev\r\n        if prev.Next <> real then\r\n            Monitor.Exit prev\r\n            x.Before()\r\n        else\r\n            try\r\n                if prev = real.Root then \r\n                    prev.InsertAfter() |> Index\r\n                else\r\n                    prev |> Index\r\n            finally\r\n                Monitor.Exit prev\r\n\r\n    member l.Between(r : Index) =\r\n        let l = l.Value\r\n        let r = r.Value\r\n        Monitor.Enter l\r\n        try\r\n            if l.Next = r then l.InsertAfter() |> Index\r\n            else l.Next |> Index\r\n        finally\r\n            Monitor.Exit l\r\n\r\n    override x.Finalize() =\r\n        queue.Add real\r\n\r\n    member x.CompareTo (o : Index) = real.CompareTo(o.Value)\r\n\r\n    override x.GetHashCode() = real.GetHashCode()\r\n    override x.Equals o =\r\n        match o with\r\n            | :? Index as o -> real.Equals o.Value\r\n            | _ -> false\r\n                \r\n    override x.ToString() = real.ToString()\r\n    member private x.AsString = x.ToString()\r\n\r\n    interface IComparable with\r\n        member x.CompareTo(o : obj) = \r\n            match o with\r\n            | :? Index as o -> x.CompareTo o\r\n            | _ -> 0\r\n        \r\n    interface IComparable<Index> with\r\n        member x.CompareTo(o : Index) = x.CompareTo o\r\n\r\n    new() = \r\n        let r = IndexNode(Unchecked.defaultof<_>)\r\n        r.Root <- r\r\n        r.Next <- r\r\n        r.Prev <- r\r\n        Index(r)\r\n\r\n#else\r\n\r\ntype largeuint(data : uint32[]) =\r\n    static let ceilDiv32 (v : int) =\r\n        if v < 0 then 0\r\n        elif v &&& 31 = 0 then v  /32\r\n        else 1 + v / 32\r\n\r\n    static let trim (arr : uint32[]) =\r\n        let mutable off = 0\r\n        while off < arr.Length && arr.[off] = 0u do\r\n            off <- off + 1\r\n        if off > 0 then Array.skip off arr\r\n        else arr\r\n\r\n    let data = trim data\r\n    member x.Data = data\r\n    member x.Bits = 32 * data.Length\r\n\r\n    static member Zero = largeuint([||])\r\n    static member One = largeuint([| 1u |])\r\n    \r\n    new (v : uint8) = largeuint [| uint32 v |]\r\n    new (v : int8) = largeuint [| uint32 v |]\r\n    new (v : uint16) = largeuint [| uint32 v |]\r\n    new (v : int16) = largeuint [| uint32 v |]\r\n    new (v : uint32) = largeuint [| v |]\r\n    new (v : int) = largeuint [| uint32 v |]\r\n    new (v : uint64) = largeuint [| uint32 (v >>> 32); uint32 v |]\r\n    new (v : int64) = largeuint [| uint32 (v >>> 32); uint32 v |]\r\n\r\n    member x.IsZero = data.Length = 0\r\n\r\n    member x.GetBit(i : int) : uint32 =\r\n        let slot = data.Length - 1 - (i >>> 5)\r\n        let inSlot = i &&& 31\r\n\r\n        if slot >= 0 && slot <= data.Length then\r\n            (data.[slot] >>> inSlot) &&& 1u\r\n        else\r\n            0u\r\n\r\n    override x.ToString() =\r\n        data |> Seq.mapi (fun i b -> if i = 0 then sprintf \"%X\" b else sprintf \"%08X\" b) |> String.concat \"\"\r\n\r\n    static member (<<<) (l : largeuint, r : int) : largeuint =\r\n        if r = 0 then l\r\n        elif r < 0 then l >>> -r\r\n        else\r\n            let maxBits = 32 * l.Data.Length + r\r\n            let res = Array.zeroCreate (ceilDiv32 maxBits)\r\n            let shift = r &&& 31\r\n            if shift = 0 then\r\n                let mutable ri = res.Length - 1 - (r >>> 5)\r\n                let mutable li = l.Data.Length - 1\r\n                while li >= 0 && ri >= 0 do \r\n                    res.[ri] <- l.Data.[li]\r\n                    ri <- ri - 1\r\n                    li <- li - 1\r\n                largeuint res\r\n\r\n            else\r\n                let mutable ri = res.Length - 1 - (r >>> 5)\r\n                let mutable li = l.Data.Length - 1\r\n                let mutable c = 0u\r\n                while li >= 0 && ri >= 0 do \r\n                    res.[ri] <- (l.Data.[li] <<< shift) ||| c\r\n                    c <- l.Data.[li] >>> (32-shift)\r\n                    ri <- ri - 1\r\n                    li <- li - 1\r\n\r\n                if ri >= 0 && c <> 0u then\r\n                    res.[ri] <- c\r\n\r\n                largeuint res\r\n\r\n    static member (>>>) (l : largeuint, r : int) =\r\n        if r = 0 then l\r\n        elif r < 0 then l <<< -r\r\n        else\r\n            let maxBits = 32 * l.Data.Length - r\r\n            let res = Array.zeroCreate (ceilDiv32 maxBits)\r\n            let shift = r &&& 31\r\n            if shift = 0 then\r\n                let mutable ri = 0\r\n                let mutable li = 0\r\n                while li < l.Data.Length && ri < res.Length do \r\n                    res.[ri] <- l.Data.[li]\r\n                    ri <- ri + 1\r\n                    li <- li + 1\r\n                \r\n                largeuint res\r\n                \r\n            else\r\n                let mask = (1u <<< shift) - 1u\r\n                let mutable ri = 0\r\n                let mutable li = 0\r\n                let mutable c = 0u\r\n                while li < l.Data.Length && ri < res.Length do \r\n                    res.[ri] <- (l.Data.[li] >>> shift) ||| c\r\n                    c <- (l.Data.[li] &&& mask) <<< (32 - shift)\r\n                    ri <- ri + 1\r\n                    li <- li + 1\r\n                \r\n\r\n                largeuint res\r\n\r\n    static member (+) (l : largeuint, r : largeuint) : largeuint =\r\n        let bits = 1 + max l.Bits r.Bits\r\n        let res = Array.zeroCreate (ceilDiv32 bits)\r\n\r\n        let mutable li = l.Data.Length-1\r\n        let mutable ri = r.Data.Length-1\r\n        let mutable oi = res.Length-1\r\n        let mutable c = 0u\r\n        while li >= 0 && ri >= 0 do\r\n            let v = float l.Data.[li] + float r.Data.[ri] + float c\r\n\r\n            res.[oi] <- uint32 v\r\n            c <- if v > 4294967295.0 then 1u else 0u\r\n            li <- li - 1\r\n            ri <- ri - 1\r\n            oi <- oi - 1\r\n\r\n        while li >= 0 do\r\n            let v = float l.Data.[li] + float c\r\n            res.[oi] <- uint32 v\r\n            c <- if v > 4294967295.0 then 1u else 0u\r\n            li <- li - 1\r\n            oi <- oi - 1\r\n\r\n        while ri >= 0 do\r\n            let v = float r.Data.[ri] + float c\r\n            res.[oi] <- uint32 v\r\n            c <- if v > 4294967295.0 then 1u else 0u\r\n            ri <- ri - 1\r\n            oi <- oi - 1\r\n\r\n        while oi >= 0 do\r\n            let v = float c\r\n            c <- if v > 4294967295.0 then 1u else 0u\r\n            res.[oi] <- uint32 v\r\n            oi <- oi - 1\r\n\r\n        largeuint res\r\n\r\n    /// l + 1 =?= r\r\n    static member DistanceIsOne(l : largeuint, r : largeuint) =\r\n        let res = ceilDiv32 (1 + max l.Bits r.Bits)\r\n        let mutable lPlusOne = true\r\n        let mutable rPlusOne = true\r\n        let mutable li = l.Data.Length-1\r\n        let mutable ri = r.Data.Length-1\r\n        let mutable oi = res - 1\r\n        let mutable lc = 1u\r\n        let mutable rc = 1u\r\n\r\n        let inline getl (i : int) =\r\n            if i >= 0 then l.Data.[i]\r\n            else 0u\r\n\r\n        let inline getr (i : int) =\r\n            if i >= 0 then r.Data.[i]\r\n            else 0u\r\n            \r\n\r\n        while oi >= 0 && (lPlusOne || rPlusOne) do\r\n            let ld = getl li\r\n            let rd = getr ri\r\n\r\n            if lPlusOne then\r\n                let l1 = float ld + float lc\r\n                if uint32 l1 <> getr ri then \r\n                    //printfn \"l + 1 <> r (%A <> %A) %d\" (uint32 l1) (getr ri) oi\r\n                    lPlusOne <- false\r\n                else\r\n                    lc <- if l1 > 4294967295.0 then 1u else 0u\r\n\r\n            if rPlusOne then\r\n                let r1 = float rd + float rc\r\n                if uint32 r1 <> getl li then \r\n                    //printfn \"r + 1 <> l (%A <> %A) %d\" (uint32 r1) (getl ri) oi\r\n                    rPlusOne <- false\r\n                else\r\n                    rc <- if r1 > 4294967295.0 then 1u else 0u\r\n\r\n            li <- li - 1\r\n            ri <- ri - 1\r\n            oi <- oi - 1\r\n\r\n        lPlusOne || rPlusOne\r\n\r\n    override x.GetHashCode() =\r\n        let inline combine a b =\r\n            uint32 a ^^^ uint32 b + 0x9e3779b9u + (uint32 a <<< 6) + (uint32 a >>> 2) |> int\r\n        data |> Array.fold (fun c v -> combine c (Unchecked.hash v)) 0\r\n\r\n    override x.Equals o =\r\n        match o with\r\n        | :? largeuint as o -> data.Length = o.Data.Length && Array.forall2 (=) data o.Data\r\n        | _ -> false\r\n\r\n    interface System.IComparable with\r\n        member x.CompareTo o =\r\n            match o with\r\n            | :? largeuint as o ->\r\n                let c = compare data.Length o.Data.Length\r\n                if c <> 0 then c\r\n                else\r\n                    let rec compareArray (i : int) (l : uint32[]) (r : uint32[]) =\r\n                        if i < l.Length then \r\n                            let c = compare l.[i] r.[i]\r\n                            if c <> 0 then c\r\n                            else compareArray (i+1) l r\r\n                        else\r\n                            0\r\n                    compareArray 0 data o.Data\r\n            | _ ->\r\n                failwith \"uncomparable\"\r\n\r\n[<Sealed>]\r\ntype Index private(number : largeuint, dexp : int) =\r\n    \r\n    let number, dexp =\r\n        if number.IsZero then\r\n            number, 0\r\n        else\r\n            let mutable number = number\r\n            let mutable dexp = dexp\r\n            while number.GetBit 0 = 0u do\r\n                number <- number >>> 1\r\n                dexp <- dexp - 1\r\n            number, dexp\r\n\r\n    member private x.Number = number\r\n    member private x.DenomiatorExp = dexp\r\n\r\n    static member Zero = Index(largeuint.Zero, 0)\r\n    static member One = Index(largeuint.One, 0)\r\n        \r\n    override x.ToString() =\r\n        sprintf \"0x%s/0x%X\" (string number) (1L <<< dexp)\r\n\r\n    override x.GetHashCode() =\r\n        let a = number.GetHashCode() \r\n        let b = dexp.GetHashCode()\r\n        uint32 a ^^^ uint32 b + 0x9e3779b9u + (uint32 a <<< 6) + (uint32 a >>> 2) |> int\r\n\r\n    override x.Equals o =\r\n        match o with\r\n        | :? Index as o -> number = o.Number && dexp = o.DenomiatorExp\r\n        | _ -> false\r\n\r\n    static member Between(l : Index, r : Index) =\r\n        let le = l.DenomiatorExp\r\n        let re = r.DenomiatorExp\r\n        let c = compare le re\r\n        let mutable a = Unchecked.defaultof<_>\r\n        let mutable b = Unchecked.defaultof<_>\r\n        let mutable e = 0\r\n        if c < 0 then\r\n            a <- l.Number <<< (re - le)\r\n            b <- r.Number\r\n            e <- re\r\n\r\n        elif c > 0 then\r\n            a <- l.Number\r\n            b <- r.Number <<< (le - re)\r\n            e <- le\r\n            \r\n        else\r\n            a <- l.Number\r\n            b <- r.Number\r\n            e <- le\r\n\r\n        if a = b then failwith \"equal indices\"\r\n        elif largeuint.DistanceIsOne(a, b) then\r\n            Index(a + b, e + 1)\r\n        else\r\n            Index((a + b) >>> 1, e)\r\n        \r\n    member inline l.Between(r : Index) = Index.Between(l, r)\r\n\r\n    member x.After() = Index.Between(x, Index.One)\r\n    member x.Before() = Index.Between(Index.Zero, x)\r\n\r\n    interface System.IComparable with\r\n        member x.CompareTo o =\r\n            match o with\r\n            | :? Index as o -> \r\n                if dexp < o.DenomiatorExp then\r\n                    let a = number <<< (o.DenomiatorExp - dexp)\r\n                    let b = o.Number\r\n                    compare a b\r\n                elif o.DenomiatorExp < dexp then\r\n                    let a = number\r\n                    let b = o.Number <<< (dexp - o.DenomiatorExp)\r\n                    compare a b\r\n                else\r\n                    compare number o.Number\r\n            | _ ->\r\n                failwith \"uncomparable\"\r\n\r\n    new() = Index(largeuint.Zero, 0)\r\n\r\n#endif\r\n\r\n\r\n\r\n/// functional operators for the Index datastructure.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule Index =\r\n    let zero = Index()\r\n\r\n    let after (r : Index) = r.After()\r\n\r\n    let before (r : Index) = r.Before()\r\n\r\n    let between (l : Index) (r : Index) = l.Between r\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Collections\r\nopen System.Collections.Generic\r\n[<Struct; CustomComparison; CustomEquality>]\r\ntype internal ReversedCompare<'a when 'a : comparison>(value : 'a) =\r\n    member x.Value = value\r\n\r\n    override x.GetHashCode() =\r\n        Unchecked.hash value\r\n\r\n    override x.Equals o =\r\n        #if ADAPTIVE_NO_TYPE_TESTS\r\n        Unchecked.equals value (unbox<ReversedCompare<'a>> o).Value\r\n        #else\r\n        match o with\r\n        | :? ReversedCompare<'a> as o -> \r\n            Unchecked.equals value o.Value\r\n        | _ -> \r\n            false\r\n        #endif\r\n\r\n    interface IComparable with\r\n        member x.CompareTo o =\r\n            #if ADAPTIVE_NO_TYPE_TESTS\r\n            compare (unbox<ReversedCompare<'a>> o).Value value\r\n            #else\r\n            match o with\r\n            | :? ReversedCompare<'a> as o -> compare o.Value value\r\n            | _ -> 0\r\n            #endif\r\n\r\n    #if !FABLE_COMPILER\r\n    interface IComparable<ReversedCompare<'a>> with\r\n        member x.CompareTo o =  compare o.Value x.Value\r\n    #endif\r\n\r\n/// A persitent array-like structure that allows lookup/insertion/deletion of entries in O(log N).\r\n/// Note that datastructure uses Index instead of int as index type which allows for these efficient implementations.\r\n/// However the datastructure also has accessors that allow getting/setting/deleting entries via an int-index in O(log N).\r\n[<Struct; StructuralEquality; NoComparison>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype IndexList< [<EqualityConditionalOn>] 'T> internal(l : Index, h : Index, content : MapExt<Index, 'T>) =\r\n    \r\n    static let empty = IndexList<'T>(Index.zero, Index.zero, MapExt.empty)\r\n\r\n    /// The empty list.\r\n    static member Empty = empty\r\n\r\n    /// The smallest Index contained in the list or Index.zero if the list is empty.\r\n    member x.MinIndex = l\r\n\r\n    /// The largest Index contained in the list or Index.zero if the list is empty.\r\n    member x.MaxIndex = h\r\n\r\n    /// Is the list empty?\r\n    member x.IsEmpty = content.IsEmpty\r\n\r\n    /// The number of entries in the list.\r\n    member x.Count = content.Count\r\n\r\n    /// Internal for getting the underlying store.\r\n    member internal x.Content = content\r\n\r\n    /// Gets the entry associated to the given index (if any).\r\n    member x.TryGet (i : Index) =\r\n        MapExt.tryFind i content\r\n        \r\n    /// Gets the entry at the given index (if any).\r\n    member x.TryGet (i : int) =\r\n        match MapExt.tryItem i content with\r\n            | Some (_,v) -> Some v\r\n            | None -> None\r\n\r\n    /// Gets the entry associated to the given index or fails if not existing.\r\n    member x.Item\r\n        with get(i : Index) = MapExt.find i content\r\n        \r\n    /// Gets the entry at the given index or fails if not existing.\r\n    member x.Item\r\n        with get(i : int) = MapExt.item i content |> snd\r\n\r\n    /// Appends the given element to the list.\r\n    member x.Add(element : 'T) =\r\n        if content.Count = 0 then\r\n            let t = Index.after Index.zero\r\n            IndexList(t, t, MapExt.ofList [t, element])\r\n        else\r\n            let t = Index.after h\r\n            IndexList(l, t, MapExt.add t element content)\r\n        \r\n    /// Prepends the given element to the list.\r\n    member x.Prepend(element : 'T) =\r\n        if content.Count = 0 then\r\n            let t = Index.after Index.zero\r\n            IndexList(t, t, MapExt.ofList [t, element])\r\n        else\r\n            let t = Index.before l\r\n            IndexList(t, h, MapExt.add t element content)\r\n\r\n    /// Adds or updates the element associated to index.\r\n    member x.Set(index : Index, value : 'T) =\r\n        if content.Count = 0 then\r\n            IndexList(index, index, MapExt.ofList [index, value])\r\n\r\n        elif index < l then\r\n            IndexList(index, h, MapExt.add index value content)\r\n\r\n        elif index > h then\r\n            IndexList(l, index, MapExt.add index value content)\r\n\r\n        else \r\n            IndexList(l, h, MapExt.add index value content)\r\n\r\n    /// Updates the element at the given position or returns the unmodified list if the index was out of bounds.\r\n    member x.Set(index : int, value : 'T) =\r\n        if index < 0 || index >= content.Count then\r\n            x\r\n        else\r\n            match MapExt.tryItem index content with\r\n                | Some (id,_) -> x.Set(id, value)\r\n                | None -> x\r\n\r\n    /// Updates the element at the given position or returns the unmodified list if the index was out of bounds.\r\n    member x.Update(index : int, update : 'T -> 'T) =\r\n        match MapExt.tryItem index content with\r\n            | Some (id,v) -> \r\n                let newContent = MapExt.add id (update v) content\r\n                IndexList(l, h, newContent)\r\n            | None -> \r\n                x\r\n\r\n    /// Inserts the element at the given position or returns the unmodified list if the index is not in [0..count].\r\n    /// Note that InsertAt works with index = count.\r\n    member x.InsertAt(index : int, value : 'T) =\r\n        if index < 0 || index > content.Count then\r\n            x\r\n        else\r\n            let l, s, r = MapExt.neighboursAt index content\r\n\r\n            let r = \r\n                match s with\r\n                    | Some s -> Some s\r\n                    | None -> r\r\n\r\n            let index = \r\n                match l, r with\r\n                    | Some (before,_), Some (after,_) -> Index.between before after\r\n                    | None,            Some (after,_) -> Index.before after\r\n                    | Some (before,_), None           -> Index.after before\r\n                    | None,            None           -> Index.after Index.zero\r\n            x.Set(index, value)\r\n\r\n    /// Inserts the element directly before the given index.\r\n    member x.InsertBefore(index : Index, value : 'T) =\r\n        let l, s, _r = MapExt.neighbours index content\r\n        match s with\r\n            | None ->\r\n                x.Set(index, value)\r\n            | Some (s, _) ->\r\n                let index = \r\n                    match l with\r\n                    | Some (l,_) -> Index.between l s\r\n                    | None -> Index.before index\r\n                x.Set(index, value)\r\n                \r\n    /// Inserts the element directly after the given index.\r\n    member x.InsertAfter(index : Index, value : 'T) =\r\n        let _l, s, r = MapExt.neighbours index content\r\n        match s with\r\n            | None ->\r\n                x.Set(index, value)\r\n            | Some (s, _) ->\r\n                let index =\r\n                    match r with\r\n                        | Some (r,_) -> Index.between s r\r\n                        | None -> Index.after index\r\n                x.Set(index, value)\r\n\r\n    /// Gets the index for the given position or None if the index is out of bounds.\r\n    member x.TryGetIndex(index : int) =\r\n        match MapExt.tryItem index content with\r\n            | Some (id,_) -> Some id\r\n            | None -> None\r\n\r\n    /// Gets the position for the given index or None if the index is not contained in the list.\r\n    member x.TryGetPosition(index : Index) =\r\n        MapExt.tryGetIndex index content\r\n\r\n    /// Removes the entry associated to the given index.\r\n    member x.Remove(index : Index) =\r\n        let c = MapExt.remove index content\r\n        if c.Count = 0 then empty\r\n        elif l = index then IndexList(MapExt.min c, h, c)\r\n        elif h = index then IndexList(l, MapExt.max c, c)\r\n        else IndexList(l, h, c)\r\n        \r\n    /// Removes the entry at the given position (if any).\r\n    member x.RemoveAt(index : int) =\r\n        match MapExt.tryItem index content with\r\n            | Some (id, _) -> x.Remove id\r\n            | _ -> x\r\n\r\n    /// Applies the mapping function to all elements of the list and returns a new list containing the results.\r\n    member x.Map<'T2>(mapping : Index -> 'T -> 'T2) : IndexList<'T2> =\r\n        IndexList(l, h, MapExt.map mapping content)\r\n        \r\n    /// Applies the mapping function to all elements of the list and returns a new list containing all Some entries.\r\n    member x.Choose(mapping : Index -> 'T -> option<'T2>) =\r\n        let res = MapExt.choose mapping content\r\n        if res.IsEmpty then \r\n            IndexList.Empty\r\n        else\r\n            IndexList(MapExt.min res, MapExt.max res, res)\r\n\r\n    /// Filters the list using the given predicate.\r\n    member x.Filter(predicate : Index -> 'T -> bool) =\r\n        let res = MapExt.filter predicate content\r\n        if res.IsEmpty then \r\n            IndexList.Empty\r\n        else\r\n            IndexList(MapExt.min res, MapExt.max res, res)\r\n\r\n    /// Tries to find the smallest index for the given element.\r\n    member x.TryFind(element : 'T) : option<Index> =\r\n        match content |> MapExt.toSeq |> Seq.tryFind (fun (k,v) -> Unchecked.equals v element) with\r\n        | Some (k, v) -> Some k\r\n        | _ -> None\r\n\r\n    /// Removes the first occurrence of the given element (if any).\r\n    member x.Remove(item : 'T) : IndexList<'T> =\r\n        match x.TryFind(item) with\r\n        | Some index -> x.Remove(index)\r\n        | None -> x\r\n          \r\n    /// Returns all entres from the list in back-to-front order.\r\n    member x.AsSeqBackward =\r\n        content |> MapExt.toSeqBack |> Seq.map snd\r\n        \r\n    /// Returns all entres from the list in back-to-front order.\r\n    member x.AsListBackward =\r\n        x.AsSeqBackward |> Seq.toList\r\n        \r\n    /// Returns all entres from the list in back-to-front order.\r\n    member x.AsArrayBackward =\r\n        x.AsSeqBackward |> Seq.toArray\r\n        \r\n    /// Returns all entres from the list.\r\n    member x.AsSeq =\r\n        content |> MapExt.toSeq |> Seq.map snd\r\n        \r\n    /// Returns all entres from the list.\r\n    member x.AsList =\r\n        content |> MapExt.toList |> List.map snd\r\n        \r\n    /// Returns all entres from the list.\r\n    member x.AsArray =\r\n        content |> MapExt.toArray |> Array.map snd\r\n        \r\n    /// Conservatively determines whether the two IndexLists are equal.\r\n    /// `O(1)`\r\n    member x.ConservativeEquals(other : IndexList<'T>) =\r\n        System.Object.ReferenceEquals(content, other.Content)\r\n\r\n    /// Like choose2 but with existing right values.\r\n    member x.UpdateTo(other : IndexList<'T2>, mapping : Index -> option<'T> -> 'T2 -> 'T3) =\r\n        if other.Count * 5 < content.Count then\r\n            let content = content\r\n            let newStore = \r\n                other.Content |> MapExt.map (fun idx r ->\r\n                    let l = MapExt.tryFind idx content\r\n                    mapping idx l r\r\n                )\r\n            IndexList(other.MinIndex, other.MaxIndex, newStore)\r\n        else\r\n            let newStore =\r\n                (content, other.Content) ||> MapExt.choose2 (fun i l r ->\r\n                    match r with\r\n                    | Some r -> mapping i l r |> Some\r\n                    | None -> None\r\n                )\r\n            IndexList(other.MinIndex, other.MaxIndex, newStore)\r\n\r\n    /// Removes the entry associated to the given index, returns the (optional) value and the list without the specific element.\r\n    member x.TryRemove(index : Index) =\r\n        match MapExt.tryRemove index content with\r\n        | Some (value, rest) ->\r\n            if rest.IsEmpty then Some (value, IndexList.Empty)\r\n            else Some (value, IndexList(MapExt.min rest, MapExt.max rest, rest))\r\n        | None ->\r\n            None\r\n\r\n    /// Finds the optional neighbour elements in the list for the given index.\r\n    member x.Neighbours(index : Index) =\r\n        MapExt.neighbours index content\r\n\r\n\r\n    override x.ToString() =\r\n        let suffix =\r\n            if x.Count > 5 then \"; ...\"\r\n            else \"\"\r\n        let elements = \r\n            content \r\n            |> MapExt.toSeq \r\n            |> Seq.truncate 5\r\n            |> Seq.map (snd >> sprintf \"%A\") \r\n            |> String.concat \"; \"\r\n\r\n        sprintf \"IndexList [%s%s]\" elements suffix\r\n\r\n    member private x.AsString = x.ToString()\r\n    \r\n    /// Copies the list to the given array (starting at index)\r\n    member x.CopyTo(dst : 'T[], dstIndex : int) = \r\n        let mutable i = dstIndex\r\n        content |> MapExt.iter (fun k v -> dst.[i] <- v; i <- i + 1)\r\n\r\n    /// Tries to find the position for the given entry or -1 if the entry does not exist. O(N)\r\n    member x.IndexOf(item : 'T) =\r\n        x |> Seq.tryFindIndex (Unchecked.equals item) |> Option.defaultValue -1\r\n\r\n    /// Tries to find the position for the given Index or -1 if the Index does not exist. O(N)\r\n    member x.IndexOf(index : Index) =\r\n        MapExt.tryIndexOf index content |> Option.defaultValue -1\r\n        \r\n    interface ICollection<'T> with \r\n        member x.Add(v) = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n        member x.Clear() = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n        member x.Remove(v) = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n        member x.Contains(v) = content |> MapExt.exists (fun _ vi -> Unchecked.equals vi v)\r\n        member x.CopyTo(arr,i) = x.CopyTo(arr, i)\r\n        member x.IsReadOnly = true\r\n        member x.Count = x.Count\r\n\r\n    interface IList<'T> with\r\n        member x.RemoveAt(i) = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n        member x.IndexOf(item : 'T) = x.IndexOf item\r\n        member x.Item\r\n            with get(i : int) = x.[i]\r\n            and set (i : int) (v : 'T) = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n        member x.Insert(i,v) = raise (NotSupportedException(\"IndexList cannot be mutated\"))\r\n\r\n    interface IEnumerable with\r\n        member x.GetEnumerator() = new IndexListEnumerator<'T>(content :> seq<_>) :> _\r\n\r\n    interface IEnumerable<'T> with\r\n        member x.GetEnumerator() = new IndexListEnumerator<'T>(content :> seq<_>) :> _\r\n\r\n/// Enumerator for IndexList.\r\nand private IndexListEnumerator<'T>(content : IEnumerable<KeyValuePair<Index, 'T>>) =\r\n    let r = content.GetEnumerator()\r\n\r\n    member x.Current =\r\n        r.Current.Value\r\n\r\n    interface IEnumerator with\r\n        member x.MoveNext() = r.MoveNext()\r\n        member x.Current = x.Current :> obj\r\n        member x.Reset() = r.Reset()\r\n\r\n    interface IEnumerator<'T> with\r\n        member x.Current = x.Current\r\n        member x.Dispose() = r.Dispose()\r\n\r\n/// Functional operators for IndexList.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule IndexList =\r\n\r\n    /// Internal utility for creating IndexLists from MapExt.\r\n    let internal ofMap (m : MapExt<Index, 'T>) =\r\n        if MapExt.isEmpty m then\r\n            IndexList<'T>.Empty\r\n        else\r\n            let min = m.TryMinKey\r\n            let max = m.TryMaxKey\r\n            IndexList<'T>(min.Value, max.Value, m)\r\n       \r\n\r\n    /// the empty list.\r\n    let empty<'T> = IndexList<'T>.Empty\r\n\r\n    /// is the list empty?\r\n    let inline isEmpty (list : IndexList<'T>) = \r\n        list.IsEmpty\r\n\r\n    /// the number of entries in the list.\r\n    let inline count (list : IndexList<'T>) = \r\n        list.Count\r\n\r\n    /// adds an element at the end of the list.\r\n    let inline add (v : 'T) (list : IndexList<'T>) = \r\n        list.Add v\r\n\r\n    /// adds an element at the beginning of the list.\r\n    let inline prepend (v : 'T) (list : IndexList<'T>) = \r\n        list.Prepend v\r\n\r\n    /// updates or creates the element at the given index.\r\n    let inline set (index : Index) (v : 'T) (list : IndexList<'T>) = \r\n        list.Set(index, v)\r\n\r\n    /// removes the element at the given index. (if any)\r\n    let inline remove (index : Index) (list : IndexList<'T>) = \r\n        list.Remove(index)\r\n\r\n    /// Removes the entry associated to the given index, returns the (optional) value and the list without the specific element.\r\n    let inline tryRemove (index : Index) (list : IndexList<'T>) = \r\n        list.TryRemove(index)\r\n\r\n    /// Finds the optional neighbour elements in the list for the given index.\r\n    let inline neighbours (index : Index) (list : IndexList<'T>) = \r\n        list.Neighbours(index)\r\n\r\n    /// inserts an element directly after the given index.\r\n    let inline insertAfter (index : Index) (value : 'T) (list : IndexList<'T>) = \r\n        list.InsertAfter(index, value)\r\n\r\n    /// inserts an element directly before the given index.\r\n    let inline insertBefore (index : Index) (value : 'T) (list : IndexList<'T>) = \r\n        list.InsertBefore(index, value)\r\n\r\n    /// gets the element for the given index (if any).\r\n    let inline tryGet (index : Index) (list : IndexList<'T>) = \r\n        list.TryGet index\r\n\r\n    /// adds, deletes or updates the element for the given index.\r\n    /// the update functions gets the optional old value and may optionally return\r\n    /// a new value (or None for deleting the entry).\r\n    let alter (index : Index) (mapping : option<'T> -> option<'T>) (l : IndexList<'T>) =\r\n        MapExt.alter index mapping l.Content |> ofMap\r\n\r\n    /// updates the element at the given index (if any).\r\n    let update (index : Index) (mapping : 'T -> 'T) (l : IndexList<'T>) =\r\n        alter index (Option.map mapping) l\r\n\r\n    /// splits the list at the given index and returns both (possibly empty) halves and (optional) splitting element.\r\n    let split (index : Index) (list : IndexList<'T>) =\r\n        let (l,s,r) = list.Content.Split(index)\r\n\r\n        match MapExt.isEmpty l, MapExt.isEmpty r with\r\n        | true, true -> empty, s, empty\r\n        | true, false -> \r\n            let rmin = r.TryMinKey |> Option.defaultValue Index.zero\r\n            empty, s, IndexList<'T>(rmin, list.MaxIndex, r)\r\n        | false, true ->\r\n            let lmax = l.TryMaxKey |> Option.defaultValue Index.zero\r\n            IndexList<'T>(list.MinIndex, lmax, l), s, empty\r\n        | false, false ->\r\n            let lmax = l.TryMaxKey |> Option.defaultValue Index.zero\r\n            let rmin = r.TryMinKey |> Option.defaultValue Index.zero\r\n            IndexList<'T>(list.MinIndex, lmax, l), s, IndexList<'T>(rmin, list.MaxIndex, r)\r\n\r\n    /// updates or creates the element at the given index.\r\n    /// note that out-of-bounds-indices will be ineffective.\r\n    let inline setAt (index : int) (v : 'T) (list : IndexList<'T>) = \r\n        list.Set(index, v)\r\n\r\n    /// removes the element at the given index.\r\n    let inline removeAt (index : int) (list : IndexList<'T>) = \r\n        list.RemoveAt(index)\r\n        \r\n    /// inserts a new element at the given index.\r\n    let inline insertAt (index : int) (value : 'T) (list : IndexList<'T>) = \r\n        list.InsertAt(index, value)\r\n\r\n    /// gets the (optional) element for the index.\r\n    let inline tryAt (index : int) (list : IndexList<'T>) = \r\n        list.TryGet index\r\n        \r\n    /// gets the position for the given index or None if the index is not contained in the list.\r\n    let inline tryGetPosition (index : Index) (list : IndexList<'T>) =\r\n        list.TryGetPosition index\r\n\r\n    /// adds, deletes or updates the element for the given index.\r\n    /// the update functions gets the optional old value and may optionally return\r\n    /// a new value (or None for deleting the entry).\r\n    let alterAt (i : int) (mapping : option<'T> -> option<'T>) (list : IndexList<'T>) =\r\n        if i < -1 || i > list.Count then\r\n            list\r\n        else\r\n            let l, s, r = MapExt.neighboursAt i list.Content\r\n            match s with\r\n            | Some (si, sv) ->\r\n                match mapping (Some sv) with\r\n                | Some r ->\r\n                    IndexList<'T>(list.MinIndex, list.MaxIndex, MapExt.add si r list.Content)\r\n                | None ->\r\n                    let m = MapExt.remove si list.Content\r\n                    let min = match l with | None -> MapExt.tryMin m |> Option.get | Some _ -> list.MinIndex\r\n                    let max = match r with | None -> MapExt.tryMax m |> Option.get | Some _ -> list.MaxIndex\r\n                    IndexList<'T>(min, max, m)\r\n            | None ->\r\n                match mapping None with\r\n                | Some res ->\r\n                    let mutable minChanged = false\r\n                    let mutable maxChanged = false\r\n                    let idx =\r\n                        match l, r with\r\n                        | None, None -> \r\n                            minChanged <- true\r\n                            maxChanged <- true\r\n                            Index.zero\r\n                        | Some (l,_), None -> \r\n                            maxChanged <- true\r\n                            Index.after l\r\n                        | None, Some (r,_) -> \r\n                            minChanged <- true\r\n                            Index.before r\r\n                        | Some (l,_), Some (r,_) -> \r\n                            Index.between l r\r\n\r\n                    let min = if minChanged then idx else list.MinIndex\r\n                    let max = if maxChanged then idx else list.MaxIndex\r\n                    IndexList<'T>(min, max, MapExt.add idx res list.Content)\r\n                | None ->\r\n                    list\r\n\r\n    /// updates the element at the given index (if any).\r\n    let updateAt (index : int) (mapping : 'T -> 'T) (l : IndexList<'T>) =\r\n        alterAt index (Option.map mapping) l\r\n\r\n    /// splits the list at the given index and returns both (possibly empty) halves and (optional) splitting element.\r\n    let splitAt (index : int) (list : IndexList<'T>) =\r\n        if index < 0 then\r\n            empty, None, list\r\n        elif index >= list.Count then\r\n            list, None, empty\r\n        else\r\n            let index,_ = list.Content.TryAt(index) |> Option.get\r\n            split index list\r\n\r\n      \r\n        \r\n    /// gets the optional min-index used by the list.\r\n    let tryFirstIndex (list : IndexList<'T>) = list.Content.TryMinKey\r\n\r\n    /// gets the optional max-index used by the list.\r\n    let tryLastIndex (list : IndexList<'T>) = list.Content.TryMaxKey\r\n\r\n    /// gets the min-index used by the list or fails if empty.\r\n    let firstIndex (list : IndexList<'T>) = tryFirstIndex list |> Option.get\r\n    \r\n    /// gets the max-index used by the list or fails if empty.\r\n    let lastIndex (list : IndexList<'T>) = tryLastIndex list |> Option.get\r\n\r\n    /// gets the optional first element from the list.\r\n    let tryFirst (list : IndexList<'T>) = list.Content.TryMinValue\r\n\r\n    /// gets the optional last element from the list.\r\n    let tryLast (list : IndexList<'T>) = list.Content.TryMaxValue\r\n\r\n    \r\n    /// gets the first element from the list or fails if empty.\r\n    let first (list : IndexList<'T>) = tryFirst list |> Option.get\r\n\r\n    /// gets the last element from the list or fails if empty.\r\n    let last (list : IndexList<'T>) = tryLast list |> Option.get\r\n\r\n    /// tries to get the index for the first occurrence of element in the list.\r\n    let tryFindIndex (element : 'T) (list : IndexList<'T>) = \r\n        list.Content |> MapExt.tryPick (fun k v -> if v = element then Some k else None)\r\n        \r\n    /// tries to get the index for the last occurrence of element in the list.\r\n    let tryFindIndexBack (element : 'T) (list : IndexList<'T>) = \r\n        list.Content |> MapExt.tryPickBack (fun k v -> if v = element then Some k else None)\r\n        \r\n    /// gets the index for the first occurrence of element in the list or fails if not existing.\r\n    let findIndex (element : 'T) (list : IndexList<'T>) = \r\n        tryFindIndex element list |> Option.get\r\n\r\n    /// gets the index for the last occurrence of element in the list or fails if not existing.\r\n    let findIndexBack (element : 'T) (list : IndexList<'T>) = \r\n        tryFindIndexBack element list |> Option.get\r\n\r\n    /// checks whether any element in the list fulfills the given predicate.\r\n    let exists (f : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        list.Content |> Seq.exists (fun kv -> f kv.Key kv.Value)\r\n\r\n    /// checks if all elements in the list fulfill the given predicate.\r\n    let forall (f : Index -> 'T -> bool) (list : IndexList<'T>) =   \r\n        list.Content |> Seq.forall (fun kv -> f kv.Key kv.Value)\r\n    \r\n    /// tries to find the first entry satisfying the predicate.\r\n    let tryFind (predicate : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        list.Content |> MapExt.tryPick (fun k v -> if predicate k v then Some v else None)\r\n        \r\n    /// tries to find the last entry satisfying the predicate.\r\n    let tryFindBack (predicate : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        list.Content |> MapExt.tryPickBack (fun k v -> if predicate k v then Some v else None)\r\n        \r\n    /// finds the first entry satisfying the predicate or fails if none.\r\n    let find (predicate : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        tryFind predicate list |> Option.get\r\n        \r\n    /// finds the last entry satisfying the predicate or fails if none.\r\n    let findBack (predicate : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        tryFindBack predicate list |> Option.get\r\n    \r\n    /// tries to pick the first Some - value.\r\n    let tryPick (mapping : Index -> 'T1 -> option<'T2>) (list : IndexList<'T1>) = \r\n        list.Content |> MapExt.tryPick mapping\r\n\r\n    /// tries to pick the last Some - value.\r\n    let tryPickBack (mapping : Index -> 'T1 -> option<'T2>) (list : IndexList<'T1>) = \r\n        list.Content |> MapExt.tryPickBack mapping\r\n    \r\n    /// concats the given lists.\r\n    let append (l : IndexList<'T>) (r : IndexList<'T>) =\r\n        if l.Count = 0 then r\r\n        elif r.Count = 0 then l\r\n        elif l.MaxIndex < r.MinIndex then\r\n            IndexList<'T>(l.MinIndex, r.MaxIndex, MapExt.union l.Content r.Content)\r\n            \r\n        elif l.Count < r.Count then\r\n            let mutable res = r\r\n            for lv in l.AsSeqBackward do\r\n                res <- res.Prepend(lv)\r\n            res\r\n        else\r\n            let mutable res = l\r\n            for rv in r.AsSeq do\r\n                res <- res.Add(rv)\r\n            res\r\n\r\n    /// concats the given lists.\r\n    let concat (s : #seq<IndexList<'T>>) =\r\n        s |> Seq.fold append empty\r\n        \r\n    /// takes the first n elements from the list.\r\n    let take (n : int) (list : IndexList<'T>) =\r\n        if n <= 0 then empty\r\n        elif n > list.Count then list\r\n        else\r\n            let l,_,_ = splitAt n list\r\n            l\r\n\r\n    /// skips the first n elements from the list.\r\n    let skip (n : int) (list : IndexList<'T>) =\r\n        if n <= 0 then list\r\n        elif n > list.Count then empty\r\n        else\r\n            let _,_,r = splitAt (n - 1) list\r\n            r\r\n\r\n    /// creates a list containing a single element.\r\n    let single (v : 'T) =\r\n        let t = Index.after Index.zero\r\n        IndexList(t, t, MapExt.ofList [t, v])\r\n\r\n    /// all elements from the list with their respective Index.\r\n    let toSeqIndexed (list: IndexList<'T>) = list.Content |> MapExt.toSeq\r\n\r\n    /// all elements from the list with their respective Index.\r\n    let toListIndexed (list: IndexList<'T>) = list.Content |> MapExt.toList\r\n\r\n    /// all elements from the list with their respective Index.\r\n    let toArrayIndexed (list: IndexList<'T>) = list.Content |> MapExt.toArray\r\n\r\n    /// creates a new IndexList containing all the given elements at their respective Index.\r\n    let ofSeqIndexed (elements: seq<Index * 'T>) = MapExt.ofSeq elements |> ofMap\r\n\r\n    /// creates a new IndexList containing all the given elements at their respective Index.\r\n    let ofListIndexed (elements: list<Index * 'T>) = MapExt.ofList elements |> ofMap\r\n\r\n    /// creates a new IndexList containing all the given elements at their respective Index.\r\n    let ofArrayIndexed (elements: array<Index * 'T>) = MapExt.ofArray elements |> ofMap\r\n\r\n    /// all elements from the list.\r\n    let inline toSeq (list : IndexList<'T>) = list :> seq<_>\r\n\r\n    /// all elements from the list.\r\n    let inline toList (list : IndexList<'T>) = list.AsList\r\n\r\n    /// all elements from the list.\r\n    let inline toArray (list : IndexList<'T>) = list.AsArray\r\n    \r\n    /// all elements from the list in reversed order.\r\n    let inline toSeqBack (list : IndexList<'T>) = \r\n        list.AsSeqBackward :> seq<_>\r\n\r\n    /// all elements from the list in reversed order.\r\n    let inline toListBack (list : IndexList<'T>) = \r\n        list.AsListBackward\r\n\r\n    /// all elements from the list in reversed order.\r\n    let inline toArrayBack (list : IndexList<'T>) = \r\n        list.AsArrayBackward\r\n\r\n    /// creates a list from the given elements.\r\n    let ofSeq (seq : seq<'T>) =\r\n        let mutable res = empty\r\n        for e in seq do res <- add e res\r\n        res\r\n        \r\n    /// creates a list from the given elements.\r\n    let inline ofList (list : list<'T>) = \r\n        ofSeq list\r\n        \r\n    /// creates a list from the given elements.\r\n    let inline ofArray (arr : 'T[]) = \r\n        ofSeq arr\r\n\r\n    /// applies the mapping function to all elements and concats the resulting lists.\r\n    let collecti (mapping : Index -> 'T1 -> IndexList<'T2>) (l : IndexList<'T1>) = \r\n        use e = (l.Content :> seq<_>).GetEnumerator()\r\n        if e.MoveNext() then \r\n            let mutable res = mapping e.Current.Key e.Current.Value\r\n            while e.MoveNext() do\r\n                let v = mapping e.Current.Key e.Current.Value\r\n                res <- append res v\r\n            res\r\n        else\r\n            IndexList.Empty\r\n        \r\n    /// applies the mapping function to all elements and concats the resulting lists.\r\n    let collect (mapping : 'T1 -> IndexList<'T2>) (l : IndexList<'T1>) = \r\n        collecti (fun _ v -> mapping v) l\r\n\r\n    /// applies the mapping function to all elements in the list.\r\n    let inline mapi (mapping : Index -> 'T1 -> 'T2) (list : IndexList<'T1>) = \r\n        list.Map mapping\r\n\r\n    /// applies the mapping function to all elements in the list.\r\n    let inline map (mapping : 'T1 -> 'T2) (list : IndexList<'T1>) = \r\n        list.Map (fun _ v -> mapping v)\r\n        \r\n    /// applies the mapping function to all elements in the list and drops None results.\r\n    let inline choosei (mapping : Index -> 'T1 -> option<'T2>) (list : IndexList<'T1>) = \r\n        list.Choose mapping\r\n\r\n    /// applies the mapping function to all elements in the list and drops None results.\r\n    let inline choose (mapping : 'T1 -> option<'T2>) (list : IndexList<'T1>) = \r\n        list.Choose (fun _ v -> mapping v)\r\n    \r\n    /// Creates a new IndexList by applying the mapping function to all entries.\r\n    /// The respective option-arguments are some whenever the left/right list has an entry for the current Index.\r\n    /// Note that one of the options will always be some.\r\n    let choose2 (mapping : Index -> option<'T1> -> option<'T2> -> option<'T3>) (l : IndexList<'T1>) (r : IndexList<'T2>) =\r\n        MapExt.choose2 mapping l.Content r.Content |> ofMap\r\n\r\n    /// filters the list using the given predicate.\r\n    let inline filteri (predicate : Index -> 'T -> bool) (list : IndexList<'T>) = \r\n        list.Filter predicate\r\n        \r\n    /// filters the list using the given predicate.\r\n    let inline filter (predicate : 'T -> bool) (list : IndexList<'T>) = \r\n        list.Filter (fun _ v -> predicate v)\r\n\r\n    /// sorts the list by the given mapping.\r\n    let sortByi (mapping : Index -> 'T1 -> 'T2) (l : IndexList<'T1>) =\r\n        let arr = l.Content |> MapExt.toArray\r\n        Array.sortInPlaceBy (fun (i,v) -> mapping i v, i) arr\r\n        ofArray (Array.map snd arr)\r\n\r\n    /// sorts the list by the given mapping.\r\n    let sortBy (mapping : 'T1 -> 'T2) (l : IndexList<'T1>) =\r\n        let arr = l.Content |> MapExt.toArray\r\n        Array.sortInPlaceBy (fun (i, v) -> mapping v, i) arr\r\n        ofArray (Array.map snd arr)\r\n        \r\n    /// sorts the list by the given mapping in descending order.\r\n    let sortByDescendingi (mapping : Index -> 'T1 -> 'T2) (l : IndexList<'T1>) =\r\n        let arr = l.Content |> MapExt.toArray\r\n        Array.sortInPlaceBy (fun (i,v) -> ReversedCompare(mapping i v), i) arr\r\n        ofArray (Array.map snd arr)\r\n\r\n    /// sorts the list by the given mapping in descending order.\r\n    let sortByDescending (mapping : 'T1 -> 'T2) (l : IndexList<'T1>) =\r\n        let arr = l.Content |> MapExt.toArray\r\n        Array.sortInPlaceBy (fun (i, v) -> ReversedCompare(mapping v), i) arr\r\n        ofArray (Array.map snd arr)\r\n        \r\n    /// sorts the list using the given compare function.\r\n    let sortWith (cmp : 'T -> 'T -> int) (l : IndexList<'T>) =\r\n        let arr = l.Content |> MapExt.toArray\r\n        let cmp (li: Index, lv: 'T) (ri: Index, rv: 'T) =\r\n            let c = cmp lv rv\r\n            if c = 0 then compare li ri\r\n            else c\r\n\r\n        Array.sortInPlaceWith cmp arr\r\n        ofArray (Array.map snd arr)\r\n        ","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections\r\nopen System.Collections.Generic\r\n\r\n/// Represents the difference of two IndexLists.\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\n[<Struct; StructuralEquality; NoComparison>]\r\ntype IndexListDelta< [<EqualityConditionalOn>] 'T> internal(content : MapExt<Index, ElementOperation<'T>>) =\r\n    static let empty = IndexListDelta<'T>(MapExt.empty)\r\n\r\n    /// Internally used for getting the underlying store.\r\n    member internal x.Content = content\r\n\r\n    /// The empty delta.\r\n    static member Empty = empty\r\n\r\n    /// The number of deltas in the list.\r\n    member x.Count = content.Count\r\n\r\n    /// Is the list empty?\r\n    member x.IsEmpty = content.IsEmpty\r\n\r\n    /// Inserts an operation.\r\n    member x.Add(index : Index, op : ElementOperation<'T>) =\r\n        IndexListDelta(MapExt.add index op content)\r\n\r\n    /// Removes the operation associated to index. (if any)\r\n    member x.Remove(index : Index) =\r\n        IndexListDelta(MapExt.remove index content)\r\n\r\n    /// Returns all Index/Operation tuples from the list.\r\n    member x.ToSeq() = content |> MapExt.toSeq\r\n    /// Returns all Index/Operation tuples from the list.\r\n    member x.ToList() = content |> MapExt.toList\r\n    /// Returns all Index/Operation tuples from the list.\r\n    member x.ToArray() = content |> MapExt.toArray\r\n\r\n    /// Combines to IndexListDeltas to one.\r\n    member x.Combine(r : IndexListDelta<'T>) =\r\n        if x.IsEmpty then r\r\n        elif r.IsEmpty then x\r\n        else MapExt.unionWith (fun l r -> r) x.Content r.Content |> IndexListDelta\r\n\r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the results.\r\n    member x.Map(mapping : Index -> ElementOperation<'T> -> ElementOperation<'T2>) =\r\n        IndexListDelta(MapExt.map mapping content)\r\n\r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    member x.Choose(mapping : Index -> ElementOperation<'T> -> option<ElementOperation<'T2>>) =\r\n        IndexListDelta(MapExt.choose mapping content)\r\n\r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    /// Note that the indices need to be monotonic.\r\n    member x.MapMonotonic(mapping : Index -> ElementOperation<'T> -> Index * ElementOperation<'T2>) =\r\n        IndexListDelta(MapExt.mapMonotonic mapping content)\r\n        \r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    /// Note that the indices need to be monotonic.\r\n    member x.ChooseMonotonic(mapping : Index -> ElementOperation<'T> -> option<Index * ElementOperation<'T2>>) =\r\n        IndexListDelta(MapExt.chooseMonotonic mapping content)\r\n\r\n    /// Filters the delta list using the given predicate.\r\n    member x.Filter(mapping : Index -> ElementOperation<'T> -> bool) =\r\n        IndexListDelta(MapExt.filter mapping content)\r\n        \r\n    override x.ToString() =\r\n        let suffix =\r\n            if content.Count > 5 then \"; ...\"\r\n            else \"\"\r\n        \r\n        let content =\r\n            content |> Seq.truncate 5 |> Seq.map (fun (KeyValue(i,op)) ->\r\n                match op with\r\n                    | Set v -> sprintf \"[%A]<-%A\" i v\r\n                    | Remove -> sprintf \"Rem(%A)\" i\r\n            ) |> String.concat \"; \"\r\n\r\n        \"IndexListDelta [\" + content + suffix + \"]\"\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\n    /// Applies the mapping function to all elements and combines the resulting lists.\r\n    member x.Collect (mapping : Index -> ElementOperation<'T> -> IndexListDelta<'T2>) =\r\n        let mutable res = IndexListDelta<'T2>.Empty\r\n        for (KeyValue(i,v)) in content do\r\n            res <- res.Combine(mapping i v)\r\n        res\r\n\r\n/// Functional operators for IndexListDelta.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule IndexListDelta =\r\n    /// The empty delta.\r\n    let empty<'T> = \r\n        IndexListDelta<'T>.Empty\r\n\r\n    /// Is the list empty?\r\n    let inline isEmpty (list : IndexListDelta<'T>) = \r\n        list.IsEmpty\r\n\r\n    /// Inserts an operation.\r\n    let inline add (index : Index) (delta : ElementOperation<'T>) (list : IndexListDelta<'T>) = \r\n        list.Add(index, delta)\r\n\r\n    /// Removes the operation associated to index. (if any)\r\n    let inline remove (index : Index) (list : IndexListDelta<'T>) = \r\n        list.Remove(index)\r\n\r\n    /// Internal creating an IndexListDelta from the given map.\r\n    let internal ofMap (map : MapExt<Index, ElementOperation<'T>>) = \r\n        IndexListDelta(map)\r\n    \r\n    /// Internal creating an IndexListDelta from the given list IndexList.\r\n    let ofIndexList (list : IndexList<ElementOperation<'T>>) =\r\n        IndexListDelta(list.Content)\r\n\r\n    /// Creates a delta containing a single operation.\r\n    let single (i : Index) (op : ElementOperation<'T>) = \r\n        IndexListDelta(MapExt.singleton i op)\r\n\r\n    /// Creates an IndexListDelta containing all the given operations.\r\n    let ofSeq (operations : seq<Index * ElementOperation<'T>>) = \r\n        IndexListDelta(MapExt.ofSeq operations)\r\n\r\n    /// Creates an IndexListDelta containing all the given operations.\r\n    let ofList (operations : list<Index * ElementOperation<'T>>) = \r\n        IndexListDelta(MapExt.ofList operations)\r\n\r\n    /// Creates an IndexListDelta containing all the given operations.\r\n    let ofArray (operations : array<Index * ElementOperation<'T>>) = \r\n        IndexListDelta(MapExt.ofArray operations)\r\n\r\n    /// Returns all the operations contained in the list.\r\n    let inline toSeq (list : IndexListDelta<'T>) = \r\n        list.ToSeq()\r\n\r\n    /// Returns all the operations contained in the list.\r\n    let inline toList (list : IndexListDelta<'T>) = \r\n        list.ToList()\r\n\r\n    /// Returns all the operations contained in the list.\r\n    let inline toArray (list : IndexListDelta<'T>) = \r\n        list.ToArray()\r\n\r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    /// Note that the indices need to be monotonic.\r\n    let inline mapMonotonic (mapping : Index -> ElementOperation<'T1> -> Index * ElementOperation<'T2>) (l : IndexListDelta<'T1>) = \r\n        l.MapMonotonic mapping\r\n        \r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    /// Note that the indices need to be monotonic.\r\n    let inline chooseMonotonic (mapping : Index -> ElementOperation<'T1> -> option<Index * ElementOperation<'T2>>) (l : IndexListDelta<'T1>) = \r\n        l.ChooseMonotonic mapping\r\n\r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the results.\r\n    let inline map (mapping : Index -> ElementOperation<'T1> -> ElementOperation<'T2>) (l : IndexListDelta<'T1>) = \r\n        l.Map mapping\r\n        \r\n    /// Applies the given mapping function to all deltas in the list and returns a new list containing the 'Some'-results.\r\n    let inline choose (mapping : Index -> ElementOperation<'T1> -> option<ElementOperation<'T2>>) (l : IndexListDelta<'T1>) = \r\n        l.Choose mapping\r\n\r\n    /// Filters the delta list using the given predicate.\r\n    let inline filter (predicate : Index -> ElementOperation<'T> -> bool) (l : IndexListDelta<'T>) =\r\n        l.Filter predicate\r\n\r\n    /// Combines to IndexListDeltas to one.\r\n    let inline combine (l : IndexListDelta<'T1>) (r : IndexListDelta<'T1>) =\r\n        l.Combine(r)\r\n\r\n    /// Applies the mapping function to all elements and combines the resulting lists.\r\n    let inline collect (mapping : Index -> ElementOperation<'T1> -> IndexListDelta<'T2>) (l : IndexListDelta<'T1>) = \r\n        l.Collect mapping\r\n        \r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections\r\nopen System.Collections.Generic\r\nopen FSharp.Data.Adaptive\r\n\r\n/// Represents the difference of two HashMaps.\r\n[<Struct; CustomEquality; NoComparison>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype HashMapDelta<'K, [<EqualityConditionalOn>] 'V>(store : HashMap<'K, ElementOperation<'V>>) =\r\n    static let empty = HashMapDelta<'K, 'V>(HashMap.empty)\r\n\r\n    /// The internal store used by the HashMapDelta.\r\n    member internal x.Store = store\r\n\r\n    /// The empty map.\r\n    static member Empty = \r\n        empty\r\n\r\n    member x.IsEmpty = store.IsEmpty\r\n    member x.Count = store.Count\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\n    override x.ToString() =\r\n        let suffix =\r\n            if store.Count > 5 then \"; ...\"\r\n            else \"\"\r\n\r\n        let elements = \r\n            store \r\n            |> Seq.truncate 5\r\n            |> Seq.map (fun (k, op) ->\r\n                match op with\r\n                | Set v -> sprintf \"[%A]<-%A\" k v\r\n                | Remove -> sprintf \"Rem(%A)\" k\r\n            ) \r\n            |> String.concat \"; \"\r\n\r\n        sprintf \"HashMapDelta [%s%s]\" elements suffix\r\n\r\n    override x.GetHashCode() =\r\n        Unchecked.hash store\r\n\r\n    override x.Equals o =\r\n        #if ADAPTIVE_NO_TYPE_TESTS\r\n        let o = unbox<HashMapDelta<'K, 'V>> o\r\n        Unchecked.equals store o.Store\r\n        #else\r\n        match o with\r\n        | :? HashMapDelta<'K, 'V> as o -> Unchecked.equals store o.Store\r\n        | _ -> false\r\n        #endif\r\n    /// Combines two DHashMaps to one.\r\n    member x.Combine(other : HashMapDelta<'K, 'V>) =\r\n        HashMapDelta (HashMap.union store other.Store)\r\n\r\n    interface IEnumerable with\r\n        member x.GetEnumerator() = (store :> IEnumerable).GetEnumerator()\r\n\r\n    interface IEnumerable<'K * ElementOperation<'V>> with\r\n        member x.GetEnumerator() = (store :> seq<_>).GetEnumerator()\r\n\r\n\r\n/// Functional operators for HashMapDelta.\r\nmodule HashMapDelta =\r\n    /// The empty map delta.\r\n    [<GeneralizableValue>]\r\n    let empty<'K, 'V> = HashMapDelta<'K, 'V>.Empty\r\n\r\n    /// A single map delta containing one operation.\r\n    let single (key : 'K) (value: ElementOperation<'Value>) =\r\n        HashMapDelta(HashMap.single key value)\r\n\r\n    /// A HashMapDelta containing all the given deltas.\r\n    let ofHashMap (elements : HashMap<'K, ElementOperation<'V>>) =\r\n        HashMapDelta elements\r\n        \r\n    /// A HashMapDelta containing all the given deltas.\r\n    let ofSeq (elements : seq<'K * ElementOperation<'V>>) = \r\n        HashMapDelta(HashMap.ofSeq elements)\r\n        \r\n    /// A HashMapDelta containing all the given deltas.\r\n    let ofList (elements : list<'K * ElementOperation<'V>>) = \r\n        HashMapDelta(HashMap.ofList elements)\r\n        \r\n    /// A HashMapDelta containing all the given deltas.\r\n    let ofArray (elements : array<'K * ElementOperation<'V>>) = \r\n        HashMapDelta(HashMap.ofArray elements)\r\n\r\n    /// Is the map empty?\r\n    let inline isEmpty (map : HashMapDelta<'K, 'V>) =\r\n        map.IsEmpty\r\n\r\n    /// The number of deltas in the map.\r\n    let inline count (map : HashMapDelta<'K, 'V>) =\r\n        map.Count\r\n\r\n    /// All deltas contained in the map.\r\n    let toSeq (map : HashMapDelta<'K, 'V>) = \r\n        map.Store :> seq<_>\r\n        \r\n    /// All deltas contained in the map.\r\n    let toList (map : HashMapDelta<'K, 'V>) = \r\n        map.Store |> HashMap.toList\r\n        \r\n    /// All deltas contained in the map.\r\n    let toArray (map : HashMapDelta<'K, 'V>) = \r\n        map.Store |> HashMap.toArray\r\n        \r\n    /// All deltas contained in the map.\r\n    let toHashMap (map : HashMapDelta<'K, 'V>) =\r\n        map.Store\r\n\r\n    /// Combines two HashMapDeltas to one.\r\n    let inline combine (l : HashMapDelta<'K, 'V>) (r : HashMapDelta<'K, 'V>) = l.Combine r\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\n/// Differentiation extensions for several immutable datastructures.\r\n[<AutoOpen>]\r\nmodule DifferentiationExtensions =\r\n\r\n    /// Functional programming operators related to the HashSet<_> type.\r\n    module HashSet =\r\n\r\n        /// Determines the operations needed to transform l into r.\r\n        /// Returns a HashSetDelta containing these operations.\r\n        let computeDelta (l: HashSet<'T>) (r: HashSet<'T>) =\r\n            // O(1)\r\n            if System.Object.ReferenceEquals(l.Store, r.Store) then\r\n                HashSetDelta.empty\r\n\r\n            // O(|r|)\r\n            elif l.IsEmpty then \r\n                let delta = r.Store |> IntMap.map (List.map (fun v -> struct (v, 1)))\r\n                HashMap(r.Count, delta) |> HashSetDelta\r\n\r\n            // O(|l|)\r\n            elif r.IsEmpty then\r\n                let delta = l.Store |> IntMap.map (List.map (fun v -> struct (v, -1)))\r\n                HashMap(l.Count, delta) |> HashSetDelta\r\n        \r\n            // O(|l|*log|l|)\r\n            elif r.Count * 5 < l.Count then\r\n                // r is small\r\n                let mutable lStore = l.Store\r\n                let mutable cnt = 0\r\n\r\n                // O(|r|*log|l|)\r\n                let deltaR = \r\n                    r.Store |> IntMap.mapOptionWithKey (fun hash rValues ->\r\n                        match IntMap.tryRemove hash lStore with\r\n                        | Some (lValues, rest) ->\r\n                            lStore <- rest\r\n                            (lValues, rValues) ||> HashSetList.mergeWithOption (fun _value l r ->\r\n                                if l && not r then cnt <- cnt + 1; Some -1\r\n                                elif r && not l then cnt <- cnt + 1; Some 1\r\n                                else None\r\n                            )\r\n\r\n                        | None ->\r\n                            rValues\r\n                            |> List.map (fun v -> cnt <- cnt + 1; struct(v,1))\r\n                            |> Some\r\n                    )\r\n                \r\n                // O(|l|)\r\n                let deltaL =\r\n                    lStore \r\n                    |> IntMap.map (List.map (fun v -> cnt <- cnt + 1; struct(v,-1)))\r\n\r\n                let deltas = IntMap.append deltaL deltaR\r\n\r\n                HashSetDelta(HashMap(cnt, deltas))\r\n\r\n            // O(|r|*log|r|)\r\n            elif l.Count * 5 < r.Count then\r\n                // l is small\r\n                let mutable rStore = r.Store\r\n                let mutable cnt = 0\r\n                \r\n                // O(|l|*log|r|)\r\n                let deltaL = \r\n                    l.Store |> IntMap.mapOptionWithKey (fun hash lValues ->\r\n                        match IntMap.tryRemove hash rStore with\r\n                        | Some (rValues, rest) ->\r\n                            rStore <- rest\r\n                            (lValues, rValues) ||> HashSetList.mergeWithOption (fun _value l r ->\r\n                                if l && not r then cnt <- cnt + 1; Some -1\r\n                                elif r && not l then cnt <- cnt + 1; Some 1\r\n                                else None\r\n                            )\r\n\r\n                        | None ->\r\n                            lValues\r\n                            |> List.map (fun v -> cnt <- cnt + 1; struct(v,-1))\r\n                            |> Some\r\n                    )\r\n                \r\n                // O(|r|)\r\n                let deltaR =\r\n                    rStore \r\n                    |> IntMap.map (List.map (fun v -> cnt <- cnt + 1; struct(v,1)))\r\n\r\n                let deltas = IntMap.append deltaL deltaR\r\n\r\n                HashSetDelta(HashMap(cnt, deltas))\r\n\r\n            // O(|l|+|r|)\r\n            else\r\n                let mutable cnt = 0\r\n\r\n                let del (l: list<'T>) =\r\n                    l |> List.map (fun v -> cnt <- cnt + 1; struct (v, -1))\r\n            \r\n                let add (l: list<'T>) =\r\n                    l |> List.map (fun v -> cnt <- cnt + 1; struct (v, 1))\r\n\r\n                let both (_hash: int) (l: list<'T>) (r: list<'T>) =\r\n                    HashSetList.mergeWithOption (fun v l r ->\r\n                        if l && not r then cnt <- cnt + 1; Some -1\r\n                        elif r && not l then cnt <- cnt + 1; Some 1\r\n                        else None\r\n                    ) l r\r\n\r\n                let store = IntMap.computeDelta both (IntMap.map del) (IntMap.map add) l.Store r.Store\r\n                HashSetDelta(HashMap(cnt, store))\r\n            \r\n        /// Same as computeDelta set empty\r\n        let removeAll (set: HashSet<'T>) =\r\n            let store = set.Store |> IntMap.map (List.map (fun v -> struct (v, -1)))\r\n            HashMap(set.Count, store) |> HashSetDelta\r\n            \r\n        /// Same as computeDelta empty set\r\n        let addAll (set: HashSet<'T>) =\r\n            let store = set.Store |> IntMap.map (List.map (fun v -> struct (v, 1)))\r\n            HashMap(set.Count, store) |> HashSetDelta\r\n\r\n        /// Applies the given operations to the set. \r\n        /// Returns the new set and the 'effective' operations.\r\n        let applyDelta (value: HashSet<'T>) (delta: HashSetDelta<'T>) =\r\n            // O(1)\r\n            if delta.IsEmpty then\r\n                value, delta\r\n\r\n            // O(delta)\r\n            elif value.IsEmpty then\r\n                let mutable maxDelta = 0\r\n                let mutable hasRemove = false\r\n                let state = \r\n                    delta.Store.Store |> IntMap.mapOption (fun l ->\r\n                        let result = \r\n                            l |> List.choose (fun struct (k, delta) ->\r\n                                if delta > 0 then \r\n                                    if delta > maxDelta then maxDelta <- delta\r\n                                    Some k\r\n                                else \r\n                                    hasRemove <- true\r\n                                    None\r\n                            )\r\n                        if List.isEmpty result then None\r\n                        else Some result\r\n                    )\r\n\r\n                let delta = \r\n                    if maxDelta > 1 || hasRemove then \r\n                        delta.Store |> HashMap.choose (fun _ d -> \r\n                            if d > 0 then Some 1\r\n                            else None\r\n                        )\r\n                    else \r\n                        delta.Store\r\n\r\n                HashSet(delta.Count, state), HashSetDelta delta\r\n\r\n            // O(delta * log N)\r\n            elif delta.Count * 5 < value.Count then\r\n                // delta small\r\n                let mutable result = value\r\n                let effective =\r\n                    delta |> HashSetDelta.choose (fun op ->\r\n                        match op with\r\n                        | Add(_, v) -> \r\n                            match HashSet.tryAdd v result with\r\n                            | Some newSet ->\r\n                                result <- newSet\r\n                                Some (Add v)\r\n                            | None ->\r\n                                None\r\n                        | Rem(_, v) ->\r\n                            match HashSet.tryRemove v result with\r\n                            | Some newSet ->\r\n                                result <- newSet\r\n                                Some (Rem v)\r\n                            | None ->\r\n                                None\r\n                    )\r\n\r\n                result, effective\r\n                \r\n            // TODO: implementation possible?\r\n            //elif value.Count * 5 < delta.Count then\r\n\r\n            else\r\n                let mutable effective = HashSetDelta.empty\r\n                let newValue = \r\n                    delta.Store.Choose2SetSet(value, fun k d o ->\r\n                        match d with\r\n                        | Some d ->\r\n                            if not o && d > 0 then\r\n                                effective <- HashSetDelta.add (Add k) effective\r\n                                true\r\n                            elif o && d < 0 then\r\n                                effective <- HashSetDelta.add (Rem k) effective\r\n                                false\r\n                            else\r\n                                o\r\n                        | None ->\r\n                            o\r\n                    )\r\n\r\n                newValue, effective\r\n\r\n    /// Functional programming operators related to the HashMap<_,_> type.\r\n    module HashMap =\r\n    \r\n        /// Determines the operations needed to transform l into r.\r\n        /// Returns a HashMapDelta containing all the needed operations.\r\n        let computeDelta (l: HashMap<'A, 'B>) (r: HashMap<'A, 'B>): HashMapDelta<'A, 'B> =\r\n            if System.Object.ReferenceEquals(l.Store, r.Store) then\r\n                HashMapDelta.empty\r\n            elif l.Count = 0 && r.Count = 0 then\r\n                HashMapDelta.empty\r\n            elif l.Count = 0 then\r\n                r |> HashMap.map (fun _ v -> Set v) |> HashMapDelta\r\n            elif r.Count = 0 then\r\n                l |> HashMap.map (fun _ _ -> Remove) |> HashMapDelta\r\n            else\r\n                // TODO: one small???\r\n                let merge (_key: 'A) (l: option<'B>) (r: option<'B>) =\r\n                    match l, r with\r\n                        | None, None -> None\r\n                        | Some l, None -> Some Remove\r\n                        | None, Some r -> Some (Set r)\r\n                        | Some l, Some r ->\r\n                            if Unchecked.equals l r then None\r\n                            else Some (Set r)\r\n                HashMap.choose2 merge l r |> HashMapDelta\r\n                \r\n        /// Applies the given operations to the map. \r\n        /// Returns the new map and the 'effective' operations.\r\n        let applyDelta (m: HashMap<'A, 'B>) (delta: HashMapDelta<'A, 'B>) =\r\n            if delta.Store.Count = 0 then\r\n                m, delta\r\n            elif m.Count = 0 then\r\n                let state, delta = \r\n                    delta.Store.ChooseTup(fun _ op ->\r\n                        match op with\r\n                        | Set v -> Some (v, Set v)\r\n                        | _ -> None\r\n                    )\r\n                state, HashMapDelta delta\r\n            else\r\n                let mutable effective = HashMap.empty\r\n                let mutable m = m\r\n                for (k,v) in delta do\r\n                    m <- m.Alter(k, fun o ->\r\n                        match o, v with\r\n                            | Some o, Remove ->\r\n                                effective <- HashMap.add k Remove effective\r\n                                None\r\n                            | None, Remove ->\r\n                                None\r\n\r\n                            | None, Set n ->\r\n                                effective <- HashMap.add k (Set n) effective\r\n                                Some n\r\n\r\n                            | Some o, Set n ->\r\n                                if not (Unchecked.equals o n) then\r\n                                    effective <- HashMap.add k (Set n) effective\r\n\r\n                                Some n\r\n                    )\r\n\r\n                m, HashMapDelta effective\r\n\r\n    /// Functional programming operators related to the IndexList<_> type.\r\n    module IndexList =\r\n        \r\n        /// Determines the operations needed to transform l into r.\r\n        /// Returns a IndexListDelta containing these operations.\r\n        let applyDelta (x : IndexList<'T>) (deltas : IndexListDelta<'T>) =\r\n            if deltas.Count = 0 then\r\n                x, deltas\r\n            else\r\n                let mutable res = x\r\n                let finalDeltas =\r\n                    deltas |> IndexListDelta.filter (fun i op ->\r\n                        match op with\r\n                        | Remove -> \r\n                            res <- res.Remove i\r\n                            true\r\n                        | Set v -> \r\n                            match res.TryGet i with\r\n                            | Some o when Unchecked.equals o v -> \r\n                                false\r\n                            | _ -> \r\n                                res <- res.Set(i,v)\r\n                                true\r\n                    )\r\n\r\n                res, finalDeltas\r\n\r\n        /// Applies the given operations to the list. \r\n        /// Returns the new list and the 'effective' operations.\r\n        let computeDelta (l : IndexList<'T>) (r : IndexList<'T>) : IndexListDelta<'T> =\r\n            if l.Count = 0 && r.Count = 0 then\r\n                IndexListDelta.empty\r\n\r\n            elif l.Count = 0 then\r\n                r.Content |> MapExt.map (fun i v -> Set v) |> IndexListDelta.ofMap\r\n                \r\n            elif r.Count = 0 then\r\n                l.Content |> MapExt.map (fun i v -> Remove) |> IndexListDelta.ofMap\r\n\r\n            elif System.Object.ReferenceEquals (l.Content, r.Content) then\r\n                IndexListDelta.empty\r\n\r\n            else\r\n                // TODO: one small???\r\n                let merge (k : Index) (l : option<'T>) (r : option<'T>) =\r\n                    match l, r with\r\n                    | Some l, Some r when Unchecked.equals l r -> \r\n                        None\r\n                    | _, Some r -> \r\n                        Some (Set r)\r\n                    | Some _l, None -> \r\n                        Some Remove\r\n                    | None, None ->\r\n                        None\r\n\r\n                MapExt.choose2 merge l.Content r.Content |> IndexListDelta.ofMap\r\n\r\n","﻿namespace FSharp.Data.Traceable\r\n\r\nopen FSharp.Data.Adaptive\r\n\r\n/// Functional operators for HashSetDelta.\r\nmodule HashSetDelta =\r\n    type private Monoid<'T> private() =\r\n        /// The monoid instance for HashSetDelta\r\n        static let monoid  =\r\n            {\r\n                mempty = HashSetDelta<'T>(HashMap.empty)\r\n                mappend = fun l r -> l.Combine r\r\n                misEmpty = fun s -> s.IsEmpty\r\n            } \r\n        static member Instance = monoid\r\n\r\n    /// The monoid instance for HashSetDelta\r\n    [<GeneralizableValue>]\r\n    let monoid<'T> = Monoid<'T>.Instance\r\n \r\n/// Functional operators for IndexListDelta.\r\nmodule IndexListDelta =\r\n    type private Monoid<'T> private() =\r\n        /// The monoid instance for HashSetDelta\r\n        static let monoid  =\r\n            {\r\n                mempty = IndexListDelta<'T>.Empty\r\n                mappend = fun l r -> l.Combine r\r\n                misEmpty = fun s -> s.IsEmpty\r\n            } \r\n        static member Instance = monoid\r\n\r\n    /// The monoid instance for HashSetDelta\r\n    [<GeneralizableValue>]\r\n    let monoid<'T> = Monoid<'T>.Instance\r\n     \r\n/// Functional operators for HashMapDelta.\r\nmodule HashMapDelta =\r\n    type private Monoid<'K, 'V> private() =\r\n        /// The monoid instance for HashMapDelta\r\n        static let monoid =\r\n            {\r\n                mempty = HashMapDelta.empty<'K, 'V>\r\n                mappend = fun l r -> l.Combine r\r\n                misEmpty = fun s -> s.Store.IsEmpty\r\n            }\r\n        static member Instance = monoid\r\n\r\n    /// The monoid instance for HashMapDelta\r\n    [<GeneralizableValue>]\r\n    let monoid<'K, 'V> = Monoid<'K, 'V>.Instance\r\n    \r\n/// Functional operators for HashSet.\r\nmodule HashSet =\r\n\r\n    /// Type for caching the Traceable<_> instance for HashSet<_>\r\n    type private Traceable<'T> private() =\r\n        static let trace : Traceable<HashSet<'T>, HashSetDelta<'T>> =\r\n            {\r\n                tempty = HashSet.empty\r\n                tcomputeDelta = HashSet.computeDelta\r\n                tapplyDelta = HashSet.applyDelta\r\n                tmonoid = HashSetDelta.monoid\r\n                tprune = None\r\n                tsize = fun s -> s.Count\r\n            }\r\n        static member Instance = trace\r\n\r\n    /// The traceable instance for HashSet.\r\n    let trace<'T> = Traceable<'T>.Instance\r\n \r\n/// Functional operators for HashMap.\r\nmodule HashMap =\r\n\r\n    /// Type for caching the Traceable<_> instance for HashMap<_,_>\r\n    type private TraceableInstance<'K, 'V> private() =\r\n        static let trace : Traceable<HashMap<'K, 'V>, HashMapDelta<'K, 'V>> =\r\n            {\r\n                tempty = HashMap.empty\r\n                tcomputeDelta = HashMap.computeDelta\r\n                tapplyDelta = HashMap.applyDelta\r\n                tmonoid = HashMapDelta.monoid\r\n                tprune = None\r\n                tsize = fun s -> s.Store.Count\r\n            }\r\n        static member Instance = trace\r\n\r\n    /// The traceable instance for HashSet.\r\n    let trace<'K, 'V> = TraceableInstance<'K, 'V>.Instance\r\n   \r\n/// Functional operators for IndexList.\r\nmodule IndexList =\r\n\r\n    /// Type for caching the Traceable<_> instance for IndexList<_>\r\n    type private Traceable<'T> private() =\r\n        static let trace : Traceable<IndexList<'T>, IndexListDelta<'T>> =\r\n            {\r\n                tempty = IndexList.empty\r\n                tcomputeDelta = IndexList.computeDelta\r\n                tapplyDelta = IndexList.applyDelta\r\n                tmonoid = IndexListDelta.monoid\r\n                tprune = None\r\n                tsize = fun s -> s.Count\r\n            }\r\n        static member Instance = trace\r\n\r\n    /// The traceable instance for HashSet.\r\n    let trace<'T> = Traceable<'T>.Instance\r\n \r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Runtime.CompilerServices\r\nopen System.Runtime.InteropServices\r\nopen System.Collections\r\nopen System.Collections.Generic\r\n\r\n#nowarn \"9\"\r\n\r\n/// Represents the core interface for all adaptive objects.\r\n/// Contains support for tracking OutOfDate flags, managing in-/outputs \r\n/// and lazy/eager evaluation in the dependency tree.\r\ntype IAdaptiveObject =\r\n\r\n    abstract member Tag : obj with get, set\r\n\r\n    /// Each object can cache a WeakReference pointing to itself.\r\n    /// This is because the system internally needs WeakReferences to IAdaptiveObjects\r\n    abstract member Weak: WeakReference<IAdaptiveObject>\r\n\r\n    /// Used internally to represent the maximal distance from an input\r\n    /// cell in the dependency graph when evaluating inside a transaction.\r\n    abstract member Level: int with get, set\r\n\r\n    ///// Used internally to ensure that AdaptiveObjects are not marked while their value\r\n    ///// is still needed by an evaluation.\r\n    //abstract member ReaderCount: int with get, set\r\n\r\n    /// Allows a specific implementation to evaluate the cell during the change propagation process.\r\n    abstract member Mark: unit -> bool\r\n\r\n    /// Indicates whether the object has been marked. This flag should only be accessed when holding\r\n    /// a lock on the adaptive object.\r\n    abstract member OutOfDate: bool with get, set\r\n\r\n    /// The adaptive outputs for the object. Represented by Weak references to allow for\r\n    /// unused parts of the graph to be garbage collected.\r\n    abstract member Outputs: IWeakOutputSet\r\n\r\n    /// Gets called whenever a current input of the object gets marked\r\n    /// out of date. The first argument represents the Transaction that\r\n    /// causes the object to be marked\r\n    abstract member InputChanged: obj * IAdaptiveObject -> unit\r\n\r\n    /// Gets called after all inputs of the object have been processed\r\n    /// and directly before the object will be marked\r\n    abstract member AllInputsProcessed: obj -> unit\r\n\r\n    /// Indicates whether the IAdaptiveObject is constant\r\n    abstract member IsConstant : bool\r\n\r\n/// Represents a set of outputs for an AdaptiveObject. The references to all \r\n/// contained elements are weak and the datastructure allows to add/remove entries.\r\n/// the only other functionality is Consume which returns all the (currently alive)\r\n/// entries and clears the set.\r\nand IWeakOutputSet =\r\n\r\n    /// Indicates whether the set is (conservatively) known to be empty.\r\n    abstract member IsEmpty : bool\r\n\r\n    /// Adds a weak reference to the given AdaptiveObject to the set\r\n    /// And returns a boolean indicating whether the obj was new.\r\n    abstract member Add : IAdaptiveObject -> bool\r\n\r\n    /// Removes the reference to the given AdaptiveObject from the set\r\n    /// And returns a boolean indicating whether the obj was removed.\r\n    abstract member Remove : IAdaptiveObject -> bool\r\n\r\n    /// Returns all currenty living entries from the set\r\n    /// And clears its content.\r\n    abstract member Consume : unit -> IAdaptiveObject[]\r\n\r\n\r\n#if FABLE_COMPILER\r\n\r\n/// Represents a set of outputs for an AdaptiveObject. The references to all\r\n/// contained elements are weak and the datastructure allows to add/remove\r\n/// entries. The only other functionality is Consume which returns all the\r\n/// (currently live) entries and clears the set.\r\nand internal WeakOutputSet() =\r\n    static let arrayThreshold = 8\r\n    let mutable cnt = 0\r\n    let mutable data : obj = null //ReferenceHashSet.create<IAdaptiveObject>()\r\n    member x.Add(obj: IAdaptiveObject) = \r\n        if cnt = 0 then \r\n            data <- obj\r\n            cnt <- 1\r\n            true\r\n        elif cnt = 1 then\r\n            if Object.ReferenceEquals(data, obj) then\r\n                false\r\n            else             \r\n                let arr = Array.zeroCreate arrayThreshold\r\n                arr.[0] <- unbox data\r\n                arr.[1] <- obj     \r\n                data <- arr \r\n                cnt <- 2 \r\n                true  \r\n        elif cnt <= arrayThreshold then\r\n            let arr = unbox<IAdaptiveObject[]> data\r\n            let mutable isNew = true\r\n            let mutable i = 0\r\n            while isNew && i < cnt do  \r\n                if Object.ReferenceEquals(arr.[i], obj) then isNew <- false\r\n                i <- i + 1\r\n\r\n            if isNew then\r\n                if cnt < arr.Length then \r\n                    arr.[cnt] <- obj\r\n                    cnt <- cnt + 1\r\n                    true\r\n                else\r\n                    let set = ReferenceHashSet.create<IAdaptiveObject>()     \r\n                    for e in arr do set.Add e |> ignore\r\n                    cnt <- cnt + 1\r\n                    data <- set\r\n                    set.Add obj       \r\n            else\r\n                false\r\n        else\r\n            let set = unbox<HashSet<IAdaptiveObject>> data\r\n            set.Add obj\r\n\r\n    member x.Remove(obj: IAdaptiveObject) =\r\n        if cnt = 0 then \r\n            false\r\n        elif cnt = 1 then\r\n            if Object.ReferenceEquals(data, obj) then \r\n                cnt <- 0\r\n                data <- null\r\n                true\r\n            else\r\n                false\r\n        elif cnt <= arrayThreshold then\r\n            let arr = unbox<IAdaptiveObject[]> data\r\n            let mutable found = false\r\n            let mutable i = 0\r\n            while not found && i < cnt do  \r\n                if Object.ReferenceEquals(arr.[i], obj) then \r\n                    let newCnt = cnt - 1\r\n                    if newCnt = 1 then\r\n                        if i = 0 then data <- arr.[1]\r\n                        else data <- arr.[0]\r\n                    elif i = newCnt then \r\n                        arr.[i] <- Unchecked.defaultof<_>\r\n                    else \r\n                        arr.[i] <- arr.[newCnt]\r\n                        arr.[newCnt] <- Unchecked.defaultof<_>\r\n                    cnt <- newCnt\r\n                    found <- true\r\n                i <- i + 1\r\n            found\r\n        else\r\n            let set = unbox<HashSet<IAdaptiveObject>> data\r\n            if set.Remove obj then\r\n                cnt <- set.Count\r\n                if cnt <= arrayThreshold then\r\n                    data <- Seq.toArray set\r\n                true\r\n            else\r\n                false \r\n\r\n    member x.Consume(): IAdaptiveObject[] = \r\n        if cnt = 0 then \r\n            [||]\r\n        elif cnt = 1 then\r\n            let d = data\r\n            data <- null\r\n            cnt <- 0\r\n            [| unbox d |]  \r\n        elif cnt <= arrayThreshold then\r\n            let arr = unbox<IAdaptiveObject[]> data \r\n            let c = cnt\r\n            data <- null\r\n            cnt <- 0\r\n            if c < arr.Length then Array.take c arr\r\n            else arr      \r\n        else\r\n            let set = unbox<HashSet<IAdaptiveObject>> data\r\n            data <- null\r\n            cnt <- 0\r\n            Seq.toArray set\r\n\r\n    member x.IsEmpty = cnt = 0\r\n\r\n    interface IWeakOutputSet with\r\n        member x.IsEmpty = x.IsEmpty\r\n        member x.Add o = x.Add o\r\n        member x.Remove o = x.Remove o\r\n        member x.Consume() = x.Consume()\r\n#else\r\n\r\n\r\n/// Datastructure for zero-cost casts between different possible representations for WeakOutputSet.\r\n/// We actually did experiments and for huge dependency graphs transactions were ~10% faster \r\n/// than they were when using unbox.\r\nand [<Struct; StructLayout(LayoutKind.Explicit)>] private VolatileSetData =\r\n\r\n    [<FieldOffset(0)>]\r\n    val mutable public Single: WeakReference<IAdaptiveObject>\r\n\r\n    [<FieldOffset(0)>]\r\n    val mutable public Array: WeakReference<IAdaptiveObject>[]\r\n\r\n    [<FieldOffset(0)>]\r\n    val mutable public Set: HashSet<WeakReference<IAdaptiveObject>>\r\n\r\n    [<FieldOffset(8)>]\r\n    val mutable public Tag: int\r\n\r\n\r\n/// Represents a set of outputs for an AdaptiveObject. The references to all\r\n/// contained elements are weak and the datastructure allows to add/remove\r\n/// entries. The only other functionality is Consume which returns all the\r\n/// (currently live) entries and clears the set.\r\nand internal WeakOutputSet() =\r\n    let mutable data = Unchecked.defaultof<VolatileSetData>\r\n    let mutable setOps = 0\r\n\r\n    let add (obj: IAdaptiveObject) =\r\n        let mutable value = Unchecked.defaultof<IAdaptiveObject>\r\n        let weakObj = obj.Weak\r\n        match data.Tag with\r\n        | 0 ->  \r\n            if isNull data.Single then \r\n                data.Single <- weakObj\r\n                true\r\n            elif data.Single = weakObj then\r\n                false\r\n            elif data.Single.TryGetTarget(&value) then\r\n                if Object.ReferenceEquals(value, obj) then\r\n                    false\r\n                else\r\n                    let arr = Array.zeroCreate 8\r\n                    arr.[0] <- data.Single\r\n                    arr.[1] <- weakObj\r\n                    data.Tag <- 1\r\n                    data.Array <- arr\r\n                    true\r\n            else\r\n                data.Single <- weakObj\r\n                true\r\n        | 1 ->\r\n            let mutable freeIndex = -1\r\n            let mutable i = 0\r\n            let len = data.Array.Length\r\n            while i < len do\r\n                if isNull data.Array.[i] then\r\n                    if freeIndex < 0 then freeIndex <- i\r\n                elif data.Array.[i] = weakObj then\r\n                    freeIndex <- -2\r\n                    i <- len\r\n                else\r\n                    if data.Array.[i].TryGetTarget(&value) then\r\n                        if Object.ReferenceEquals(value, obj) then\r\n                            freeIndex <- -2\r\n                            i <- len\r\n                    else\r\n                        if freeIndex < 0 then freeIndex <- i\r\n                i <- i + 1\r\n\r\n            if freeIndex = -2 then\r\n                false\r\n            elif freeIndex >= 0 then\r\n                data.Array.[freeIndex] <- weakObj\r\n                true\r\n            else\r\n                // r cannot be null here (empty index would have been found)\r\n                let all = data.Array |> Array.choose (fun r -> if r.TryGetTarget(&value) then Some r else None)\r\n                let set = HashSet all\r\n                let res = set.Add weakObj\r\n                data.Tag <- 2\r\n                data.Set <- set\r\n                res\r\n        | _ ->\r\n            data.Set.Add weakObj\r\n\r\n    /// Used interally to get rid of leaking WeakReferences\r\n    member x.Cleanup() =\r\n        lock x (fun () ->\r\n            // TODO: better heuristic?\r\n            if setOps > 100 then\r\n                setOps <- 0\r\n                let all = x.Consume()\r\n                for a in all do add a |> ignore\r\n        )\r\n\r\n    /// Adds a weak reference to the given AdaptiveObject to the set\r\n    /// And returns a boolean indicating whether the obj was new.\r\n    member x.Add(obj: IAdaptiveObject) =\r\n        if not obj.IsConstant then\r\n            lock x (fun () ->\r\n                if add obj then\r\n                    setOps <- setOps + 1\r\n                    x.Cleanup()\r\n                    true\r\n                else\r\n                    false\r\n            )\r\n        else\r\n            false\r\n        \r\n    /// Removes the reference to the given AdaptiveObject from the set\r\n    /// And returns a boolean indicating whether the obj was removed.\r\n    member x.Remove(obj: IAdaptiveObject) =\r\n        if not obj.IsConstant then\r\n            lock x (fun () ->\r\n                //let obj = obj.WeakSelf\r\n                let mutable old = Unchecked.defaultof<IAdaptiveObject>\r\n\r\n                match data.Tag with\r\n                | 0 ->  \r\n                    if isNull data.Single then\r\n                        false\r\n                    else\r\n                        if data.Single.TryGetTarget(&old) then\r\n                            if Object.ReferenceEquals(old, obj) then\r\n                                data.Single <- null\r\n                                true\r\n                            else\r\n                                false\r\n                        else\r\n                            data.Single <- null\r\n                            false\r\n                | 1 ->\r\n                    let mutable found = false\r\n                    let mutable i = 0\r\n                    let len = data.Array.Length\r\n                    let mutable count = 0\r\n                    let mutable living = null\r\n                    while i < len do\r\n                        if not (isNull data.Array.[i]) then\r\n                            let ref = data.Array.[i]\r\n                            if ref.TryGetTarget(&old) then\r\n                                if Object.ReferenceEquals(old, obj) then\r\n                                    data.Array.[i] <- null\r\n                                    found <- true\r\n                                else\r\n                                    count <- count + 1\r\n                                    living <- ref\r\n                            else\r\n                                data.Array.[i] <- null\r\n                        i <- i + 1\r\n\r\n                    if count = 0 then\r\n                        data.Tag <- 0\r\n                        data.Single <- null\r\n                    elif count = 1 then\r\n                        data.Tag <- 0\r\n                        data.Single <- living\r\n\r\n                    found\r\n     \r\n                | _ ->  \r\n                    if data.Set.Remove obj.Weak then\r\n                        setOps <- setOps + 1\r\n                        x.Cleanup()\r\n                        true\r\n                    else\r\n                        false\r\n            )\r\n        else\r\n            false\r\n\r\n    /// Returns all currenty living entries from the set\r\n    /// And clears its content.\r\n    member x.Consume(): IAdaptiveObject[] =\r\n        lock x (fun () ->\r\n            let n = data\r\n            data <- Unchecked.defaultof<_>\r\n            setOps <- 0\r\n            match n.Tag with\r\n            | 0 ->  \r\n                if isNull n.Single then \r\n                    [||]\r\n                else \r\n                    match n.Single.TryGetTarget() with\r\n                    | (true, v) -> [| v |]\r\n                    | _ -> [||]\r\n            | 1 ->  \r\n                n.Array |> Array.choose (fun r ->\r\n                    if isNull r then None\r\n                    else \r\n                        match r.TryGetTarget() with\r\n                        | (true, v) -> Some v\r\n                        | _ -> None\r\n                )\r\n            | _ ->\r\n                let mutable cnt = 0\r\n                let mutable arr = Array.zeroCreate n.Set.Count\r\n                let mutable o = Unchecked.defaultof<_>\r\n                for r in n.Set do\r\n                    if r.TryGetTarget(&o) then\r\n                        arr.[cnt] <- o\r\n                        cnt <- cnt + 1\r\n                if cnt < arr.Length then Array.Resize(&arr, cnt)\r\n                arr\r\n        )\r\n\r\n    /// Indicates whether the set is (conservatively) known to be empty.\r\n    /// Note that we don't dereference any WeakReferences here.\r\n    member x.IsEmpty =\r\n        match data.Tag with\r\n        | 0 -> isNull data.Single\r\n        | _ -> false\r\n\r\n    interface IWeakOutputSet with\r\n        member x.IsEmpty = x.IsEmpty\r\n        member x.Add o = x.Add o\r\n        member x.Remove o = x.Remove o\r\n        member x.Consume() = x.Consume()\r\n\r\n#endif\r\n\r\nand internal EmptyOutputSet() =\r\n    static let emptyArray : IAdaptiveObject[] = Array.zeroCreate 0\r\n    interface IWeakOutputSet with\r\n        member x.IsEmpty = true\r\n        member x.Add _ = false\r\n        member x.Remove _ = false\r\n        member x.Consume() = emptyArray\r\n    \r\n\r\n/// Supporting operations for the WeakOutputSet type.\r\nmodule internal WeakOutputSet =\r\n    /// Creates a new empty WeakOutputSet\r\n    let inline create () = WeakOutputSet()\r\n\r\n    /// Adds a weak reference to the given AdaptiveObject to the set\r\n    /// and returns a boolean indicating whether the obj was new.\r\n    let inline add (o: IAdaptiveObject) (set: WeakOutputSet) =\r\n        set.Add o\r\n\r\n    /// Removes the reference to the given AdaptiveObject from the set\r\n    /// and returns a boolean indicating whether the obj was removed.\r\n    let inline remove (o: IAdaptiveObject) (set: WeakOutputSet) =\r\n        set.Remove o\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Collections.Generic\r\n\r\n[<AutoOpen>]\r\nmodule internal HeapExtensions =\r\n\r\n    /// Swaps the given elements inside the list.\r\n    let inline private swap (heap: List<'T>) (l: int) (r: int) =\r\n        let t = heap.[l]\r\n        heap.[l] <- heap.[r]\r\n        heap.[r] <- t\r\n\r\n    /// Moves an element in the list 'up' in heap-order.\r\n    /// Assumes that the list is in heap-order except for the given element.\r\n    let rec private bubbleUp (heap: List<'T>) (compare: OptimizedClosures.FSharpFunc<'T, 'T, int>) (i: int) (v: 'T) =\r\n        if i > 0 then\r\n            let pi = (i - 1) >>> 1\r\n            let pe = heap.[pi]\r\n\r\n            if compare.Invoke(pe, v) > 0 then\r\n                swap heap pi i\r\n                bubbleUp heap compare pi v\r\n                \r\n    /// Moves an element in the list 'down' in heap-order.\r\n    /// Assumes that the list is in heap-order except for the given element.\r\n    let rec private pushDown (heap: List<'T>) (compare: OptimizedClosures.FSharpFunc<'T, 'T, int>) (i: int) (v: 'T) =\r\n        let li = (i <<< 1) + 1\r\n        let ri = li + 1\r\n\r\n        let cl = if li < heap.Count then compare.Invoke(v, heap.[li]) <= 0 else true\r\n        let cr = if ri < heap.Count then compare.Invoke(v, heap.[ri]) <= 0 else true\r\n\r\n        if cl && not cr then\r\n            swap heap ri i\r\n            pushDown heap compare ri v\r\n\r\n        elif not cl && cr then\r\n            swap heap li i\r\n            pushDown heap compare li v\r\n\r\n        elif not cl && not cr then\r\n            let c = compare.Invoke(heap.[li], heap.[ri])\r\n            if c < 0 then\r\n                swap heap li i\r\n                pushDown heap compare li v\r\n            else\r\n                swap heap ri i\r\n                pushDown heap compare ri v\r\n         \r\n    type List<'T> with\r\n        /// Enqueues an element  to the list in heap-order.\r\n        member x.HeapEnqueue(compare: OptimizedClosures.FSharpFunc<'T, 'T, int>, value: 'T): unit =\r\n            let index = x.Count\r\n            x.Add value\r\n            bubbleUp x compare index value\r\n            \r\n        /// Enqueues an element to the list in heap-order.\r\n        member x.HeapEnqueue(compare: 'T -> 'T -> int, value: 'T): unit =\r\n            let compare = OptimizedClosures.FSharpFunc<'T, 'T, int>.Adapt(compare)\r\n            x.HeapEnqueue(compare, value)\r\n            \r\n        /// Dequeues the smallest element from the heap-order list.\r\n        member x.HeapDequeue(compare: OptimizedClosures.FSharpFunc<'T, 'T, int>): 'T =\r\n            if x.Count = 0 then raise <| ArgumentException(\"heap empty\")\r\n            let result = x.[0]\r\n            let li = x.Count - 1\r\n            let l = x.[li]\r\n            x.[0] <- l\r\n            x.RemoveAt li\r\n            pushDown x compare 0 l\r\n            result\r\n\r\n        /// Dequeues the smallest element from the heap-order list.\r\n        member x.HeapDequeue(compare: 'T -> 'T -> int) =\r\n            let compare = OptimizedClosures.FSharpFunc<'T, 'T, int>.Adapt(compare)\r\n            x.HeapDequeue(compare)\r\n\r\n\r\n[<AutoOpen>]\r\nmodule internal ReferenceEqualityOperators =\r\n\r\n    /// Gets a reference-hashcode\r\n    let inline refhash<'T when 'T: not struct> (obj: 'T) =\r\n        System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode (obj :> obj)\r\n\r\n    /// Determines whether the given objects are reference equal\r\n    let inline refequal<'T when 'T: not struct> (l: 'T) (r: 'T) =\r\n        Object.ReferenceEquals(l :> obj, r :> obj)\r\n\r\n    /// Determines whether the given objects are reference equal\r\n    let inline (==) (l: 'T) (r: 'T) = refequal l r\r\n\r\n    /// Determines whether the given objects are not reference equal\r\n    let inline (!=) (l: 'T) (r: 'T) = not (refequal l r)\r\n\r\n#if !FABLE_COMPILER\r\n[<AutoOpen>]\r\nmodule internal InterlockedExtensions =\r\n\r\n    type System.Threading.Interlocked with\r\n        /// Changes the byref by applying the given function in a thread-safe way. \r\n        /// NOTE that the function might be evaluated multiple times.\r\n        static member Change(location: byref<'T>, f: 'T -> 'T) =\r\n            let mutable initial = location\r\n            let mutable computed = f initial\r\n\r\n            while Interlocked.CompareExchange(&location, computed, initial) != initial do\r\n                initial <- location\r\n                computed <- f initial\r\n\r\n            computed\r\n#endif\r\n\r\n\r\n[<AutoOpen>]\r\nmodule internal CheapEquality =\r\n    open FSharp.Reflection\r\n    open System.Collections.Generic\r\n    open System.Runtime.CompilerServices\r\n\r\n    #if FABLE_COMPILER\r\n    let cheapHash (a : 'T) = Unchecked.hash a\r\n    let cheapEqual (a : 'T) (b : 'T) = Unchecked.equals a b\r\n    #else\r\n    type private CheapEquality<'T> private() =\r\n\r\n        static let comparer =\r\n            let typ = typeof<'T>\r\n\r\n            // TODO: any reasonable ideas?\r\n            if FSharpType.IsRecord typ || FSharpType.IsUnion typ || FSharpType.IsTuple typ then\r\n                EqualityComparer<'T>.Default\r\n\r\n            elif not typ.IsValueType then\r\n                { new EqualityComparer<'T>() with \r\n                    member x.GetHashCode(o : 'T) = RuntimeHelpers.GetHashCode o\r\n                    member x.Equals(a : 'T, b : 'T) = Object.ReferenceEquals(a, b)\r\n                }\r\n\r\n            else \r\n                EqualityComparer<'T>.Default\r\n\r\n\r\n        static member Comparer = comparer\r\n\r\n    let cheapHash (a : 'T) = CheapEquality<'T>.Comparer.GetHashCode a\r\n    let cheapEqual (a : 'T) (b : 'T) = CheapEquality<'T>.Comparer.Equals(a, b)\r\n    #endif \r\n\r\nmodule internal Unchecked =\r\n    let inline isNull<'T when 'T : not struct> (value : 'T) =\r\n        isNull (value :> obj)\r\n\r\n[<AutoOpen>]\r\nmodule internal Failures =\r\n    let inline unexpected() = failwith \"[Adaptive] encountered an invalid state\"\r\n\r\n\r\n\r\n[<AutoOpen>]\r\nmodule internal AdaptiveIndexListHelpers = \r\n    open System\r\n    open System.Collections.Generic\r\n\r\n    let inline combineHash (a: int) (b: int) =\r\n        uint32 a ^^^ uint32 b + 0x9e3779b9u + ((uint32 a) <<< 6) + ((uint32 a) >>> 2) |> int\r\n\r\n    [<Struct; CustomEquality; CustomComparison>]\r\n    type UCmp<'a>(compare : OptimizedClosures.FSharpFunc<'a, 'a, int>, value : 'a) =\r\n\r\n        member x.Value = value\r\n\r\n        override x.GetHashCode() = Unchecked.hash value\r\n        override x.Equals o =\r\n            #if ADAPTIVE_NO_TYPE_TESTS\r\n            let o = unbox<UCmp<'a>> o\r\n            Unchecked.equals value o.Value\r\n            #else\r\n            match o with\r\n            | :? UCmp<'a> as o -> Unchecked.equals value o.Value\r\n            | _ -> false\r\n            #endif\r\n            \r\n        member x.CompareTo(o : UCmp<'a>) = compare.Invoke(value, o.Value)\r\n\r\n        #if !FABLE_COMPILER\r\n        interface IComparable<UCmp<'a>> with\r\n            member x.CompareTo(o) = compare.Invoke(value, o.Value)\r\n        #endif\r\n\r\n\r\n        interface IComparable with\r\n            member x.CompareTo(o) =\r\n                #if ADAPTIVE_NO_TYPE_TESTS\r\n                let o = unbox<UCmp<'a>> o\r\n                compare.Invoke(value, o.Value)\r\n                #else\r\n                match o with\r\n                | :? UCmp<'a> as o -> compare.Invoke(value, o.Value)\r\n                | _ -> 0\r\n                #endif\r\n\r\n    type IndexMapping<'k when 'k : comparison>() =\r\n        let mutable store = MapExt.empty<'k, Index>\r\n\r\n        member x.Invoke(k : 'k) =\r\n            let (left, self, right) = MapExt.neighbours k store\r\n            match self with\r\n                | Some(_, i) -> \r\n                    i \r\n                | None ->\r\n                    let result = \r\n                        match left, right with\r\n                        | None, None                -> Index.after Index.zero\r\n                        | Some(_,l), None           -> Index.after l\r\n                        | None, Some(_,r)           -> Index.before r\r\n                        | Some (_,l), Some(_,r)     -> Index.between l r\r\n\r\n                    store <- MapExt.add k result store\r\n                    result\r\n\r\n        member x.Revoke(k : 'k) =\r\n            match MapExt.tryRemove k store with\r\n            | Some(i, rest) ->\r\n                store <- rest\r\n                Some i\r\n            | None -> \r\n                None\r\n\r\n        member x.Clear() =\r\n            store <- MapExt.empty\r\n            \r\n    type CustomIndexMapping<'k>(cmp : OptimizedClosures.FSharpFunc<'k, 'k, int>) =\r\n        let mutable store = MapExt.empty<UCmp<'k>, Index>\r\n\r\n        member x.Invoke(k : 'k) =\r\n            let k = UCmp(cmp, k)\r\n            let (left, self, right) = MapExt.neighbours k store\r\n            match self with\r\n                | Some(_, i) -> \r\n                    i \r\n                | None ->\r\n                    let result = \r\n                        match left, right with\r\n                        | None, None                -> Index.after Index.zero\r\n                        | Some(_,l), None           -> Index.after l\r\n                        | None, Some(_,r)           -> Index.before r\r\n                        | Some (_,l), Some(_,r)     -> Index.between l r\r\n\r\n                    store <- MapExt.add k result store\r\n                    result\r\n\r\n        member x.Revoke(k : 'k) =\r\n            let k = UCmp(cmp, k)\r\n            match MapExt.tryRemove k store with\r\n            | Some(i, rest) ->\r\n                store <- rest\r\n                Some i\r\n            | None -> \r\n                None\r\n\r\n        member x.Clear() =\r\n            store <- MapExt.empty\r\n\r\n        new(compare : 'k -> 'k -> int) =\r\n            CustomIndexMapping(OptimizedClosures.FSharpFunc<_,_,_>.Adapt compare)\r\n\r\n    type IndexCache<'a, 'b>(f : Index -> 'a -> 'b, release : 'b -> unit) =\r\n        let store = UncheckedDictionary.create<Index, 'a * 'b>()\r\n\r\n        member x.InvokeAndGetOld(i : Index, a : 'a) =\r\n            match store.TryGetValue(i) with\r\n                | (true, (oa, old)) ->\r\n                    if Unchecked.equals oa a then\r\n                        None, old\r\n                    else\r\n                        let res = f i a\r\n                        store.[i] <- (a, res)\r\n                        Some old, res\r\n                | _ ->\r\n                    let res = f i a\r\n                    store.[i] <- (a, res)\r\n                    None, res       \r\n                                        \r\n        member x.Revoke(i : Index) =\r\n            match store.TryGetValue i with\r\n                | (true, (oa,ob)) -> \r\n                    store.Remove i |> ignore\r\n                    release ob\r\n                    Some ob\r\n                | _ -> \r\n                    None \r\n\r\n        member x.Clear() =\r\n            store.Values |> Seq.iter (snd >> release)\r\n            store.Clear()\r\n\r\n        new(f : Index -> 'a -> 'b) = IndexCache(f, ignore)\r\n\r\n    type Unique<'b when 'b : comparison>(value : 'b) =\r\n        static let mutable currentId = 0\r\n        static let newId() = \r\n            #if FABLE_COMPILER\r\n            let v = currentId in currentId <- v + 1; v\r\n            #else \r\n            System.Threading.Interlocked.Increment(&currentId)\r\n            #endif\r\n\r\n        let id = newId()\r\n\r\n        member x.Value = value\r\n        member private x.Id = id\r\n\r\n        override x.ToString() = value.ToString()\r\n\r\n        override x.GetHashCode() = combineHash(Unchecked.hash value) id\r\n        override x.Equals o =\r\n            #if ADAPTIVE_NO_TYPE_TESTS\r\n            let o = unbox<Unique<'b>> o\r\n            Unchecked.equals value o.Value && id = o.Id\r\n            #else\r\n            match o with\r\n            | :? Unique<'b> as o -> Unchecked.equals value o.Value && id = o.Id\r\n            | _ -> false\r\n            #endif\r\n\r\n        interface IComparable with\r\n            member x.CompareTo o =\r\n                #if ADAPTIVE_NO_TYPE_TESTS\r\n                let o = unbox<Unique<'b>> o\r\n                let c = compare value o.Value\r\n                if c = 0 then compare id o.Id\r\n                else c\r\n                #else\r\n                match o with\r\n                | :? Unique<'b> as o ->\r\n                    let c = compare value o.Value\r\n                    if c = 0 then compare id o.Id\r\n                    else c\r\n                | _ ->\r\n                    failwith \"uncomparable\"\r\n                #endif\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Collections.Generic\r\nopen System.Runtime.CompilerServices\r\n\r\n[<AutoOpen>]\r\nmodule internal LockingExtensions =\r\n    type IAdaptiveObject with\r\n        /// Acquires a write-lock to an AdaptiveObject\r\n        member inline o.EnterWrite() =\r\n            Monitor.Enter o\r\n            //while o.ReaderCount > 0 do\r\n            //    Monitor.Wait o |> ignore\r\n            \r\n        /// Releases the write-lock to the AdaptiveObject\r\n        member inline o.ExitWrite() =\r\n            Monitor.Exit o\r\n        \r\n        /// Determines whether the object is locked and out-of-date\r\n        member inline o.IsOutdatedCaller() =\r\n            Monitor.IsEntered o && o.OutOfDate\r\n\r\n/// When evaluating AdaptiveObjects inside a Transaction \r\n/// (aka eager evaluation) their level might be inconsistent when\r\n/// attempting to evaluate. Therefore the evaluation may raise\r\n/// this exception causing the evaluation to be delayed to a later\r\n/// time in the Transaction.\r\nexception LevelChangedException of \r\n    /// The new level for the top-level object.\r\n    newLevel : int\r\n\r\n\r\n/// Holds a set of adaptive objects which have been changed and shall\r\n/// therefore be marked as outOfDate. Committing the transaction propagates\r\n/// these changes into the dependency-graph, takes care of the correct\r\n/// execution-order and acquires appropriate locks for all objects affected.\r\ntype Transaction() =\r\n\r\n    // Each thread may have its own running transaction\r\n    [<ThreadStatic; DefaultValue>]\r\n    static val mutable private RunningTransaction : option<Transaction>\r\n\r\n    [<ThreadStatic; DefaultValue>]\r\n    static val mutable private CurrentTransaction : option<Transaction>\r\n\r\n    // We use a duplicate-queue here since we expect levels to be identical quite often\r\n    let q = DuplicatePriorityQueue<IAdaptiveObject, int>(fun o -> o.Level)\r\n\r\n    // The contained set is useful for determinig if an element has\r\n    // already been enqueued\r\n    let contained = UncheckedHashSet.create<IAdaptiveObject>()\r\n    let mutable current : IAdaptiveObject = Unchecked.defaultof<_>\r\n    let currentLevel = ref 0\r\n    let mutable finalizers : list<unit -> unit> = []\r\n\r\n    let runFinalizers () =\r\n        #if FABLE_COMPILER \r\n        let fs = let v = finalizers in finalizers <- []; v\r\n        #else\r\n        let fs = Interlocked.Exchange(&finalizers, [])\r\n        #endif\r\n        for f in fs do f()\r\n        \r\n    member x.AddFinalizer (f : unit->unit) =\r\n        #if FABLE_COMPILER \r\n        finalizers <- f :: finalizers\r\n        #else\r\n        Interlocked.Change(&finalizers, (fun a -> f::a) ) |> ignore\r\n        #endif\r\n\r\n    member x.IsContained e = contained.Contains e\r\n\r\n    /// Gets or sets the transaction currently running on this thread (if any)\r\n    static member Running\r\n        with get() = Transaction.RunningTransaction\r\n        and internal set r = Transaction.RunningTransaction <- r\r\n\r\n    /// Gets or sets the transaction currently being built on this thread (via transact (fun () -> ...))\r\n    static member Current\r\n        with get() = Transaction.CurrentTransaction\r\n        and internal set r = Transaction.CurrentTransaction <- r\r\n\r\n    /// Indicates if inside a running Transaction\r\n    static member HasRunning =\r\n        Transaction.RunningTransaction.IsSome\r\n       \r\n    /// Gets the level of the currently running Transaction or\r\n    /// Int32.MaxValue when no Transaction is running\r\n    static member RunningLevel =\r\n        match Transaction.RunningTransaction with\r\n            | Some t -> t.CurrentLevel\r\n            | _ -> Int32.MaxValue - 1\r\n\r\n    /// Gets the current Level the Transaction operates on\r\n    member x.CurrentLevel = !currentLevel\r\n\r\n    /// Enqueues an adaptive object for marking\r\n    member x.Enqueue(e : IAdaptiveObject) =\r\n        if contained.Add e then\r\n            q.Enqueue e\r\n\r\n    /// Gets the current AdaptiveObject being marked\r\n    member x.CurrentAdapiveObject = \r\n        if Unchecked.isNull current then None\r\n        else Some current\r\n\r\n    /// Performs the entire marking process, causing all affected objects to\r\n    /// be made consistent with the enqueued changes.\r\n    member x.Commit() =\r\n\r\n        // cache the currently running transaction (if any)\r\n        // and make ourselves current.\r\n        let old = Transaction.RunningTransaction\r\n        Transaction.RunningTransaction <- Some x\r\n        let mutable level = 0\r\n        \r\n        let mutable markCount = 0\r\n        let mutable traverseCount = 0\r\n        let mutable levelChangeCount = 0\r\n        let mutable outputs = [||]\r\n        while q.Count > 0 do\r\n            // dequeue the next element (having the minimal level)\r\n            let e = q.Dequeue(currentLevel)\r\n            current <- e\r\n\r\n            traverseCount <- traverseCount + 1\r\n\r\n            // since we're about to access the outOfDate flag\r\n            // for this object we must acquire a lock here.\r\n            // Note that the transaction will at most hold one\r\n            // lock at a time.\r\n            if e.IsOutdatedCaller() then\r\n                e.AllInputsProcessed(x)\r\n\r\n            else\r\n                e.EnterWrite()\r\n                try\r\n                    // if the element is already outOfDate we\r\n                    // do not traverse the graph further.\r\n                    if e.OutOfDate then\r\n                        e.AllInputsProcessed(x)\r\n                    else\r\n                        // if the object's level has changed since it\r\n                        // was added to the queue we re-enqueue it with the new level\r\n                        // Note that this may of course cause runtime overhead and\r\n                        // might even change the asymptotic runtime behaviour of the entire\r\n                        // system in the worst case but we opted for this approach since\r\n                        // it is relatively simple to implement.\r\n                        if !currentLevel <> e.Level then\r\n                            q.Enqueue e\r\n                        else\r\n                            // however if the level is consistent we may proceed\r\n                            // by marking the object as outOfDate\r\n                            e.OutOfDate <- true\r\n                            e.AllInputsProcessed(x)\r\n                            markCount <- markCount + 1\r\n                \r\n                            try \r\n                                // here mark and the callbacks are allowed to evaluate\r\n                                // the adaptive object but must expect any call to AddOutput to \r\n                                // raise a LevelChangedException whenever a level has been changed\r\n                                if e.Mark() then\r\n                                    // if everything succeeded we return all current outputs\r\n                                    // which will cause them to be enqueued \r\n                                    outputs <- e.Outputs.Consume()\r\n\r\n                                else\r\n                                    e.OutOfDate <- false\r\n                                    outputs <- [||]\r\n                                    // if Mark told us not to continue we're done here\r\n                                    ()\r\n\r\n                            with LevelChangedException newLevel ->\r\n                                // if the level was changed either by a callback\r\n                                // or Mark we re-enqueue the object with the new level and\r\n                                // mark it upToDate again (since it would otherwise not be processed again)\r\n                                e.Level <- max e.Level newLevel\r\n                                e.OutOfDate <- false\r\n\r\n                                levelChangeCount <- levelChangeCount + 1\r\n\r\n                                q.Enqueue e\r\n                \r\n                finally \r\n                    e.ExitWrite()\r\n\r\n                // finally we enqueue all returned outputs\r\n                for i in 0 .. outputs.Length - 1 do\r\n                    let o = outputs.[i]\r\n                    o.InputChanged(x, e)\r\n                    x.Enqueue o\r\n\r\n            contained.Remove e |> ignore\r\n            current <- Unchecked.defaultof<_>\r\n            \r\n        // when the commit is over we restore the old\r\n        // running transaction (if any)\r\n        Transaction.RunningTransaction <- old\r\n        currentLevel := 0\r\n\r\n    /// Disposes the transaction running all of its \"Finalizers\"\r\n    member x.Dispose() = \r\n        runFinalizers()\r\n\r\n    interface IDisposable with\r\n        member x.Dispose() = x.Dispose()\r\n\r\n/// Module for transaction related functions. (e.g. transact)\r\n[<AutoOpen>]\r\nmodule Transaction =\r\n    /// Returns the currently running transaction or (if none)\r\n    /// the current transaction for the calling thread\r\n    let getCurrentTransaction() =\r\n        match Transaction.Running with\r\n        | Some r -> Some r\r\n        | None ->\r\n            match Transaction.Current with\r\n            | Some c -> Some c\r\n            | None -> None\r\n\r\n    let using (t : Transaction) (action : unit -> 'T) =\r\n        let old = Transaction.Current\r\n        try\r\n            Transaction.Current <- Some t\r\n            action()\r\n        finally\r\n            Transaction.Current <- old\r\n\r\n    let inline internal useCurrent (t : Transaction) (action : unit -> 'T) =\r\n        let old = Transaction.Current\r\n        try\r\n            Transaction.Current <- Some t\r\n            action()\r\n        finally\r\n            Transaction.Current <- old\r\n\r\n    /// Executes a function \"inside\" a newly created\r\n    /// transaction and commits the transaction\r\n    let transact (action : unit -> 'T) =\r\n        use t = new Transaction()\r\n        let r = useCurrent t action\r\n        t.Commit()\r\n        r\r\n            \r\n    \r\n\r\n    // Defines some extension utilites for IAdaptiveObjects\r\n    type IAdaptiveObject with\r\n        /// Utility for marking adaptive object as outOfDate.\r\n        /// Note that this function will actually enqueue the\r\n        /// object to the current transaction and will fail if\r\n        /// no current transaction can be found.\r\n        /// However objects which are already outOfDate might\r\n        /// also be \"marked\" when not having a current transaction.\r\n        member x.MarkOutdated () =\r\n            match getCurrentTransaction() with\r\n                | Some t -> t.Enqueue(x)\r\n                | None -> \r\n                    lock x (fun () -> \r\n                        if x.OutOfDate then ()\r\n                        elif x.Outputs.IsEmpty then x.OutOfDate <- true\r\n                        else failwith \"cannot mark object without transaction\"\r\n                    )\r\n                    \r\n        /// Utility for marking adaptive object as outOfDate.\r\n        /// Note that this function will actually enqueue the\r\n        /// object to the current transaction and will fail if\r\n        /// no current transaction can be found.\r\n        /// However objects which are already outOfDate might\r\n        /// Also be \"marked\" when not having a current transaction.\r\n        member x.MarkOutdated (fin : unit -> unit) =\r\n            match getCurrentTransaction() with\r\n                | Some t -> \r\n                    t.Enqueue(x)\r\n                    t.AddFinalizer(fin)\r\n                | None -> \r\n                    lock x (fun () -> \r\n                        if x.OutOfDate then ()\r\n                        elif x.Outputs.IsEmpty then x.OutOfDate <- true\r\n                        else failwith \"cannot mark object without transaction\"\r\n                    )\r\n                    fin()\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\n\r\n/// Core implementation of IAdaptiveObject containing tools for evaluation\r\n/// and locking\r\n[<AbstractClass>]\r\ntype AdaptiveObject() =\r\n    \r\n    [<DefaultValue; ThreadStatic>]\r\n    static val mutable private CurrentEvaluationDepth : int\r\n\r\n    let mutable outOfDate : bool = true\r\n    let mutable level: int = 0\r\n    let mutable outputs : WeakOutputSet = WeakOutputSet()\r\n    let mutable weak : WeakReference<IAdaptiveObject> = null\r\n    let mutable tag : obj = null\r\n\r\n\r\n    /// Used for resetting EvaluationDepth in eager evaluation\r\n    static member internal UnsafeEvaluationDepth\r\n        with get() = AdaptiveObject.CurrentEvaluationDepth\r\n        and set v = AdaptiveObject.CurrentEvaluationDepth <- v\r\n\r\n    /// Utility function for evaluating an object even if it is not marked as outOfDate.\r\n    /// This method takes care of appropriate locking\r\n    member x.EvaluateAlways (token : AdaptiveToken) (f : AdaptiveToken -> 'T) =\r\n        let caller = token.caller\r\n        let depth = AdaptiveObject.CurrentEvaluationDepth\r\n\r\n        let mutable res = Unchecked.defaultof<_>\r\n        token.EnterRead x\r\n\r\n        try\r\n            AdaptiveObject.CurrentEvaluationDepth <- depth + 1\r\n\r\n            // this evaluation is performed optimistically\r\n            // meaning that the \"top-level\" object needs to be allowed to\r\n            // pull at least one value on every path.\r\n            // This property must therefore be maintained for every\r\n            // path in the entire system.\r\n            let r = f(token.WithCaller x)\r\n            x.OutOfDate <- false\r\n\r\n            // if the object's level just got greater than or equal to\r\n            // the level of the running transaction (if any)\r\n            // we raise an exception since the evaluation\r\n            // could be inconsistent atm.\r\n            // the only exception to that is the top-level object itself\r\n            let maxAllowedLevel =\r\n                if depth > 1 then Transaction.RunningLevel - 1\r\n                else Transaction.RunningLevel\r\n\r\n            if x.Level > maxAllowedLevel then\r\n                //printfn \"%A tried to pull from level %A but has level %A\" top.Id level top.Level\r\n                // all greater pulls would be from the future\r\n                raise <| LevelChangedException(x.Level + depth)\r\n                                                                     \r\n            res <- r\r\n\r\n            if not (Unchecked.isNull caller) then\r\n                outputs.Add caller |> ignore\r\n                caller.Level <- max caller.Level (x.Level + 1)\r\n\r\n        with _ ->\r\n            AdaptiveObject.CurrentEvaluationDepth <- depth\r\n            token.ExitFaultedRead x\r\n            reraise()\r\n                \r\n        AdaptiveObject.CurrentEvaluationDepth <- depth\r\n        // downgrade to read\r\n        token.Downgrade x\r\n\r\n        if Unchecked.isNull caller then\r\n            token.Release()\r\n\r\n        res\r\n\r\n    /// Utility function for evaluating an object if it is marked as outOfDate.\r\n    /// If the object is actually outOfDate the given function is executed and otherwise\r\n    /// The given default value is returned. This method takes care of appropriate locking\r\n    member inline x.EvaluateIfNeeded (token : AdaptiveToken) (otherwise : 'T) (f : AdaptiveToken -> 'T) =\r\n        x.EvaluateAlways token (fun token ->\r\n            if x.OutOfDate then \r\n                f token\r\n            else\r\n                otherwise\r\n        )\r\n\r\n    /// See IAdaptiveObject.Weak\r\n    member x.Weak =\r\n        // Note that we accept the race conditon here since locking the object\r\n        // would potentially cause deadlocks and the worst case is, that we\r\n        // create two different WeakReferences for the same object\r\n        let w = weak\r\n        if isNull w then\r\n            let w = WeakReference<_>(x :> IAdaptiveObject)\r\n            weak <- w\r\n            w\r\n        else\r\n            w\r\n            \r\n    /// See IAdaptiveObject.OutOfDate\r\n    member x.OutOfDate\r\n        with get() = outOfDate\r\n        and set o = outOfDate <- o\r\n        \r\n    /// See IAdaptiveObject.Level\r\n    member x.Level\r\n        with get() = level\r\n        and set l = level <- l\r\n        \r\n    /// See IAdaptiveObject.Outputs\r\n    member x.Outputs = outputs :> IWeakOutputSet\r\n    \r\n    /// See IAdaptiveObject.Mark()\r\n    abstract MarkObject : unit -> bool\r\n    default x.MarkObject() = true\r\n    \r\n    /// See IAdaptiveObject.AllInputsProcessed(transaction)\r\n    abstract AllInputProcessedObject : obj -> unit\r\n    default x.AllInputProcessedObject _ = ()\r\n    \r\n    /// See IAdaptiveObject.InputChanged(transaction, object)\r\n    abstract InputChangedObject : obj * IAdaptiveObject -> unit\r\n    default x.InputChangedObject(_,_) = ()\r\n\r\n    member x.Tag\r\n        with get() = tag\r\n        and set t = tag <- t\r\n\r\n    interface IAdaptiveObject with\r\n        member x.IsConstant = false\r\n        member x.Weak = x.Weak\r\n        member x.Outputs = x.Outputs\r\n        member x.Mark() = x.MarkObject()\r\n        member x.AllInputsProcessed(t) = x.AllInputProcessedObject(t)\r\n        member x.InputChanged(t, o) = x.InputChangedObject(t, o)\r\n        \r\n        member x.Tag\r\n            with get() = x.Tag\r\n            and set o = x.Tag <- o\r\n\r\n        member x.OutOfDate\r\n            with get() = x.OutOfDate\r\n            and set o = x.OutOfDate <- o\r\n\r\n        member x.Level\r\n            with get() = x.Level\r\n            and set l = x.Level <- l\r\n        \r\n   \r\n/// Core implementation of IAdaptiveObject for constant objects.\r\n/// The main goal of this implementation is to save memory when IAdaptiveObjects are known to be constant.\r\ntype ConstantObject() =\r\n    let mutable weak : WeakReference<IAdaptiveObject> = null\r\n    static let outputs = EmptyOutputSet() :> IWeakOutputSet\r\n\r\n    interface IAdaptiveObject with\r\n        member x.Tag\r\n            with get() = null\r\n            and set _ = ()\r\n\r\n        member x.IsConstant = true\r\n        member x.Weak =\r\n            // Note that we accept the race conditon here since locking the object\r\n            // would potentially cause deadlocks and the worst case is, that we\r\n            // create two different WeakReferences for the same object\r\n            let w = weak\r\n            if isNull w then\r\n                let w = WeakReference<_>(x :> IAdaptiveObject)\r\n                weak <- w\r\n                w\r\n            else\r\n                w\r\n        member x.Outputs = outputs\r\n        member x.Mark() = false\r\n        member x.AllInputsProcessed(_) = ()\r\n        member x.InputChanged(_, _) = ()\r\n\r\n        member x.OutOfDate\r\n            with get() = false\r\n            and set o = ()\r\n\r\n        member x.Level\r\n            with get() = 0\r\n            and set l = ()","﻿namespace FSharp.Data.Traceable\r\n\r\nopen System\r\nopen FSharp.Data.Adaptive\r\n\r\n\r\n/// An adaptive reader that allows to get operations since the last evaluation\r\ntype IOpReader<'Delta> =\r\n    inherit IAdaptiveObject\r\n\r\n    /// Dependency-aware evaluation of the reader\r\n    abstract member GetChanges: AdaptiveToken -> 'Delta\r\n\r\n/// An adaptive reader thath allows to get operations and also exposes its current state.\r\n[<Interface>]\r\ntype IOpReader<'State, 'Delta> =\r\n    inherit IOpReader<'Delta>\r\n\r\n    /// The latest state of the Reader.\r\n    /// Note that the state gets updated after each evaluation (GetChanges)\r\n    abstract member State: 'State\r\n\r\n/// Abstract base class for implementing IOpReader<_>\r\n[<AbstractClass>]\r\ntype AbstractReader<'Delta>(empty: 'Delta) =\r\n    inherit AdaptiveObject()\r\n    \r\n    /// Adaptively compute deltas.\r\n    abstract member Compute: AdaptiveToken -> 'Delta\r\n\r\n    /// Applies the delta to the current state and returns the 'effective' delta.\r\n    abstract member Apply: 'Delta -> 'Delta\r\n    default x.Apply o = o\r\n    \r\n    /// Adaptively get the latest deltas (or empty if up-to-date).\r\n    member x.GetChanges(token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun token ->\r\n            if x.OutOfDate then\r\n                x.Compute token |> x.Apply\r\n            else\r\n                empty\r\n        )   \r\n\r\n    interface IOpReader<'Delta> with\r\n        member x.GetChanges c = x.GetChanges c\r\n\r\n/// Abstract base class for implementing IOpReader<_,_>\r\n[<AbstractClass>]\r\ntype AbstractReader<'State, 'Delta>(t: Traceable<'State, 'Delta>) =\r\n    inherit AbstractReader<'Delta>(t.tmonoid.mempty)\r\n\r\n    let mutable state = t.tempty\r\n\r\n    /// Applies the delta to the current state and returns the 'effective' delta.\r\n    override x.Apply o =\r\n        let (s, o) = t.tapplyDelta state o\r\n        state <- s\r\n        o\r\n\r\n    /// The reader's current content.\r\n    member x.State = state\r\n\r\n    interface IOpReader<'State, 'Delta> with\r\n        member x.State = state\r\n\r\n/// Abstract base class for implementing IOpReader<_> when dirty inputs are needed on evaluation.\r\n[<AbstractClass>]\r\ntype AbstractDirtyReader<'T, 'Delta when 'T :> IAdaptiveObject>(t: Monoid<'Delta>, take : obj -> bool) =\r\n    inherit AdaptiveObject()\r\n\r\n    let dirty = ref <| UncheckedHashSet.create<'T>()\r\n\r\n    override x.InputChangedObject(_, o) =\r\n        #if FABLE_COMPILER\r\n        if take o.Tag then dirty.Value.Add (unbox<'T> o) |> ignore\r\n        #else\r\n        match o with\r\n        | :? 'T as o when take o.Tag -> lock dirty (fun () -> dirty.Value.Add o |> ignore)\r\n        | _ -> ()\r\n        #endif\r\n\r\n\r\n    /// Adaptively compute deltas.\r\n    abstract member Compute: AdaptiveToken * System.Collections.Generic.HashSet<'T> -> 'Delta\r\n\r\n    /// Applies the delta to the current state and returns the 'effective' delta.\r\n    abstract member Apply: 'Delta -> 'Delta\r\n    default x.Apply o = o\r\n\r\n    /// Adaptively get the latest deltas (or empty if up-to-date).\r\n    member x.GetChanges(token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun token ->\r\n            if x.OutOfDate then\r\n                let dirty = \r\n                    lock dirty (fun () ->\r\n                        let d = !dirty\r\n                        dirty := UncheckedHashSet.create()\r\n                        d\r\n                    )\r\n                x.Compute(token, dirty) |> x.Apply\r\n            else\r\n                t.mempty\r\n        )   \r\n\r\n    interface IOpReader<'Delta> with\r\n        member x.GetChanges c = x.GetChanges c\r\n\r\n/// Linked list node used by the system to represent a 'version' in the History\r\n[<AllowNullLiteral>]\r\ntype internal RelevantNode<'State, 'T> =\r\n    class\r\n        val mutable public Prev: WeakReference<RelevantNode<'State, 'T>>\r\n        val mutable public Next: RelevantNode<'State, 'T>\r\n        val mutable public RefCount: int\r\n        val mutable public BaseState: 'State\r\n        val mutable public Value: 'T\r\n            \r\n        new(p, s, v, n) = { Prev = p; Next = n; RefCount = 0; BaseState = s; Value = v }\r\n    end\r\n\r\n/// History and HistoryReader are the central implementation for traceable data-types.\r\n/// The allow to construct a dependent History (by passing an input-reader) or imperatively\r\n/// performing operations on the history while keeping track of all output-versions that may exist.\r\ntype History<'State, 'Delta> private(input: option<Lazy<IOpReader<'Delta>>>, t: Traceable<'State, 'Delta>, finalize: 'Delta -> unit) =\r\n    inherit AdaptiveObject()\r\n\r\n    /// The current state of the History\r\n    let mutable state  : 'State = t.tempty\r\n\r\n    /// The (weak) latest version known in the history\r\n    let mutable last   : WeakReference<RelevantNode<'State, 'Delta>> = null\r\n    \r\n    let mutable appendCounter = 0\r\n\r\n    /// Gets the predecessor for a given node (null if none).\r\n    let getPrev (node: RelevantNode<'State, 'Delta>) =\r\n        if isNull node || isNull node.Prev then \r\n            null\r\n        else\r\n            match node.Prev.TryGetTarget() with\r\n            | (true, prev) -> prev\r\n            | _ -> null\r\n\r\n    /// Gets the first living node and the accumulated operation-size.\r\n    let getFirstAndSize() =\r\n        let mutable first = null\r\n        if not (isNull last) then\r\n            match last.TryGetTarget() with\r\n            | (true, first) ->\r\n                let mutable first = first\r\n                let mutable size = t.tsize first.Value\r\n                let mutable prev = getPrev first\r\n                while not (isNull prev) do\r\n                    size <- size + t.tsize prev.Value\r\n                    first <- prev\r\n                    prev <- getPrev first\r\n\r\n                struct (first, size)\r\n            | _ ->\r\n                struct (null, 0)\r\n        else\r\n            struct (null, 0)\r\n\r\n    /// Destroys nodes recursicely until shouldPrune returns false or the history is empty.\r\n    let rec pruneNode (shouldPrune: 'State -> int -> bool) (totalDeltaSize: int) (first: RelevantNode<'State, 'Delta>) =\r\n        if not (isNull first) && shouldPrune first.BaseState totalDeltaSize then\r\n            let size = t.tsize first.Value\r\n            let next = first.Next\r\n\r\n            // destroy the node\r\n            first.RefCount <- -1\r\n            if isNull first.Next then last <- null\r\n            else first.Next.Prev <- null\r\n            first.Next <- null\r\n            first.Prev <- null\r\n            first.BaseState <- Unchecked.defaultof<_>\r\n            first.Value <- Unchecked.defaultof<_>\r\n\r\n            // continue\r\n            pruneNode shouldPrune (totalDeltaSize - size) next\r\n\r\n    /// Prunes the history if needed\r\n    let prune () =\r\n        if appendCounter > 100 then\r\n            appendCounter <- 0\r\n            match t.tprune with\r\n            | Some shouldPrune ->\r\n                let struct (first, totalDeltaSize) = getFirstAndSize()\r\n                pruneNode shouldPrune totalDeltaSize first\r\n            | None ->\r\n                ()\r\n        else\r\n            appendCounter <- appendCounter + 1\r\n\r\n    /// Appends operations to the history and updates the state\r\n    /// Returns whether or not the operation effectively changed the state\r\n    let append (op: 'Delta) =\r\n        // only append non-empty ops\r\n        if not (t.tmonoid.misEmpty op) then\r\n            // apply the op to the state\r\n            let s, op = t.tapplyDelta state op\r\n            state <- s\r\n\r\n            // if op got empty do not append it\r\n            if not (t.tmonoid.misEmpty op) then\r\n                // if last is null no reader is interested in ops.\r\n                // therefore we simply discard them here\r\n                if not (isNull last) then\r\n                    match last.TryGetTarget() with\r\n                    | (true, lv) ->\r\n                        // last is non-null and alive and no one pulled it yet\r\n                        // so we can append our op to it\r\n                        lv.Value <- t.tmonoid.mappend lv.Value op\r\n                    | _ -> \r\n                        last <- null\r\n                        finalize op\r\n                else\r\n                    last <- null\r\n                    finalize op\r\n\r\n                prune()\r\n                true\r\n\r\n            else\r\n                false\r\n        else\r\n            false\r\n\r\n    /// Adds a reference to the latest version or creates one.\r\n    /// Returns the RelevantNode representing the latest version\r\n    let addRefToLast() =\r\n        if not (isNull last) then\r\n            match last.TryGetTarget() with\r\n            | (true, lv) ->\r\n                if t.tmonoid.misEmpty lv.Value then\r\n                    // if last has no ops we can reuse it here\r\n                    lv.RefCount <- lv.RefCount + 1\r\n                    lv\r\n                else\r\n                    // if last contains ops we just consumed it and therefore\r\n                    // need a new empty last\r\n                    let n = RelevantNode(last, state, t.tmonoid.mempty, null)\r\n                    lv.Next <- n\r\n                    last <- WeakReference<_> n\r\n                    n.RefCount <- 1\r\n                    n\r\n            | _ ->\r\n                 // if there is no last (the history is empty) we append\r\n                // a new empty last with no ops and set its refcount to 1\r\n                let n = RelevantNode(null, state, t.tmonoid.mempty, null)\r\n                n.RefCount <- 1\r\n                let wn = WeakReference<_> n\r\n                last <- wn\r\n                n\r\n        else\r\n            // if there is no last (the history is empty) we append\r\n            // a new empty last with no ops and set its refcount to 1\r\n            let n = RelevantNode(null, state, t.tmonoid.mempty, null)\r\n            n.RefCount <- 1\r\n            let wn = WeakReference<_> n\r\n            last <- wn\r\n            n\r\n              \r\n    /// Merges the ops in node into its predecessor (if any) and deletes the node from the History.\r\n    /// Returns the next version and the operations from the (deleted) node\r\n    let mergeIntoPrev (node: RelevantNode<'State, 'Delta>) =\r\n        if node.RefCount = 1 then\r\n            let res = node.Value\r\n            let next = node.Next\r\n            let prev = node.Prev\r\n            \r\n            // kill the node\r\n            finalize node.Value\r\n            node.Value <- Unchecked.defaultof<_>\r\n            node.Prev <- null\r\n            node.Next <- null\r\n            node.RefCount <- -1\r\n\r\n            // detach ourselves\r\n            if isNull next then last <- prev\r\n            else next.Prev <- prev\r\n            if not (isNull prev) then  \r\n                match prev.TryGetTarget() with\r\n                | (true, prevValue) -> \r\n                    // if prev is still relevant we merge our ops into it.\r\n                    // this is sound since the reader holding it would have seen the\r\n                    // operations anyway.\r\n                    prevValue.Next <- next\r\n                    prevValue.Value <- t.tmonoid.mappend prevValue.Value res\r\n                | _ ->\r\n                    ()\r\n            res, next\r\n\r\n        else\r\n            node.RefCount <- node.RefCount - 1\r\n            node.Value, node.Next      \r\n\r\n    /// Determines whether or not the node is invalid\r\n    let isInvalid (node: RelevantNode<'State, 'Delta>) =\r\n        isNull node || node.RefCount < 0\r\n\r\n    /// Used internally to pull the latest deltas from the input and append them to the history\r\n    member private x.Update (self: AdaptiveToken) =\r\n        if x.OutOfDate then\r\n            match input with\r\n                | Some c -> \r\n                    let v = c.Value.GetChanges self\r\n                    append v |> ignore\r\n                | None ->\r\n                    ()\r\n\r\n    /// The current state of the history\r\n    member x.State = state\r\n\r\n    /// The traceable instance used by the history\r\n    member x.Trace = t\r\n\r\n    /// Imperatively performs operations on the history (similar to ModRef.Value <- ...).\r\n    /// Since the history may need to be marked a Transaction needs to be current.\r\n    member x.Perform(op: 'Delta) =\r\n        let changed = lock x (fun () -> append op)\r\n        if changed then\r\n            x.MarkOutdated()\r\n            true\r\n        else\r\n            false\r\n\r\n    /// Used by HistoryReader to pull the operations since the old RelevantNode.\r\n    /// Additionaly the reader provides its latest state. \r\n    /// This way the history can computeDelta the state in case it decided to drop the old version.\r\n    member internal x.Read(token: AdaptiveToken, old: RelevantNode<'State, 'Delta>, oldState: 'State) =\r\n        x.EvaluateAlways token (fun token ->\r\n            x.Update token\r\n\r\n            if isInvalid old then\r\n                let ops = t.tcomputeDelta oldState state\r\n                let node = addRefToLast()\r\n\r\n                node, ops\r\n            else\r\n                let mutable res = t.tmonoid.mempty\r\n                let mutable current = old\r\n\r\n                while not (isNull current) do\r\n                    let (o,c) = mergeIntoPrev current\r\n                    res <- t.tmonoid.mappend res o\r\n                    current <- c\r\n                    if not (isNull c) then \r\n                        c.RefCount <- c.RefCount + 1\r\n\r\n                let node = addRefToLast()\r\n                node, res\r\n        )\r\n        \r\n    /// Adaptively gets the history'State current state\r\n    member x.GetValue(token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun token ->\r\n            x.Update token\r\n            state\r\n        )\r\n\r\n    /// Creates a new reader on the history\r\n    member x.NewReader() =\r\n        let reader = new HistoryReader<'State, 'Delta>(x) \r\n        reader :> IOpReader<'State, 'Delta>\r\n        \r\n    /// Creates a new reader on the history\r\n    member x.NewReader(trace : Traceable<'ViewState, 'ViewDelta>, mapping : 'State -> 'Delta -> 'ViewDelta) =\r\n        let reader = new HistoryReader<'State, 'Delta, 'ViewState, 'ViewDelta>(x, mapping, trace) \r\n        reader :> IOpReader<'ViewState, 'ViewDelta>\r\n         \r\n    /// Creates a new reader on the history\r\n    member x.NewReader(trace : Traceable<'ViewState, 'ViewDelta>, mapping : 'Delta -> 'ViewDelta) =\r\n        let reader = new HistoryReader<'State, 'Delta, 'ViewState, 'ViewDelta>(x, (fun _ v -> mapping v), trace) \r\n        reader :> IOpReader<'ViewState, 'ViewDelta>\r\n                   \r\n    interface AdaptiveValue with\r\n        member x.GetValueUntyped t = x.GetValue t :> obj\r\n        member x.ContentType = \r\n            #if FABLE_COMPILER\r\n            typeof<obj>\r\n            #else\r\n            typeof<'State>\r\n            #endif\r\n\r\n    interface AdaptiveValue<'State> with\r\n        member x.GetValue t = x.GetValue t\r\n\r\n    new (t: Traceable<'State, 'Delta>, finalize: 'Delta -> unit) = History<'State, 'Delta>(None, t, finalize)\r\n    new (input: unit -> IOpReader<'Delta>, t: Traceable<'State, 'Delta>, finalize: 'Delta -> unit) = History<'State, 'Delta>(Some (lazy (input())), t, finalize)\r\n    new (t: Traceable<'State, 'Delta>) = History<'State, 'Delta>(None, t, ignore)\r\n    new (input: unit -> IOpReader<'Delta>, t: Traceable<'State, 'Delta>) = History<'State, 'Delta>(Some (lazy (input())), t, ignore)\r\n\r\n/// HistoryReader implements IOpReader<_,_> and takes care of managing versions correctly.\r\nand internal HistoryReader<'State, 'Delta>(h: History<'State, 'Delta>) =\r\n    inherit AdaptiveObject()\r\n    let trace = h.Trace\r\n    let mutable node: RelevantNode<'State, 'Delta> = null\r\n    let mutable state = trace.tempty\r\n    \r\n    member x.RelevantNode = \r\n        node\r\n\r\n    member x.DestroyRelevantNode() =\r\n        node <- null\r\n\r\n    member x.GetChanges(token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun token ->\r\n            if x.OutOfDate then\r\n                let nt, ops = h.Read(token, node, state)\r\n                node <- nt\r\n                state <- h.State\r\n                ops\r\n            else\r\n                trace.tmonoid.mempty\r\n        )\r\n\r\n    interface IOpReader<'Delta> with\r\n        member x.GetChanges c = x.GetChanges c\r\n\r\n    interface IOpReader<'State, 'Delta> with\r\n        member x.State = state\r\n\r\n/// HistoryReader implements IOpReader<_,_> and takes care of managing versions correctly.\r\nand internal HistoryReader<'State, 'Delta, 'ViewState, 'ViewDelta>(h: History<'State, 'Delta>, mapping : 'State -> 'Delta -> 'ViewDelta, trace : Traceable<'ViewState, 'ViewDelta>) =\r\n    inherit AdaptiveObject()\r\n    //let trace = h.Trace\r\n    let mutable node: RelevantNode<'State, 'Delta> = null\r\n\r\n    let mutable state = h.Trace.tempty\r\n    let mutable viewState = trace.tempty\r\n    let mapping = OptimizedClosures.FSharpFunc<_,_,_>.Adapt mapping\r\n    member x.RelevantNode = \r\n        node\r\n\r\n    member x.DestroyRelevantNode() =\r\n        node <- null\r\n\r\n    member x.GetChanges(token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun token ->\r\n            if x.OutOfDate then\r\n                let nt, ops = h.Read(token, node, state)\r\n                node <- nt\r\n                state <- h.State\r\n                let vops = mapping.Invoke(state, ops)\r\n                let s, vops = trace.tapplyDelta viewState vops\r\n                viewState <- s\r\n                vops\r\n            else\r\n                trace.tmonoid.mempty\r\n        )\r\n\r\n    interface IOpReader<'ViewDelta> with\r\n        member x.GetChanges c = x.GetChanges c\r\n\r\n    interface IOpReader<'ViewState, 'ViewDelta> with\r\n        member x.State = viewState\r\n\r\n/// Functional operators related to the History<_,_> type.\r\nmodule History =\r\n    \r\n    /// Simple base-types for reader implementations.\r\n    module Readers =\r\n        /// The empty reader.\r\n        type EmptyReader<'State, 'Delta>(t: Traceable<'State, 'Delta>) =\r\n            inherit ConstantObject()\r\n\r\n            interface IOpReader<'Delta> with\r\n                member x.GetChanges(_caller) = t.tmonoid.mempty\r\n    \r\n            interface IOpReader<'State, 'Delta> with\r\n                member x.State = t.tempty\r\n\r\n        /// A constant reader.\r\n        type ConstantReader<'State, 'Delta>(t: Traceable<'State, 'Delta>, ops: Lazy<'Delta>, finalState: Lazy<'State>) =\r\n            inherit ConstantObject()\r\n            \r\n            let mutable state = t.tempty\r\n            let mutable initial = true\r\n\r\n            interface IOpReader<'Delta> with\r\n                member x.GetChanges(caller) =\r\n                    lock x (fun () ->\r\n                        if initial then\r\n                            initial <- false\r\n                            state <- finalState.Value\r\n                            ops.Value\r\n                        else\r\n                            t.tmonoid.mempty\r\n                    )\r\n\r\n            interface IOpReader<'State, 'Delta> with\r\n                member x.State = state\r\n    \r\n    /// Creates a history depending on the given reader. \r\n    /// The history will internally use the given traceable instance.\r\n    let ofReader (t: Traceable<'State, 'Delta>) (newReader: unit -> IOpReader<'Delta>) =\r\n        History<'State, 'Delta>(newReader, t)\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen FSharp.Data.Traceable\r\n\r\n/// Changeable adaptive map that allows mutation by user-code and implements amap.\r\n[<Sealed>]\r\ntype ChangeableMap<'Key, 'Value>(initial : HashMap<'Key, 'Value>) =\r\n    let history = \r\n        let h = History(HashMap.trace)\r\n        h.Perform(HashMap.computeDelta HashMap.empty initial) |> ignore\r\n        h\r\n\r\n    /// The number of entries currently in the map.\r\n    member x.Count = \r\n        history.State.Count\r\n\r\n    /// Is the map currently empty?\r\n    member x.IsEmpty =\r\n        history.State.IsEmpty\r\n\r\n    /// True if the map contains the given key.\r\n    member x.ContainsKey key =\r\n        HashMap.containsKey key history.State\r\n\r\n    /// Returns the (optional) value associated to key.\r\n    member x.TryGetValue key =\r\n        HashMap.tryFind key history.State\r\n\r\n    /// Clears the map.\r\n    member x.Clear() =\r\n        if not (HashMap.isEmpty history.State) then\r\n            let ops = HashMap.computeDelta history.State HashMap.empty\r\n            history.Perform ops |> ignore\r\n        \r\n\r\n    /// Gets or sets the current state as HashMap.\r\n    member x.Value\r\n        with get() = \r\n            history.State\r\n        and set value =\r\n            let ops = HashMap.computeDelta history.State value\r\n            history.Perform ops |> ignore\r\n\r\n    member x.UpdateTo(other : HashMap<'Key, 'T2>, init : 'T2 -> 'Value, update : 'Value -> 'T2 -> 'Value) =\r\n        let current = history.State\r\n        let target = other\r\n\r\n        let store = \r\n            (current, target) ||> HashMap.choose2 (fun i l r ->\r\n                match l with\r\n                | None -> \r\n                    match r with\r\n                    | Some r -> Some (Set (init r))\r\n                    | None -> None\r\n                | Some l ->\r\n                    match r with\r\n                    | Some r -> \r\n                        let nl = update l r\r\n                        if cheapEqual l nl then \r\n                            None\r\n                        else \r\n                            Some (Set nl)\r\n                    | None ->\r\n                        Some Remove\r\n            )\r\n\r\n        let ops = HashMapDelta(store)\r\n        history.Perform ops |> ignore\r\n\r\n        \r\n\r\n    /// Removes the entry for the given key and returns whether the element was deleted.\r\n    member x.Remove(key : 'Key) =\r\n        history.Perform (HashMap.single key Remove |> HashMapDelta)\r\n        \r\n    /// Adds the given key/value pair to the map and returns true when the map changed. (overrides existing values)\r\n    member x.Add(key : 'Key, value : 'Value) =\r\n        history.Perform (HashMap.single key (Set value) |> HashMapDelta) \r\n        \r\n    /// Gets or sets the value associated to key.\r\n    member x.Item\r\n        with get (key : 'Key) =     \r\n            history.State.[key]\r\n\r\n        and set (key : 'Key) (value : 'Value) = \r\n            history.Perform (HashMap.single key (Set value) |> HashMapDelta) |> ignore\r\n        \r\n    /// Creates an adaptive reader for the map.\r\n    member x.GetReader() =\r\n        history.NewReader()\r\n\r\n    /// Creates a new empty cmap.\r\n    new() = ChangeableMap(HashMap.empty)\r\n\r\n    /// Creates a new cmap containing all the given elements.\r\n    new(elements : seq<'Key * 'Value>) = ChangeableMap(HashMap.ofSeq elements)\r\n\r\n    interface AdaptiveHashMap<'Key, 'Value> with\r\n        member x.IsConstant = false\r\n        member x.GetReader() = x.GetReader()\r\n        member x.Content = history :> aval<_>\r\n        member x.History = Some history\r\n\r\n/// Changeable adaptive map that allows mutation by user-code and implements amap.\r\nand cmap<'Key, 'Value> = ChangeableMap<'Key, 'Value>\r\n\r\n\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\n\r\ntype AdaptiveValue =\r\n    inherit IAdaptiveObject\r\n    abstract member GetValueUntyped: AdaptiveToken -> obj\r\n    abstract member ContentType : Type\r\n\r\ntype AdaptiveValue<'T> =\r\n    inherit AdaptiveValue\r\n    abstract member GetValue: AdaptiveToken -> 'T\r\n\r\nand aval<'T> = AdaptiveValue<'T>\r\n\r\n[<Sealed; StructuredFormatDisplay(\"{AsString}\")>]\r\ntype ChangeableValue<'T>(value : 'T) =\r\n    inherit AdaptiveObject()\r\n    let mutable value = value\r\n\r\n    member x.Value\r\n        with get() = value\r\n        and set v =\r\n            if not (cheapEqual value v) then\r\n                value <- v\r\n                x.MarkOutdated()\r\n                \r\n    member x.GetValue (token: AdaptiveToken) =\r\n        x.EvaluateAlways token (fun _ ->\r\n            value\r\n        )\r\n\r\n    interface AdaptiveValue with\r\n        member x.GetValueUntyped t = x.GetValue t :> obj\r\n        member x.ContentType =\r\n            #if FABLE_COMPILER\r\n            typeof<obj>\r\n            #else\r\n            typeof<'T>\r\n            #endif\r\n\r\n    interface AdaptiveValue<'T> with\r\n        member x.GetValue t = x.GetValue t\r\n        \r\n    member private x.AsString = sprintf \"cval(%A)\" x.Value\r\n    override x.ToString() = String.Format(\"cval({0})\", x.Value)\r\n\r\nand cval<'T> = ChangeableValue<'T>\r\n    \r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule AVal =\r\n\r\n    /// Base class for standard avals\r\n    [<AbstractClass; StructuredFormatDisplay(\"{AsString}\")>]\r\n    type AbstractVal<'T>() =\r\n        inherit AdaptiveObject()\r\n\r\n        let mutable valueCache = Unchecked.defaultof<'T>\r\n\r\n        abstract member Compute: AdaptiveToken -> 'T\r\n\r\n        member x.GetValue(token: AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let v = x.Compute token\r\n                    valueCache <- v\r\n                    v\r\n                else\r\n                    valueCache                \r\n            )\r\n\r\n        member private x.AsString =\r\n            if x.OutOfDate then sprintf \"aval*(%A)\" valueCache\r\n            else sprintf \"aval(%A)\" valueCache\r\n\r\n        override x.ToString() =\r\n            if x.OutOfDate then String.Format(\"aval*({0})\", valueCache)\r\n            else String.Format(\"aval({0})\", valueCache)\r\n            \r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'T>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'T> with\r\n            member x.GetValue t = x.GetValue t  \r\n            \r\n    /// Lazy without locking\r\n    type LazyOrValue<'T> =\r\n        val mutable public Create: unit -> 'T\r\n        val mutable public Value: 'T\r\n        val mutable public IsValue: bool\r\n\r\n        new(value: 'T) = { Create = Unchecked.defaultof<_>; Value = value; IsValue = true }\r\n        new(create: unit -> 'T) = { Create = create; Value = Unchecked.defaultof<_>; IsValue = false }\r\n        \r\n    /// A constant value that can either be a value or a lazy computation\r\n    [<StructuredFormatDisplay(\"{AsString}\")>]\r\n    type ConstantVal<'T> private(data: LazyOrValue<'T>) =\r\n        inherit ConstantObject()\r\n        let mutable data = data\r\n\r\n        member private x.GetValue(): 'T =\r\n            if data.IsValue then \r\n                data.Value\r\n            else\r\n                let v = data.Create()\r\n                data.IsValue <- true\r\n                data.Value <- v\r\n                data.Create <- Unchecked.defaultof<_>\r\n                v\r\n\r\n        member x.GetValue(_token: AdaptiveToken): 'T = \r\n            x.GetValue()\r\n            \r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = x.GetValue t :> obj\r\n            member x.ContentType = \r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'T>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'T> with\r\n            member x.GetValue t = x.GetValue t    \r\n\r\n        static member Lazy (create: unit -> 'T) =\r\n            ConstantVal<'T>(LazyOrValue<'T> create) :> aval<_>\r\n\r\n        static member Value (value: 'T) =\r\n            ConstantVal<'T>(LazyOrValue<'T> value) :> aval<_>\r\n\r\n        member private x.AsString =\r\n            sprintf \"constval(%A)\" (x.GetValue())\r\n            \r\n        override x.ToString() =\r\n            String.Format(\"constval({0})\", x.GetValue())\r\n\r\n        override x.GetHashCode() =\r\n            let value = x.GetValue()\r\n            cheapHash value\r\n\r\n        override x.Equals o =\r\n            #if ADAPTIVE_NO_TYPE_TESTS\r\n            let o = unbox<aval<'T>> o\r\n            o.IsConstant && cheapEqual (x.GetValue()) (o.GetValue AdaptiveToken.Top)\r\n            #else\r\n            match o with\r\n            | :? ConstantVal<'T> as o -> \r\n                let xv = x.GetValue()\r\n                let ov = o.GetValue()\r\n                cheapEqual xv ov\r\n            | _ ->\r\n                false\r\n            #endif\r\n\r\n    /// Aval for mapping a single value\r\n    type MapVal<'T1, 'T2>(mapping: 'T1 -> 'T2, input: aval<'T1>) =\r\n        inherit AbstractVal<'T2>()\r\n\r\n        // can we avoid double caching (here and in AbstractVal)\r\n        let mutable cache: ValueOption<struct ('T1 * 'T2)> = ValueNone\r\n        \r\n        override x.Compute(token: AdaptiveToken) =\r\n            let i = input.GetValue token\r\n            match cache with\r\n            | ValueSome (struct (a, b)) when cheapEqual a i ->\r\n                b\r\n            | _ ->\r\n                let b = mapping i\r\n                cache <- ValueSome(struct (i, b))\r\n                b\r\n\r\n        interface AdaptiveValue<'T2> with\r\n            member x.GetValue t = x.GetValue t\r\n\r\n    /// Aval for mapping 2 values in 'parallel'\r\n    type Map2Val<'T1, 'T2, 'T3>(mapping: 'T1 -> 'T2 -> 'T3, a: aval<'T1>, b: aval<'T2>) =\r\n        inherit AbstractVal<'T3>()\r\n\r\n        let mapping = OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3>.Adapt(mapping)\r\n        let mutable cache: ValueOption<struct ('T1 * 'T2 * 'T3)> = ValueNone\r\n\r\n        override x.Compute (token: AdaptiveToken) =\r\n            let a = a.GetValue token\r\n            let b = b.GetValue token\r\n            match cache with\r\n            | ValueSome(struct (oa, ob, oc)) when cheapEqual oa a && cheapEqual ob b ->\r\n                oc\r\n            | _ ->\r\n                let c = mapping.Invoke (a, b)\r\n                cache <- ValueSome(struct (a, b, c))\r\n                c\r\n\r\n    /// Aval for mapping 3 values in 'parallel'\r\n    type Map3Val<'T1, 'T2, 'T3, 'T4>(mapping: 'T1 -> 'T2 -> 'T3 -> 'T4, a: aval<'T1>, b: aval<'T2>, c: aval<'T3>) =\r\n        inherit AbstractVal<'T4>()\r\n\r\n        let mapping = OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3, 'T4>.Adapt(mapping)\r\n        let mutable cache: ValueOption<struct ('T1 * 'T2 * 'T3 * 'T4)> = ValueNone\r\n\r\n        override x.Compute (token: AdaptiveToken) =\r\n            let a = a.GetValue token\r\n            let b = b.GetValue token\r\n            let c = c.GetValue token\r\n            match cache with\r\n            | ValueSome (struct (oa, ob, oc, od)) when cheapEqual oa a && cheapEqual ob b && cheapEqual oc c ->\r\n                od\r\n            | _ ->\r\n                let d = mapping.Invoke (a, b, c)\r\n                cache <- ValueSome (struct (a, b, c, d))\r\n                d\r\n\r\n    /// Aval for binding a single value\r\n    type BindVal<'T1, 'T2>(mapping: 'T1 -> aval<'T2>, input: aval<'T1>) =\r\n        inherit AbstractVal<'T2>()\r\n\r\n        let mutable inner: ValueOption< struct ('T1 * aval<'T2>) > = ValueNone\r\n        let mutable inputDirty = 1\r\n\r\n        override x.InputChangedObject(_, o) =\r\n            if Object.ReferenceEquals(o, input) then \r\n                inputDirty <- 1\r\n\r\n        override x.Compute(token: AdaptiveToken) =\r\n            let va = input.GetValue token\r\n            #if FABLE_COMPILER\r\n            let inputDirty = let v = inputDirty in inputDirty <- 0; v <> 0\r\n            #else\r\n            let inputDirty = System.Threading.Interlocked.Exchange(&inputDirty, 0) <> 0\r\n            #endif\r\n            match inner with\r\n            | ValueNone ->\r\n                let result = mapping va\r\n                inner <- ValueSome (struct (va, result))\r\n                result.GetValue token   \r\n                \r\n            | ValueSome(struct (oa, oldResult)) when not inputDirty || cheapEqual oa va ->\r\n                oldResult.GetValue token\r\n\r\n            | ValueSome(struct (_, old)) ->\r\n                old.Outputs.Remove x |> ignore\r\n                let result = mapping va\r\n                inner <- ValueSome (struct (va, result))\r\n                result.GetValue token     \r\n\r\n    /// Aval for binding two values in 'parallel'\r\n    type Bind2Val<'T1, 'T2, 'T3>(mapping: 'T1 -> 'T2 -> aval<'T3>, value1: aval<'T1>, value2: aval<'T2>) =\r\n        inherit AbstractVal<'T3>()\r\n\r\n        let mapping = OptimizedClosures.FSharpFunc<'T1, 'T2, aval<'T3>>.Adapt(mapping)\r\n        let mutable inner: ValueOption< struct ('T1 * 'T2 * aval<'T3>) > = ValueNone\r\n        let mutable inputDirty = 1\r\n\r\n        override x.InputChangedObject(_, o) =\r\n            if Object.ReferenceEquals(o, value1) || Object.ReferenceEquals(o, value2) then \r\n                inputDirty <- 1\r\n\r\n        override x.Compute(token: AdaptiveToken) =\r\n            let va = value1.GetValue token\r\n            let vb = value2.GetValue token\r\n            #if FABLE_COMPILER\r\n            let inputDirty = let v = inputDirty in inputDirty <- 0; v <> 0\r\n            #else\r\n            let inputDirty = System.Threading.Interlocked.Exchange(&inputDirty, 0) <> 0\r\n            #endif\r\n            \r\n            match inner with\r\n            | ValueNone ->\r\n                let res = mapping.Invoke (va, vb)\r\n                inner <- ValueSome (struct (va, vb, res))\r\n                res.GetValue token  \r\n\r\n            | ValueSome(struct (oa, ob, res)) when not inputDirty || (cheapEqual oa va && cheapEqual ob vb) ->\r\n                res.GetValue token\r\n\r\n            | ValueSome(struct (_, _, old)) ->\r\n                old.Outputs.Remove x |> ignore\r\n                let res = mapping.Invoke (va, vb)\r\n                inner <- ValueSome (struct (va, vb, res))\r\n                res.GetValue token     \r\n    \r\n    /// Aval for binding three values in 'parallel'\r\n    type Bind3Val<'T1, 'T2, 'T3, 'T4>(mapping: 'T1 -> 'T2 -> 'T3 -> aval<'T4>, value1: aval<'T1>, value2: aval<'T2>, value3: aval<'T3>) =\r\n        inherit AbstractVal<'T4>()\r\n\r\n        let mapping = OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3, aval<'T4>>.Adapt(mapping)\r\n        let mutable inner: ValueOption< struct ('T1 * 'T2 * 'T3 * aval<'T4>) > = ValueNone\r\n        let mutable inputDirty = 1\r\n\r\n        override x.InputChangedObject(_, o) =\r\n            if Object.ReferenceEquals(o, value1) || Object.ReferenceEquals(o, value2) || Object.ReferenceEquals(o, value3) then \r\n                inputDirty <- 1\r\n\r\n        override x.Compute(token: AdaptiveToken) =\r\n            let va = value1.GetValue token\r\n            let vb = value2.GetValue token\r\n            let vc = value3.GetValue token\r\n            #if FABLE_COMPILER\r\n            let inputDirty = let v = inputDirty in inputDirty <- 0; v <> 0\r\n            #else\r\n            let inputDirty = System.Threading.Interlocked.Exchange(&inputDirty, 0) <> 0\r\n            #endif\r\n            \r\n            match inner with\r\n            | ValueNone ->\r\n                let res = mapping.Invoke (va, vb, vc)\r\n                inner <- ValueSome (struct (va, vb, vc, res))\r\n                res.GetValue token  \r\n\r\n            | ValueSome(struct (oa, ob, oc, res)) when not inputDirty || (cheapEqual oa va && cheapEqual ob vb && cheapEqual oc vc) ->\r\n                res.GetValue token\r\n\r\n            | ValueSome(struct (_, _, _, old)) ->\r\n                old.Outputs.Remove x |> ignore\r\n                let res = mapping.Invoke (va, vb, vc)\r\n                inner <- ValueSome (struct (va, vb, vc, res))\r\n                res.GetValue token     \r\n\r\n    /// Aval for custom computations\r\n    type CustomVal<'T>(compute: AdaptiveToken -> 'T) =\r\n        inherit AbstractVal<'T>()\r\n\r\n        override x.Compute(token: AdaptiveToken) =\r\n            compute token\r\n\r\n    let inline force (value: aval<'T>) =\r\n        value.GetValue AdaptiveToken.Top\r\n\r\n    let inline init (value: 'T) =\r\n        cval value\r\n\r\n    let constant (value: 'T) =\r\n        ConstantVal.Value value\r\n        \r\n    let delay (value: unit -> 'T) =\r\n        ConstantVal.Lazy value\r\n\r\n    let map (mapping: 'T1 -> 'T2) (value: aval<'T1>) =\r\n        if value.IsConstant then \r\n            ConstantVal.Lazy (fun () -> value |> force |> mapping)\r\n        else\r\n            MapVal(mapping, value) :> aval<_>\r\n            \r\n    let map2 (mapping: 'T1 -> 'T2 -> 'T3) (value1: aval<'T1>) (value2: aval<'T2>) =\r\n        if value1.IsConstant && value2.IsConstant then \r\n            ConstantVal.Lazy (fun () -> \r\n                mapping (force value1) (force value2)\r\n            )\r\n\r\n        elif value1.IsConstant then\r\n            let a = force value1\r\n            map (fun b -> mapping a b) value2\r\n\r\n        elif value2.IsConstant then\r\n            let b = force value2\r\n            map (fun a -> mapping a b) value1\r\n\r\n        else\r\n            Map2Val(mapping, value1, value2) :> aval<_>\r\n            \r\n    let map3 (mapping: 'T1 -> 'T2 -> 'T3 -> 'T4) (value1: aval<'T1>) (value2: aval<'T2>) (value3: aval<'T3>) =\r\n        if value1.IsConstant && value2.IsConstant && value3.IsConstant then \r\n            ConstantVal.Lazy (fun () -> \r\n                mapping (force value1) (force value2) (force value3)\r\n            )\r\n\r\n        elif value1.IsConstant then\r\n            let a = force value1\r\n            map2 (fun b c -> mapping a b c) value2 value3\r\n\r\n        elif value2.IsConstant then\r\n            let b = force value2\r\n            map2 (fun a c -> mapping a b c) value1 value3\r\n\r\n        elif value3.IsConstant then\r\n            let c = force value3\r\n            map2 (fun a b -> mapping a b c) value1 value2\r\n\r\n        else\r\n            Map3Val(mapping, value1, value2, value3) :> aval<_>\r\n              \r\n    let bind (mapping: 'T1 -> aval<'T2>) (value: aval<'T1>) =\r\n        if value.IsConstant then\r\n            value |> force |> mapping\r\n        else\r\n            BindVal<'T1, 'T2>(mapping, value) :> aval<_>       \r\n\r\n    let bind2 (mapping: 'T1 -> 'T2 -> aval<'T3>) (value1: aval<'T1>) (value2: aval<'T2>) =\r\n        if value1.IsConstant && value2.IsConstant then\r\n            mapping (force value1) (force value2)\r\n\r\n        elif value1.IsConstant then\r\n            let a = force value1\r\n            bind (fun b -> mapping a b) value2\r\n\r\n        elif value2.IsConstant then\r\n            let b = force value2\r\n            bind (fun a -> mapping a b) value1\r\n\r\n        else\r\n            Bind2Val<'T1, 'T2, 'T3>(mapping, value1, value2) :> aval<_>       \r\n\r\n    let bind3 (mapping: 'T1 -> 'T2 -> 'T3 -> aval<'T4>) (value1: aval<'T1>) (value2: aval<'T2>) (value3: aval<'T3>) =\r\n        if value1.IsConstant && value2.IsConstant && value3.IsConstant then\r\n            mapping (force value1) (force value2) (force value3)\r\n\r\n        elif value1.IsConstant then\r\n            let a = force value1\r\n            bind2 (fun b c -> mapping a b c) value2 value3\r\n\r\n        elif value2.IsConstant then\r\n            let b = force value2\r\n            bind2 (fun a c -> mapping a b c) value1 value3\r\n            \r\n        elif value3.IsConstant then\r\n            let c = force value3\r\n            bind2 (fun a b -> mapping a b c) value1 value2\r\n        else\r\n            Bind3Val<'T1, 'T2, 'T3, 'T4>(mapping, value1, value2, value3) :> aval<_>       \r\n\r\n    let custom (compute: AdaptiveToken -> 'T) =\r\n        CustomVal compute :> aval<_>\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System\r\nopen System.Threading\r\nopen System.Runtime.CompilerServices\r\n\r\n\r\n/// Represents an object providing callbacks in the dependency-tree\r\ntype internal MultiCallbackObject(table : ConditionalWeakTable<IAdaptiveObject, MultiCallbackObject>, obj: IAdaptiveObject) = \r\n    static let mutable id = 0\r\n    static let emptyOutputs = EmptyOutputSet() :> IWeakOutputSet\r\n    let mutable level = obj.Level + 1\r\n    let mutable cbs : HashMap<int, unit -> bool> = HashMap.empty\r\n    let mutable obj = obj\r\n    let mutable weak = null\r\n\r\n    let check (x : MultiCallbackObject) =\r\n        if cbs.Count = 0 && not (isNull (obj :> obj)) then\r\n            obj.Outputs.Remove x |> ignore\r\n            if lock table (fun () -> table.Remove obj) then\r\n                level <- 0\r\n                obj <- Unchecked.defaultof<_>\r\n                weak <- null\r\n                false\r\n            else\r\n                true\r\n        else\r\n            true\r\n\r\n    let remove (x : MultiCallbackObject) (id : int) =\r\n        lock x (fun () ->\r\n            cbs <- HashMap.remove id cbs\r\n            check x |> ignore\r\n        )\r\n\r\n    /// adds a callback to the object. the returned boolean indicates whether the callback\r\n    /// should automatically re-subscribe after being fired.\r\n    member x.Subscribe(cb : unit -> bool) =\r\n        lock x (fun () ->\r\n            let i = \r\n                #if !FABLE_COMPILER\r\n                Interlocked.Increment(&id)\r\n                #else\r\n                let a = id + 1 in id <- a; a\r\n                #endif\r\n\r\n            if cbs.Count = 0 then\r\n                obj.Outputs.Add x |> ignore\r\n                \r\n            cbs <- HashMap.add i cb cbs\r\n            { new IDisposable with member __.Dispose() = remove x i }\r\n        )\r\n    \r\n    member x.Mark() =\r\n        cbs <- cbs |> HashMap.filter (fun _ cb -> try cb() with _ -> true)\r\n        if check x then\r\n            obj.Outputs.Add x |> ignore\r\n\r\n        false\r\n\r\n    interface IAdaptiveObject with\r\n        member x.Tag\r\n            with get() = null\r\n            and set _ = ()\r\n\r\n        member x.Weak =\r\n            let w = weak\r\n            if isNull w then \r\n                let w = WeakReference<IAdaptiveObject>(x)\r\n                weak <- w\r\n                w\r\n            else\r\n                w\r\n        member x.InputChanged(_,_) = ()\r\n        member x.AllInputsProcessed(_) = ()\r\n        member x.IsConstant = false\r\n        member x.OutOfDate\r\n            with get() = false\r\n            and set _ = ()\r\n        member x.Outputs = emptyOutputs\r\n        member x.Mark() = x.Mark()\r\n        member x.Level\r\n            with get() = level\r\n            and set l = level <- l\r\n \r\n/// IAdaptiveObject extensions for creating/removing callbacks.\r\n[<AutoOpen>]\r\nmodule CallbackExtensions =\r\n    /// cache for MultiCallbackObjects per IAdaptiveObject\r\n    let private callbackObjects = ConditionalWeakTable<IAdaptiveObject, MultiCallbackObject>()\r\n\r\n    /// utility getting/creating a MultiCallbackObjects for the given IAdaptiveObject  \r\n    let private getMultiCallback (o : IAdaptiveObject) =    \r\n        lock callbackObjects (fun () ->\r\n            match callbackObjects.TryGetValue o with\r\n            | (true, cbo) -> cbo\r\n            | _ -> \r\n                let cbo = MultiCallbackObject(callbackObjects, o)\r\n                callbackObjects.Add(o, cbo)\r\n                cbo\r\n        )\r\n\r\n\r\n    type IAdaptiveObject with\r\n        /// Registers a callback with the given object that will be executed\r\n        /// whenever the object gets marked out-of-date.\r\n        /// Note that it does not trigger when the object is currently out-of-date.\r\n        /// Returns a disposable for removing the callback.\r\n        member x.AddMarkingCallback (callback: unit -> unit) =\r\n            let cbo = getMultiCallback x\r\n            cbo.Subscribe(fun () -> callback(); true)\r\n            \r\n        /// Registers a callback with the given object that will be executed\r\n        /// ONCE! when the next out-of-date marking visits the object.\r\n        /// Note that it does not trigger when the object is currently out-of-date.\r\n        /// Returns a disposable for removing the callback.\r\n        member x.OnNextMarking (callback: unit -> unit) =\r\n            let cbo = getMultiCallback x\r\n            cbo.Subscribe(fun () -> \r\n                try \r\n                    callback()\r\n                    false\r\n                with :? LevelChangedException ->\r\n                    true\r\n            )\r\n          ","﻿namespace FSharp.Data.Adaptive\r\n\r\n    \r\n/// A simple multi-map implementation.\r\ntype internal MultiSetMap<'k, 'v> = HashMap<'k, HashSet<'v>>\r\n    \r\n/// A simple multi-map implementation.\r\nmodule internal MultiSetMap =\r\n    [<GeneralizableValue>]\r\n    let empty<'k, 'v> : MultiSetMap<'k, 'v> = HashMap.empty\r\n\r\n    let add (key: 'k) (value: 'v) (m: MultiSetMap<'k, 'v>): MultiSetMap<'k, 'v> =\r\n        m |> HashMap.alter key (fun old ->\r\n            match old with\r\n            | Some old -> Some (HashSet.add value old)\r\n            | None -> Some (HashSet.single value)\r\n        )\r\n\r\n    let remove (key: 'k) (value: 'v) (m: MultiSetMap<'k, 'v>): bool * MultiSetMap<'k, 'v> =\r\n        let wasLast = ref false\r\n        let result = \r\n            m |> HashMap.alter key (fun old ->\r\n                match old with\r\n                | None -> None\r\n                | Some old -> \r\n                    let s = HashSet.remove value old\r\n                    if HashSet.isEmpty s then \r\n                        wasLast := true\r\n                        None\r\n                    else \r\n                        Some s\r\n            )\r\n        !wasLast, result\r\n\r\n    let find (key: 'k) (m: MultiSetMap<'k, 'v>) =\r\n        match HashMap.tryFind key m with\r\n        | Some s -> s\r\n        | None -> HashSet.empty\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\nopen System.Collections.Generic\r\n\r\n\r\n/// Cache represents a cached function which can be \r\n/// invoked and revoked. invoke increments the reference\r\n/// count for a specific argument (possibly causing the \r\n/// function to be executed) whereas revoke decreases the\r\n/// eeference count and removes the cache entry whenever\r\n/// the reference count is 0.\r\ntype internal Cache<'T1, 'T2>(mapping : 'T1 -> 'T2) =  \r\n    /// utility checking for null (if possible)\r\n    static let isNull =\r\n        #if FABLE_COMPILER\r\n        fun (o : 'T1) -> isNull (o :> obj)\r\n        #else\r\n        if typeof<'T1>.IsValueType then fun (_o : 'T1) -> false\r\n        else fun (o : 'T1) -> isNull (o :> obj)\r\n        #endif \r\n\r\n    /// cache for non-null values.\r\n    let cache = UncheckedDictionary.create<'T1, 'T2 * ref<int>>()\r\n\r\n    /// cache for null values (needed for option, unit, etc.)\r\n    let mutable nullCache = None\r\n\r\n    /// Clear removes all entries from the Cache and\r\n    /// executes a function for all removed cache entries.\r\n    /// This function is helpful if the contained values\r\n    /// are (for example) disposable resources.\r\n    member x.Clear(remove : 'T2 -> unit) =\r\n        for (KeyValue(_,(v,_))) in cache do \r\n            remove v\r\n        cache.Clear()\r\n        match nullCache with\r\n            | Some (v,_) -> \r\n                remove v\r\n                nullCache <- None\r\n            | None -> ()\r\n\r\n    /// Invoke returns the function value associated\r\n    /// With the given argument (possibly executing the function)\r\n    /// And increases the associated reference count.\r\n    member x.Invoke (v : 'T1) =\r\n        if isNull v then\r\n            match nullCache with\r\n                | Some (r, ref) -> \r\n                    ref := !ref + 1\r\n                    r\r\n                | None ->\r\n                    let r = mapping v\r\n                    nullCache <- Some(r, ref 1)\r\n                    r\r\n        else\r\n            match cache.TryGetValue v with\r\n                | (true, (r, ref)) -> \r\n                    ref := !ref + 1\r\n                    r\r\n                | _ ->\r\n                    let r = mapping v\r\n                    cache.[v] <- (r, ref 1)\r\n                    r\r\n    /// Revoke returns the function value associated\r\n    /// With the given argument and decreases its reference count.\r\n    member x.RevokeAndGetDeleted (v : 'T1) =\r\n        if isNull v then\r\n            match nullCache with\r\n                | Some (r, ref) -> \r\n                    ref := !ref - 1\r\n                    if !ref = 0 then\r\n                        nullCache <- None\r\n                        (true, r)\r\n                    else\r\n                        (false, r)\r\n                | None -> failwithf \"cannot revoke null\"\r\n        else\r\n            match cache.TryGetValue v with\r\n                | (true, (r, ref)) -> \r\n                    ref := !ref - 1\r\n                    if !ref = 0 then\r\n                        cache.Remove v |> ignore\r\n                        (true, r)\r\n                    else\r\n                        (false, r)\r\n                | _ -> failwithf \"cannot revoke unknown value: %A\" v\r\n                \r\n    /// Revoke returns the function value associated\r\n    /// With the given argument and decreases its reference count.\r\n    member x.RevokeAndGetDeletedTotal (v : 'T1) =\r\n        if isNull v then\r\n            match nullCache with\r\n                | Some (r, ref) -> \r\n                    ref := !ref - 1\r\n                    if !ref = 0 then\r\n                        nullCache <- None\r\n                        Some (true, r)\r\n                    else\r\n                        Some(false, r)\r\n                | None -> \r\n                    None\r\n        else\r\n            match cache.TryGetValue v with\r\n                | (true, (r, ref)) -> \r\n                    ref := !ref - 1\r\n                    if !ref = 0 then\r\n                        cache.Remove v |> ignore\r\n                        Some(true, r)\r\n                    else\r\n                        Some(false, r)\r\n                | _ -> \r\n                    None\r\n\r\n    /// Revoke the value and return its associated cache value.\r\n    member x.Revoke (v : 'T1) =\r\n        x.RevokeAndGetDeleted v |> snd\r\n\r\n    /// Enumerate over all cache values.\r\n    member x.Values = \r\n        cache.Values |> Seq.map fst\r\n","﻿namespace FSharp.Data.Traceable\r\n\r\nopen System\r\nopen System.Collections\r\nopen System.Collections.Generic\r\nopen FSharp.Data.Adaptive\r\n\r\n/// Set comparison result.\r\ntype internal SetCmp =\r\n    | Distinct          = 0\r\n    | ProperSubset      = 1\r\n    | ProperSuperset    = 2\r\n    | Overlap           = 3\r\n    | Equal             = 4\r\n\r\n/// A reference counting set, used for tracing the unions of sets with elements in common.\r\n//\r\n// For example:\r\n//\r\n//  a={1,2,3}\r\n//  b={1}\r\n//  c=union a b // {1,2,3}\r\n//\r\n//  a.remove 1\r\n//  c={1,2,3} // still because 1 was contained twice\r\n//\r\n// We could have solved these problems a different way, but using refcounting simply works and we don't have to care about duplicates in reader implementations...\r\n[<Struct; StructuralEquality; NoComparison>]\r\n[<StructuredFormatDisplay(\"{AsString}\")>]\r\ntype CountingHashSet<'T>(store : HashMap<'T, int>) =\r\n    \r\n    /// Traceable instance.\r\n    static let trace =\r\n        {\r\n            tmonoid = HashSetDelta.monoid\r\n            tempty = CountingHashSet<'T>(HashMap.empty)\r\n            tapplyDelta = fun s d -> s.ApplyDelta d\r\n            tcomputeDelta = fun l r -> l.ComputeDelta r\r\n            tprune = None\r\n            tsize = fun s -> s.Count\r\n        }\r\n        \r\n    /// Traceable instance without ref-counting.\r\n    static let traceNoRefCount =\r\n        {\r\n            tmonoid = HashSetDelta.monoid\r\n            tempty = CountingHashSet<'T>(HashMap.empty)\r\n            tapplyDelta = fun s d -> s.ApplyDeltaNoRefCount d\r\n            tcomputeDelta = fun l r -> l.ComputeDelta r\r\n            tprune = None\r\n            tsize = fun s -> s.Count\r\n        }\r\n\r\n    /// The empty set.\r\n    static member Empty = CountingHashSet<'T>(HashMap.empty)\r\n\r\n    /// Traceable instance.\r\n    static member Trace = trace\r\n\r\n    /// Traceable instance without ref-counting.\r\n    static member TraceNoRefCount = traceNoRefCount\r\n\r\n    /// Is the set empty?\r\n    member x.IsEmpty = store.IsEmpty\r\n\r\n    /// The number of entries in the set (excluding ref-counts).\r\n    member x.Count = store.Count\r\n\r\n    /// Internal for getting the store\r\n    member internal x.Store = store\r\n\r\n    /// Creates a HashSet with the same entries.\r\n    member x.ToHashSet() =\r\n        let setStore = store.Store |> IntMap.map (List.map (fun struct(k,_) -> k))\r\n        HashSet(x.Count, setStore)\r\n\r\n    /// Checks whether the given value is contained in the set.\r\n    member x.Contains (value : 'T) =\r\n        HashMap.containsKey value store\r\n    \r\n    /// Gets the reference-count for the given value (0 if not contained)\r\n    member x.GetRefCount (value : 'T) =\r\n        HashMap.tryFind value store |> Option.defaultValue 0\r\n\r\n    /// Adds the given value to the set. (one reference)\r\n    member x.Add(value : 'T) =\r\n        store\r\n        |> HashMap.update value (fun o -> \r\n            match o with\r\n                | Some o -> o + 1\r\n                | None -> 1\r\n        )\r\n        |> CountingHashSet\r\n\r\n    /// Removes the given value from the set. (one reference)\r\n    member x.Remove(value : 'T) =\r\n        store\r\n        |> HashMap.alter value (fun o ->\r\n            match o with\r\n                | Some 1 -> None\r\n                | Some c -> Some (c - 1)\r\n                | None -> None\r\n        )\r\n        |> CountingHashSet\r\n\r\n    /// Changes the reference-count for the given element.\r\n    member x.Alter(value : 'T, f : int -> int) =\r\n        store\r\n        |> HashMap.alter value (fun o ->\r\n            let o = defaultArg o 0\r\n            let n = f o\r\n            if n > 0 then\r\n                Some n\r\n            else\r\n                None\r\n        )\r\n        |> CountingHashSet\r\n\r\n    /// Unions the two sets.\r\n    member x.Union(other : CountingHashSet<'T>) =\r\n        HashMap.map2 (fun k l r ->\r\n            match l, r with \r\n                | Some l, Some r -> l + r\r\n                | Some l, None -> l\r\n                | None, Some r -> r\r\n                | None, None -> 0\r\n        ) store other.Store\r\n        |> CountingHashSet\r\n\r\n    /// Computes the set difference for both sets. (this - other)\r\n    member x.Difference(other : CountingHashSet<'T>) =\r\n        HashMap.choose2 (fun k l r ->\r\n            let newRefCount = \r\n                match l, r with \r\n                    | Some l, Some r -> l - r\r\n                    | Some l, None -> l\r\n                    | None, Some r -> 0\r\n                    | None, None -> 0\r\n\r\n            if newRefCount > 0 then Some newRefCount\r\n            else None\r\n        ) store other.Store\r\n        |> CountingHashSet\r\n\r\n    /// Computes the intersection of both sets.\r\n    member x.Intersect(other : CountingHashSet<'T>) =\r\n        HashMap.choose2 (fun k l r ->\r\n            match l, r with \r\n                | Some l, Some r -> Some (min l r)\r\n                | _ -> None\r\n        ) store other.Store\r\n        |> CountingHashSet\r\n\r\n    /// Unions both sets using resolve to aggregate ref-counts.\r\n    member x.UnionWith(other : CountingHashSet<'T>, resolve : int -> int -> int) =\r\n        HashMap.map2 (fun k l r ->\r\n            match l, r with \r\n                | Some l, Some r -> resolve l r\r\n                | Some l, None -> resolve l 0\r\n                | None, Some r -> resolve 0 r\r\n                | None, None -> resolve 0 0\r\n        ) store other.Store\r\n        |> CountingHashSet\r\n\r\n    /// Gets the HashMap representation of the set.\r\n    member x.ToHashMap() =\r\n        store\r\n\r\n    /// All elements in the set.\r\n    member x.ToSeq() =\r\n        store.ToSeq() |> Seq.map fst\r\n        \r\n    /// All elements in the set.\r\n    member x.ToList() =\r\n        store.ToList() |> List.map fst\r\n        \r\n    /// All elements in the set.\r\n    member x.ToArray() =\r\n        let result = Array.zeroCreate store.Count\r\n        let mutable i = 0\r\n        for (key, _value) in store do\r\n            result.[i] <- key\r\n            i <- i + 1\r\n        result\r\n\r\n    /// Creates a new set by applying the given function to all elements.\r\n    member x.Map(mapping : 'T -> 'B) =\r\n        let mutable res = HashMap.empty\r\n        for (k,v) in HashMap.toSeq store do\r\n            let k = mapping k\r\n            res <- res |> HashMap.update k (fun o -> defaultArg o 0 + v) \r\n\r\n        CountingHashSet res\r\n        \r\n    /// Creates a new set by applying the given function to all elements.\r\n    member x.Choose(mapping : 'T -> option<'B>) =\r\n        let mutable res = HashMap.empty\r\n        for (k,v) in HashMap.toSeq store do\r\n            match mapping k with\r\n                | Some k ->\r\n                    res <- res |> HashMap.update k (fun o -> defaultArg o 0 + v) \r\n                | None ->\r\n                    ()\r\n\r\n        CountingHashSet res\r\n        \r\n    /// Creates a new set filtered by the given predicate.\r\n    member x.Filter(predicate : 'T -> bool) =\r\n        store |> HashMap.filter (fun k _ -> predicate k) |> CountingHashSet\r\n\r\n    /// Creates a new set with all elements from all created sets.  (respecting ref-counts)\r\n    member x.Collect(mapping : 'T -> CountingHashSet<'B>) =\r\n        let mutable res = CountingHashSet<'B>.Empty\r\n        for (k,ro) in store.ToSeq() do\r\n            let r = mapping k\r\n            if ro = 1 then\r\n                res <- res.Union r\r\n            else\r\n                res <- res.UnionWith(r, fun li ri -> li + ro * ri)\r\n        res\r\n\r\n    /// Iterates over all set elements. (once)\r\n    member x.Iter (iterator : 'T -> unit) =\r\n        store |> HashMap.iter (fun k _ -> iterator k)\r\n\r\n    /// Checks whether an element fulfilling the predicate exists.\r\n    member x.Exists (predicate : 'T -> bool) =\r\n        store |> HashMap.exists (fun k _ -> predicate k)\r\n        \r\n    /// Checks whether all elements fulfill the predicate.\r\n    member x.Forall (predicate : 'T -> bool) =\r\n        store |> HashMap.forall (fun k _ -> predicate k)\r\n\r\n    /// Folds over all elements in the set.\r\n    member x.Fold (seed : 'S, folder : 'S -> 'T -> 'S) =\r\n        store |> HashMap.fold (fun s k _ -> folder s k) seed \r\n\r\n    /// Creates a set holding all the given values. (with reference counts)\r\n    static member OfSeq (seq : seq<'T>) =\r\n        let mutable res = CountingHashSet<'T>.Empty\r\n        for e in seq do\r\n            res <- res.Add e\r\n        res\r\n        \r\n    /// Creates a set holding all the given values. (with reference counts)\r\n    static member OfList (list : list<'T>) =\r\n        CountingHashSet<'T>.OfSeq list\r\n        \r\n    /// Creates a set holding all the given values. (with reference counts)\r\n    static member OfArray (arr : 'T[]) =\r\n        CountingHashSet<'T>.OfSeq arr\r\n        \r\n    /// Creates a set holding all the given values. (with reference counts)\r\n    static member OfHashMap (map : HashMap<'T, int>) =\r\n        CountingHashSet map\r\n        \r\n    /// Creates a set holding all the given values.\r\n    static member OfHashSet (set : HashSet<'T>) =\r\n        let mapStore = set.Store |> IntMap.map (List.map (fun a -> struct(a,1)))\r\n        CountingHashSet(HashMap(set.Count, mapStore))\r\n\r\n    /// Differentiates two sets returning a HashSetDelta.\r\n    member x.ComputeDelta(other : CountingHashSet<'T>) =\r\n        // O(1)\r\n        if Object.ReferenceEquals(store.Store, other.Store.Store) then\r\n            HashSetDelta.empty\r\n\r\n        // O(other)\r\n        elif store.IsEmpty then \r\n            other.Store |> HashMap.map (fun _ _ -> 1) |> HashSetDelta.ofHashMap\r\n\r\n        // O(N)\r\n        elif other.IsEmpty then\r\n            store |> HashMap.map (fun _ _ -> -1) |> HashSetDelta.ofHashMap\r\n        \r\n        // O(N + other)\r\n        else\r\n            let mutable cnt = 0\r\n\r\n            let del (l : list<struct ('T * int)>) =\r\n                l |> List.map (fun struct(v,_) -> cnt <- cnt + 1; struct (v, -1))\r\n            \r\n            let add (l : list<struct('T * int)>) =\r\n                l |> List.map (fun struct(v,_) -> cnt <- cnt + 1; struct (v, 1))\r\n\r\n            let both (_hash : int) (l : list<struct('T * int)>) (r : list<struct('T * int)>) =\r\n                HashMapList.mergeWithOption' (fun v l r ->\r\n                    match l, r with\r\n                    | Some l, None ->  cnt <- cnt + 1; Some -1\r\n                    | None, Some r ->  cnt <- cnt + 1; Some 1\r\n                    | _ -> None\r\n                ) l r\r\n\r\n            let store = IntMap.computeDelta both (IntMap.map del) (IntMap.map add) store.Store other.Store.Store\r\n            HashSetDelta (HashMap(cnt, store))\r\n\r\n    /// Same as x.ComputeDelta(empty)\r\n    member x.RemoveAll() =\r\n        store |> HashMap.map (fun _ v -> -1) |> HashSetDelta\r\n        \r\n    /// Same as empty.ComputeDelta(x)\r\n    member x.AddAll() =\r\n        store |> HashMap.map (fun _ v -> 1) |> HashSetDelta\r\n\r\n    /// Integrates the given delta into the set, returns a new set and the effective deltas.\r\n    member x.ApplyDelta (deltas : HashSetDelta<'T>) =\r\n        // O(1)\r\n        if deltas.IsEmpty then\r\n            x, deltas\r\n\r\n        // O(Delta)\r\n        elif store.IsEmpty then\r\n            let mutable maxDelta = 0\r\n            let state = deltas |> HashSetDelta.toHashMap |> HashMap.filter (fun _ d -> maxDelta <- max maxDelta d; d > 0)\r\n            let delta = \r\n                if maxDelta > 1 then state |> HashMap.map (fun _ _ -> 1)\r\n                else state\r\n\r\n            CountingHashSet state, HashSetDelta delta\r\n\r\n        // O(Delta * log N)\r\n        elif deltas.Count * 5 < store.Count then\r\n            let mutable res = store\r\n\r\n            let effective =\r\n                deltas |> HashSetDelta.choose (fun d ->\r\n                    let mutable delta = Unchecked.defaultof<SetOperation<'T>>\r\n                    let value = d.Value\r\n                    res <- res |> HashMap.alter value (fun cnt ->\r\n                        let o = defaultArg cnt 0\r\n                        let n = o + d.Count\r\n                        if n > 0 && o = 0 then \r\n                            delta <- Add(value)\r\n                        elif n = 0 && o > 0 then\r\n                            delta <- Rem(value)\r\n\r\n                        if n <= 0 then None\r\n                        else Some n\r\n                    )\r\n\r\n                    if delta.Count <> 0 then Some delta\r\n                    else None\r\n                )\r\n\r\n            CountingHashSet res, effective\r\n\r\n        // O(Delta + N)\r\n        else\r\n            let mutable effective = HashSetDelta.empty\r\n            let deltas = HashSetDelta.toHashMap deltas\r\n            let newStore = \r\n                (store, deltas) ||> HashMap.choose2 (fun k s d ->\r\n                    match d with\r\n                    | Some d ->\r\n                        let o = Option.defaultValue 0 s \r\n                        let n = d + o\r\n                        if o = 0 && n > 0 then\r\n                            effective <- HashSetDelta.add (Add k) effective\r\n                        elif o > 0 && n = 0 then\r\n                            effective <- HashSetDelta.add (Rem k) effective\r\n                            \r\n                        if n <= 0 then None\r\n                        else Some n\r\n                    | None ->\r\n                        s\r\n                ) \r\n\r\n            CountingHashSet newStore, effective\r\n\r\n    /// Integrates the given delta into the set without ref-counting, returns a new set and the effective deltas.\r\n    member x.ApplyDeltaNoRefCount (deltas : HashSetDelta<'T>) =\r\n        // O(1)\r\n        if deltas.IsEmpty then\r\n            x, deltas\r\n\r\n        // O(Delta)\r\n        elif store.IsEmpty then\r\n            let state = deltas |> HashSetDelta.toHashMap |> HashMap.choose (fun _ d -> if d > 0 then Some 1 else None)\r\n            CountingHashSet state, HashSetDelta state\r\n\r\n        // O(Delta * log N)\r\n        elif deltas.Count * 5 < store.Count then\r\n            let mutable res = store\r\n\r\n            let effective =\r\n                deltas |> HashSetDelta.choose (fun d ->\r\n                    let mutable delta = Unchecked.defaultof<SetOperation<'T>>\r\n                    let value = d.Value\r\n                    res <- res |> HashMap.alter value (fun cnt ->\r\n                        let o = defaultArg cnt 0\r\n                        let n = \r\n                            if d.Count > 0 then 1 \r\n                            elif d.Count < 0 then 0\r\n                            else o\r\n\r\n                        if n > 0 && o = 0 then \r\n                            delta <- Add(value)\r\n                        elif n = 0 && o > 0 then\r\n                            delta <- Rem(value)\r\n\r\n                        if n <= 0 then None\r\n                        else Some n\r\n                    )\r\n\r\n                    if delta.Count <> 0 then Some delta\r\n                    else None\r\n                )\r\n\r\n            CountingHashSet res, effective\r\n        \r\n        // O(Delta + N)\r\n        else\r\n            let mutable effective = HashSetDelta.empty\r\n            let deltas = HashSetDelta.toHashMap deltas\r\n            let newStore = \r\n                HashMap.choose2 (fun k s d ->\r\n                    match d with\r\n                    | Some d ->\r\n                        let o = Option.defaultValue 0 s \r\n                        let n = if d > 0 then 1 elif d < 0 then 0 else o\r\n\r\n                        if o = 0 && n > 0 then\r\n                            effective <- HashSetDelta.add (Add k) effective\r\n                        elif o > 0 && n = 0 then\r\n                            effective <- HashSetDelta.add (Rem k) effective\r\n                            \r\n                        if n <= 0 then None\r\n                        else Some n\r\n                    | None ->\r\n                        s\r\n                ) store deltas\r\n\r\n            CountingHashSet newStore, effective\r\n\r\n    /// Compares two sets.\r\n    static member internal Compare(l : CountingHashSet<'T>, r : CountingHashSet<'T>) =\r\n        let i = l.Intersect r\r\n        let b = i.Count\r\n        let lo = l.Count - b\r\n        let ro = r.Count - b\r\n\r\n        match lo, b, ro with\r\n        | 0, _, 0 -> SetCmp.Equal\r\n        | _, 0, _ -> SetCmp.Distinct\r\n        | a, _, 0 -> SetCmp.ProperSuperset\r\n        | 0, _, a -> SetCmp.ProperSubset\r\n        | _, _, _ -> SetCmp.Overlap\r\n\r\n    override x.ToString() =\r\n        let suffix =\r\n            if x.Count > 5 then \"; ...\"\r\n            else \"\"\r\n\r\n        let content =\r\n            x.ToSeq() |> Seq.truncate 5 |> Seq.map (sprintf \"%A\") |> String.concat \"; \"\r\n\r\n        \"CountingHashSet [\" + content + suffix + \"]\"\r\n\r\n    member private x.AsString = x.ToString()\r\n\r\n    interface IEnumerable with\r\n        member x.GetEnumerator() = new CountingHashSetEnumerator<_>(store) :> _\r\n\r\n    interface IEnumerable<'T> with\r\n        member x.GetEnumerator() = new CountingHashSetEnumerator<_>(store) :> _\r\n\r\n/// An enumerator for CountingHashSet.\r\nand private CountingHashSetEnumerator<'T>(store : HashMap<'T, int>) =\r\n    let e = (store :> seq<_>).GetEnumerator()\r\n\r\n    member x.Current = \r\n        let (v,_) = e.Current\r\n        v\r\n\r\n    interface IEnumerator with\r\n        member x.MoveNext() = e.MoveNext()\r\n        member x.Current = x.Current :> obj\r\n        member x.Reset() = e.Reset()\r\n\r\n    interface IEnumerator<'T> with\r\n        member x.Dispose() = e.Dispose()\r\n        member x.Current = x.Current\r\n\r\n/// Functional operators for CountingHashSet.\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule CountingHashSet =\r\n\r\n    /// The empty set.\r\n    let inline empty<'T> = CountingHashSet<'T>.Empty\r\n\r\n    /// A set holding a single value.\r\n    let single v = CountingHashSet (HashMap.single v 1)\r\n\r\n    /// Creates a HashMap with all the contained values and ref-counts.\r\n    let inline toHashMap (set : CountingHashSet<'T>) = set.ToHashMap()\r\n\r\n    /// A seq containing all elements from the set. (once)\r\n    let inline toSeq (set : CountingHashSet<'T>) = set.ToSeq()\r\n    \r\n    /// A list containing all elements from the set. (once)\r\n    let inline toList (set : CountingHashSet<'T>) = set.ToList()\r\n    \r\n    /// An array containing all elements from the set. (once)\r\n    let inline toArray (set : CountingHashSet<'T>) = set.ToArray()\r\n    \r\n    /// A HashSet containing all elements from the set.\r\n    let inline toHashSet (set : CountingHashSet<'T>) = set.ToHashSet()\r\n\r\n    /// Creates a set from the given HashMap containing ref-counts.\r\n    let inline ofHashMap (map : HashMap<'T, int>) = CountingHashSet.OfHashMap map\r\n    \r\n    /// Creates a set holding all the given values.\r\n    let inline ofHashSet (set : HashSet<'T>) = CountingHashSet.OfHashSet set\r\n\r\n    /// Creates a set holding all the given values.\r\n    let inline ofSeq (seq : seq<'T>) = CountingHashSet.OfSeq seq\r\n\r\n    /// Creates a set holding all the given values.\r\n    let inline ofList (list : list<'T>) = CountingHashSet.OfList list\r\n\r\n    /// Creates a set holding all the given values.\r\n    let inline ofArray (arr : 'T[]) = CountingHashSet.OfArray arr\r\n\r\n    /// Is the set empty?\r\n    let inline isEmpty (set : CountingHashSet<'T>) =\r\n        set.IsEmpty\r\n\r\n    /// The number of entries in the set (excluding ref-counts).\r\n    let inline count (set : CountingHashSet<'T>) =\r\n        set.Count\r\n\r\n    /// Gets the reference-count for the given value (0 if not contained)\r\n    let inline refcount (value : 'T) (set : CountingHashSet<'T>) =\r\n        set.GetRefCount value\r\n\r\n    /// Checks whether the given value is contained in the set.\r\n    let inline contains (value : 'T) (set : CountingHashSet<'T>) =\r\n        set.Contains value\r\n\r\n    /// Adds the given value to the set. (one reference)\r\n    let inline add (value : 'T) (set : CountingHashSet<'T>) =\r\n        set.Add value\r\n        \r\n    /// Removes the given value from the set. (one reference)\r\n    let inline remove (value : 'T) (set : CountingHashSet<'T>) =\r\n        set.Remove value\r\n\r\n    /// Unions the two sets.\r\n    let inline union (l : CountingHashSet<'T>) (r : CountingHashSet<'T>) =\r\n        l.Union r\r\n\r\n    /// Computes the set difference for both sets. (l - r)\r\n    let inline difference (l : CountingHashSet<'T>) (r : CountingHashSet<'T>) =\r\n        l.Difference r\r\n\r\n    /// Computes the intersection of both sets.\r\n    let inline intersect (l : CountingHashSet<'T>) (r : CountingHashSet<'T>) =\r\n        l.Intersect r\r\n\r\n    /// Changes the reference-count for the given element.\r\n    let inline alter (value : 'T) (f : int -> int) (set : CountingHashSet<'T>) =\r\n        set.Alter(value, f)\r\n\r\n    /// Creates a new set by applying the given function to all elements.\r\n    let inline map (mapping : 'A -> 'B) (set : CountingHashSet<'A>) =\r\n        set.Map mapping\r\n\r\n    /// Creates a new set by applying the given function to all elements.\r\n    let inline choose (mapping : 'A -> option<'B>) (set : CountingHashSet<'A>) =\r\n        set.Choose mapping\r\n\r\n    /// Creates a new set filtered by the given predicate.\r\n    let inline filter (predicate : 'T -> bool) (set : CountingHashSet<'T>) =\r\n        set.Filter predicate\r\n\r\n    /// Creates a new set with all elements from all created sets. (respecting ref-counts)\r\n    let inline collect (mapping : 'A -> CountingHashSet<'B>) (set : CountingHashSet<'A>) =\r\n        set.Collect mapping\r\n\r\n    /// Iterates over all set elements. (once)    \r\n    let inline iter (iterator : 'T -> unit) (set : CountingHashSet<'T>) =\r\n        set.Iter iterator\r\n\r\n    /// Checks whether an element fulfilling the predicate exists.\r\n    let inline exists (predicate : 'T -> bool) (set : CountingHashSet<'T>) =\r\n        set.Exists predicate\r\n\r\n    /// Checks whether all elements fulfill the predicate.\r\n    let inline forall (predicate : 'T -> bool) (set : CountingHashSet<'T>) =\r\n        set.Forall predicate\r\n\r\n    /// Folds over all elements in the set.\r\n    let inline fold (folder : 'S -> 'T -> 'S) (seed : 'S) (set : CountingHashSet<'T>) =\r\n        set.Fold(seed, folder)\r\n\r\n    /// Traceable instance.\r\n    let inline trace<'T> = CountingHashSet<'T>.Trace\r\n\r\n    /// Traceable instance without ref-counting.\r\n    let inline traceNoRefCount<'T> = CountingHashSet<'T>.TraceNoRefCount\r\n\r\n    /// Differentiates two sets returning a HashSetDelta.\r\n    let inline computeDelta (src : CountingHashSet<'T>) (dst : CountingHashSet<'T>) =\r\n        src.ComputeDelta dst\r\n\r\n    /// Same as computeDelta src empty.\r\n    let inline removeAll (src : CountingHashSet<'T>) =\r\n        src.RemoveAll()\r\n        \r\n    /// Same as computeDelta empty src.\r\n    let inline addAll (src : CountingHashSet<'T>) =\r\n        src.AddAll()\r\n\r\n    /// Integrates the given delta into the set, returns a new set and the effective deltas.\r\n    let inline applyDelta (set : CountingHashSet<'T>) (delta : HashSetDelta<'T>) =\r\n        set.ApplyDelta delta\r\n\r\n    /// Integrates the given delta into the set without ref-counting, returns a new set and the effective deltas.\r\n    let inline applyDeltaNoRefCount (set : CountingHashSet<'T>) (delta : HashSetDelta<'T>) =\r\n        set.ApplyDeltaNoRefCount delta\r\n        \r\n    /// Compares two sets.\r\n    let internal compare (l : CountingHashSet<'T>) (r : CountingHashSet<'T>) =\r\n        CountingHashSet.Compare(l,r)\r\n\r\n","﻿namespace FSharp.Data.Adaptive\r\n\r\n[<Struct>]\r\ntype AdaptiveReduction<'a, 's, 'v> =\r\n    {\r\n        seed    : 's\r\n        add     : 's -> 'a -> 's\r\n        sub     : 's -> 'a -> ValueOption<'s>\r\n        view    : 's -> 'v\r\n    }\r\n\r\nmodule AdaptiveReduction =\r\n\r\n    let par (l : AdaptiveReduction<'a, 's, 'v>) (r : AdaptiveReduction<'a, 't, 'w>) =\r\n        {\r\n            seed = (l.seed, r.seed)\r\n            add = fun (s, t) a -> (l.add s a, r.add t a)\r\n            sub = fun (s, t) a ->\r\n                match l.sub s a with\r\n                | ValueSome s ->\r\n                    match r.sub t a with\r\n                    | ValueSome t -> ValueSome(s,t)\r\n                    | _ -> ValueNone\r\n                | ValueNone ->\r\n                    ValueNone\r\n            view = fun (s,t) -> (l.view s, r.view t)\r\n        }\r\n\r\n    let structpar (l : AdaptiveReduction<'a, 's, 'v>) (r : AdaptiveReduction<'a, 't, 'w>) =\r\n        {\r\n            seed = struct(l.seed, r.seed)\r\n            add = fun struct (s, t) a -> struct(l.add s a, r.add t a)\r\n            sub = fun struct (s, t) a ->\r\n                match l.sub s a with\r\n                | ValueSome s ->\r\n                    match r.sub t a with\r\n                    | ValueSome t -> ValueSome(struct (s,t))\r\n                    | _ -> ValueNone\r\n                | ValueNone ->\r\n                    ValueNone\r\n            view = fun struct (s,t) -> struct (l.view s, r.view t)\r\n        }\r\n\r\n    let mapIn (mapping : 'a -> 'b) (reduction : AdaptiveReduction<'b, 's, 'v>) =\r\n        {\r\n            seed = reduction.seed\r\n            add = fun s a -> reduction.add s (mapping a)\r\n            sub = fun s a -> reduction.sub s (mapping a)\r\n            view = reduction.view\r\n        }\r\n        \r\n    let mapOut (mapping : 'v -> 'w) (reduction : AdaptiveReduction<'b, 's, 'v>) =\r\n        {\r\n            seed = reduction.seed\r\n            add = reduction.add\r\n            sub = reduction.sub\r\n            view = reduction.view >> mapping\r\n        }\r\n\r\n    [<GeneralizableValue>]\r\n    let count<'a> : AdaptiveReduction<'a, int, int> =\r\n        {\r\n            seed = LanguagePrimitives.GenericZero\r\n            add = fun s a -> s + 1\r\n            sub = fun s a -> ValueSome (s - 1)\r\n            view = id\r\n        }\r\n\r\n    let group (zero : 's) (add : 's -> 'a -> 's) (sub : 's -> 'a -> 's) =\r\n        {\r\n            seed = zero\r\n            add = add\r\n            sub = fun s a -> ValueSome(sub s a)\r\n            view = id\r\n        }\r\n\r\n    let halfGroup (zero : 's) (add : 's -> 'a -> 's) (sub : 's -> 'a -> ValueOption<'s>) =\r\n        {\r\n            seed = zero\r\n            add = add\r\n            sub = sub\r\n            view = id\r\n        }\r\n\r\n    let fold (zero : 's) (add : 's -> 'a -> 's) =\r\n        {\r\n            seed = zero\r\n            add = add\r\n            sub = fun _ _ -> ValueNone\r\n            view = id\r\n        }\r\n\r\n\r\n    let countPositive : AdaptiveReduction<bool, int, int> =\r\n        let inline convert (v : bool) =\r\n            if v then 1\r\n            else 0\r\n        {\r\n            seed = LanguagePrimitives.GenericZero\r\n            add = fun s a -> s + convert a\r\n            sub = fun s a -> ValueSome (s - convert a)\r\n            view = id\r\n        }\r\n\r\n    let countNegative : AdaptiveReduction<bool, int, int> =\r\n        let inline convert (v : bool) =\r\n            if v then 0\r\n            else 1\r\n        {\r\n            seed = LanguagePrimitives.GenericZero\r\n            add = fun s a -> s + convert a\r\n            sub = fun s a -> ValueSome (s - convert a)\r\n            view = id\r\n        }\r\n\r\n    let tryMin<'a when 'a : comparison> =\r\n        let add (o : ValueOption<'a>) (v : 'a) =\r\n            match o with\r\n            | ValueSome o -> ValueSome (min o v)\r\n            | ValueNone -> ValueSome v\r\n            \r\n        let trySub (o : ValueOption<'a>) (v : 'a) =\r\n            match o with\r\n            | ValueSome o ->\r\n                if v > o then ValueSome (ValueSome o)\r\n                else ValueNone\r\n            | ValueNone -> \r\n                ValueSome ValueNone\r\n\r\n        {\r\n            seed = ValueNone\r\n            add = add\r\n            sub = trySub\r\n            view = id\r\n        }\r\n\r\n    let tryMax<'a when 'a : comparison> =\r\n        let add (o : ValueOption<'a>) (v : 'a) =\r\n            match o with\r\n            | ValueSome o -> ValueSome (max o v)\r\n            | ValueNone -> ValueSome v\r\n            \r\n        let trySub (o : ValueOption<'a>) (v : 'a) =\r\n            match o with\r\n            | ValueSome o ->\r\n                if v < o then ValueSome (ValueSome o)\r\n                else ValueNone\r\n            | ValueNone -> \r\n                ValueSome ValueNone\r\n\r\n        {\r\n            seed = ValueNone\r\n            add = add\r\n            sub = trySub\r\n            view = id\r\n        }\r\n        \r\n\r\n    let inline sum() =\r\n        {\r\n            seed = LanguagePrimitives.GenericZero\r\n            add = fun s a -> s + a\r\n            sub = fun s a -> ValueSome (s - a)\r\n            view = id\r\n        }\r\n        \r\n    let inline average() =\r\n        {\r\n            seed = struct(0, LanguagePrimitives.GenericZero)\r\n            add = fun struct(c, s) a -> struct(c + 1, s + a)\r\n            sub = fun struct(c, s) a -> ValueSome (struct (c - 1, s - a))\r\n            view = fun struct(c, s) -> LanguagePrimitives.DivideByInt s c\r\n        }\r\n\r\n    let inline product() =\r\n        {\r\n            seed = LanguagePrimitives.GenericOne\r\n            add = fun s a -> s * a\r\n            sub = fun s a -> if a <> LanguagePrimitives.GenericZero then ValueSome (s / a) else ValueNone\r\n            view = id\r\n        }","namespace FSharp.Data.Adaptive\r\n\r\nopen FSharp.Data.Traceable\r\n\r\n/// An adaptive reader for aset that allows to pull operations and exposes its current state.\r\ntype IHashSetReader<'T> = IOpReader<CountingHashSet<'T>, HashSetDelta<'T>>\r\n\r\n/// Adaptive set datastructure.\r\ntype AdaptiveHashSet<'T> =\r\n    /// Is the set constant?\r\n    abstract member IsConstant : bool\r\n\r\n    /// The current content of the set as aval.\r\n    abstract member Content : aval<HashSet<'T>>\r\n\r\n    /// Gets a new reader to the set.\r\n    abstract member GetReader : unit -> IHashSetReader<'T>\r\n\r\n    /// Gets the underlying History instance for the aset (if any)\r\n    abstract member History : option<History<CountingHashSet<'T>, HashSetDelta<'T>>>\r\n\r\nand aset<'T> = AdaptiveHashSet<'T>\r\n\r\n\r\n/// Internal implementations for aset reductions.\r\nmodule SetReductions =\r\n    \r\n    /// aval for reduce operations.\r\n    type ReduceValue<'a, 's, 'v>(reduction : AdaptiveReduction<'a, 's, 'v>, input : aset<'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = input.GetReader()\r\n        let mutable sum = reduction.seed\r\n\r\n        let mutable result = Unchecked.defaultof<'v>\r\n\r\n        member x.GetValue(token : AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges token\r\n                    let mutable working = true\r\n                    use e = (ops :> seq<_>).GetEnumerator()\r\n                    while working && e.MoveNext() do\r\n                        let op = e.Current\r\n                        match op with\r\n                        | Add(_, a) ->\r\n                            sum <- reduction.add sum a\r\n\r\n                        | Rem(_, old) ->\r\n                            match reduction.sub sum old with\r\n                            | ValueSome s -> sum <- s\r\n                            | ValueNone -> working <- false\r\n\r\n                    if not working then\r\n                        sum <- reader.State |> Seq.fold reduction.add reduction.seed\r\n\r\n                    result <- reduction.view sum\r\n\r\n                result\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = \r\n                x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t\r\n            \r\n    /// aval for reduceBy operations.\r\n    type ReduceByValue<'a, 'b, 's, 'v>(reduction : AdaptiveReduction<'b, 's, 'v>, mapping : 'a -> 'b, input : aset<'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = input.GetReader()\r\n        let mutable sum = ValueSome reduction.seed\r\n\r\n        let mutable result = Unchecked.defaultof<'v>\r\n        let mutable state = HashMap.empty<'a, 'b>\r\n\r\n        let add (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> ValueSome (reduction.add s v)\r\n            | ValueNone -> ValueNone\r\n            \r\n        let sub (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> reduction.sub s v\r\n            | ValueNone -> ValueNone\r\n\r\n        member x.GetValue(token : AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges token\r\n                    for op in ops do\r\n                        match op with\r\n                        | Add(_, a) ->\r\n                            match HashMap.tryFind a state with\r\n                            | Some old -> sum <- sub sum old\r\n                            | None -> ()\r\n\r\n                            let b = mapping a\r\n\r\n                            sum <- add sum b\r\n                            state <- HashMap.add a b state\r\n\r\n                        | Rem(_, a) ->\r\n                            match HashMap.tryRemove a state with\r\n                            | Some(old, rest) ->\r\n                                state <- rest\r\n                                sum <- sub sum old\r\n                            | None ->\r\n                                ()\r\n\r\n                    match sum with\r\n                    | ValueSome s ->\r\n                        result <- reduction.view s\r\n                    | ValueNone ->\r\n                        let s = state |> HashMap.fold (fun s _ v -> reduction.add s v) reduction.seed\r\n                        sum <- ValueSome s\r\n                        result <- reduction.view s\r\n\r\n                result\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = \r\n                x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t\r\n\r\n    /// aval for reduceByA operations.\r\n    type AdaptiveReduceByValue<'a, 'b, 's, 'v>(reduction : AdaptiveReduction<'b, 's, 'v>, mapping : 'a -> aval<'b>, l : aset<'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = l.GetReader()\r\n        do reader.Tag <- \"FoldReader\"\r\n\r\n        #if !FABLE_COMPILER\r\n        let dirtyLock = obj()\r\n        #endif\r\n\r\n\r\n        let mutable targets = MultiSetMap.empty<aval<'b>, 'a>\r\n        let mutable state = HashMap.empty<'a, aval<'b> * 'b>\r\n\r\n        let mutable dirty : HashMap<'a, aval<'b>> = HashMap.empty\r\n        let mutable sum = ValueSome reduction.seed\r\n        let mutable res = Unchecked.defaultof<'v>\r\n\r\n        let sub (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> reduction.sub s v\r\n            | ValueNone -> ValueNone\r\n            \r\n        let add (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> ValueSome (reduction.add s v)\r\n            | ValueNone -> ValueNone\r\n\r\n\r\n        let consumeDirty() =\r\n            #if FABLE_COMPILER\r\n            let d = dirty\r\n            dirty <- HashMap.empty\r\n            d\r\n            #else\r\n            lock dirtyLock (fun () ->\r\n                let d = dirty\r\n                dirty <- HashMap.empty\r\n                d\r\n            )\r\n            #endif\r\n\r\n        let removeIndex (x : AdaptiveReduceByValue<_,_,_,_>) (i : 'a) =\r\n            match HashMap.tryRemove i state with\r\n            | Some ((ov, o), newState) ->\r\n                state <- newState\r\n                sum <- sub sum o    \r\n                let rem, newTargets = MultiSetMap.remove ov i targets\r\n                targets <- newTargets\r\n                if rem then ov.Outputs.Remove x |> ignore\r\n                \r\n            | None ->\r\n                ()\r\n\r\n        override x.InputChangedObject(t, o) =\r\n            if isNull o.Tag then\r\n                #if FABLE_COMPILER\r\n                let o = unbox<aval<'b>> o\r\n                for i in MultiSetMap.find o targets do\r\n                    dirty <- HashMap.add i o dirty\r\n                #else\r\n                match o with\r\n                | :? aval<'b> as o ->\r\n                    lock dirtyLock (fun () -> \r\n                        for i in MultiSetMap.find o targets do\r\n                            dirty <- HashMap.add i o dirty\r\n                    )\r\n                | _ -> \r\n                    ()\r\n                #endif\r\n \r\n        member x.GetValue (t : AdaptiveToken) =\r\n            x.EvaluateAlways t (fun t ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges t\r\n                    let mutable dirty = consumeDirty()\r\n                    for op in ops do\r\n                        dirty <- HashMap.remove op.Value dirty\r\n                        match op with\r\n                        | Add(_, v) ->\r\n                            removeIndex x v\r\n\r\n                            let r = mapping v\r\n                            let n = r.GetValue(t)\r\n                            targets <- MultiSetMap.add r v targets\r\n                            state <- HashMap.add v (r, n) state\r\n                            sum <- add sum n\r\n\r\n                        | Rem(_, v) ->\r\n                            removeIndex x v\r\n\r\n\r\n                    for (i, r) in dirty do\r\n                        let n = r.GetValue(t)\r\n                        state <-\r\n                            state |> HashMap.alter i (fun old ->\r\n                                match old with\r\n                                | Some (ro, o) -> \r\n                                    assert(ro = r)\r\n                                    sum <- add (sub sum o) n\r\n                                | None -> \r\n                                    sum <- add sum n\r\n                                Some (r, n)\r\n                            )\r\n\r\n                    match sum with\r\n                    | ValueNone ->\r\n                        let s = state |> HashMap.fold (fun s _ (_,v) -> reduction.add s v) reduction.seed\r\n                        sum <- ValueSome s\r\n                        res <- reduction.view s\r\n                    | ValueSome s ->\r\n                        res <- reduction.view s\r\n\r\n                res\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t  \r\n  \r\n\r\n/// Internal implementations for aset operations.\r\nmodule AdaptiveHashSetImplementation =\r\n\r\n    let inline checkTag (value : 'a) (real : obj) = Unchecked.equals (value :> obj) real\r\n    \r\n    /// Core implementation for a dependent set.\r\n    type AdaptiveHashSetImpl<'T>(createReader : unit -> IOpReader<HashSetDelta<'T>>) =\r\n        let history = History(createReader, CountingHashSet.trace)\r\n        let content = history |> AVal.map CountingHashSet.toHashSet\r\n\r\n        /// Gets a new reader to the set.\r\n        member x.GetReader() : IHashSetReader<'T> =\r\n            history.NewReader()\r\n\r\n        /// Current content of the set as aval.\r\n        member x.Content =\r\n            content\r\n\r\n        interface AdaptiveHashSet<'T> with\r\n            member x.IsConstant = false\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = Some history\r\n\r\n    /// Efficient implementation for an empty adaptive set.\r\n    type EmptySet<'T> private() =   \r\n        static let instance = EmptySet<'T>() :> aset<_>\r\n        let content = AVal.constant HashSet.empty\r\n        let reader = new History.Readers.EmptyReader<CountingHashSet<'T>, HashSetDelta<'T>>(CountingHashSet.trace) :> IHashSetReader<'T>\r\n        static member Instance = instance\r\n        \r\n        member x.Content = content\r\n        member x.GetReader() = reader\r\n        \r\n        interface AdaptiveHashSet<'T> with\r\n            member x.IsConstant = true\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = None\r\n\r\n    /// Efficient implementation for a constant adaptive set.\r\n    type ConstantSet<'T>(content : Lazy<HashSet<'T>>) =\r\n        let value = AVal.delay (fun () -> content.Value)\r\n\r\n        member x.Content = value\r\n\r\n        member x.GetReader() =\r\n            new History.Readers.ConstantReader<_,_>(\r\n                CountingHashSet.trace,\r\n                lazy (HashSet.addAll content.Value),\r\n                lazy (CountingHashSet.ofHashSet content.Value)\r\n            ) :> IHashSetReader<_>\r\n\r\n        interface AdaptiveHashSet<'T> with\r\n            member x.IsConstant = true\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = None\r\n\r\n\r\n    /// Reader for map operations.\r\n    type MapReader<'A, 'B>(input : aset<'A>, mapping : 'A -> 'B) =\r\n        inherit AbstractReader<HashSetDelta<'B>>(HashSetDelta.empty)\r\n            \r\n        let cache = Cache mapping\r\n        let reader = input.GetReader()\r\n        \r\n        static member DeltaMapping (mapping : 'A -> 'B) =    \r\n            let cache = Cache mapping\r\n            HashSetDelta.map (fun d ->\r\n                match d with\r\n                | Add(1, v) -> Add(cache.Invoke v)\r\n                | Rem(1, v) -> Rem(cache.Revoke v)\r\n                | _ -> unexpected()\r\n            )\r\n\r\n        override x.Compute(token) =\r\n            reader.GetChanges token |> HashSetDelta.map (fun d ->\r\n                match d with\r\n                | Add(1, v) -> Add(cache.Invoke v)\r\n                | Rem(1, v) -> Rem(cache.Revoke v)\r\n                | _ -> unexpected()\r\n            )\r\n          \r\n    /// Reader for choose operations.\r\n    type ChooseReader<'A, 'B>(input : aset<'A>, mapping : 'A -> option<'B>) =\r\n        inherit AbstractReader<HashSetDelta<'B>>(HashSetDelta.empty)\r\n            \r\n        let cache = Cache mapping\r\n        let r = input.GetReader()\r\n  \r\n        static member DeltaMapping (mapping : 'A -> option<'B>) =    \r\n            let cache = Cache mapping\r\n            HashSetDelta.choose (fun d ->\r\n                match d with\r\n                | Add(1, v) -> \r\n                    match cache.Invoke v with\r\n                    | Some v -> Some (Add v)\r\n                    | None -> None\r\n\r\n                | Rem(1, v) ->\r\n                    match cache.Revoke v with\r\n                    | Some v -> Some (Rem v)\r\n                    | None -> None\r\n\r\n                | _ -> \r\n                    unexpected()\r\n            )\r\n      \r\n        override x.Compute(token) =\r\n            r.GetChanges token |> HashSetDelta.choose (fun d ->\r\n                match d with\r\n                | Add(1, v) -> \r\n                    match cache.Invoke v with\r\n                    | Some v -> Some (Add v)\r\n                    | None -> None\r\n\r\n                | Rem(1, v) ->\r\n                    match cache.Revoke v with\r\n                    | Some v -> Some (Rem v)\r\n                    | None -> None\r\n\r\n                | _ -> \r\n                    unexpected()\r\n            )\r\n\r\n    /// Reader for filter operations.\r\n    type FilterReader<'T>(input : aset<'T>, predicate : 'T -> bool) =\r\n        inherit AbstractReader<HashSetDelta<'T>>(HashSetDelta.empty)\r\n            \r\n        let cache = Cache predicate\r\n        let r = input.GetReader()\r\n\r\n        static member DeltaMapping (predicate : 'T -> bool) =    \r\n            let cache = Cache predicate\r\n            HashSetDelta.filter (fun d ->\r\n                match d with\r\n                | Add(1, v) -> cache.Invoke v\r\n                | Rem(1, v) -> cache.Revoke v\r\n                | _ -> unexpected()\r\n            )\r\n      \r\n        override x.Compute(token) =\r\n            r.GetChanges token |> HashSetDelta.filter (fun d ->\r\n                match d with\r\n                | Add(1, v) -> cache.Invoke v\r\n                | Rem(1, v) -> cache.Revoke v\r\n                | _ -> unexpected()\r\n            )\r\n\r\n    /// Reader for fully dynamic uinon operations.\r\n    type UnionReader<'T>(input : aset<aset<'T>>) =\r\n        inherit AbstractDirtyReader<IHashSetReader<'T>, HashSetDelta<'T>>(HashSetDelta.monoid, checkTag \"InnerReader\")\r\n\r\n        let reader = input.GetReader()\r\n        let cache = \r\n            Cache(fun (inner : aset<'T>) -> \r\n                let r = inner.GetReader()\r\n                r.Tag <- \"InnerReader\"\r\n                r\r\n            )\r\n        \r\n        override x.Compute(token, dirty) =\r\n            let mutable deltas = \r\n                reader.GetChanges token |> HashSetDelta.collect (fun d ->\r\n                    match d with\r\n                    | Add(1, v) ->\r\n                        // r is no longer dirty since we pull it here.\r\n                        let r = cache.Invoke v\r\n                        dirty.Remove r |> ignore\r\n                        r.GetChanges token\r\n\r\n                    | Rem(1, v) -> \r\n                        // r is no longer dirty since we either pull or destroy it here.\r\n                        let deleted, r = cache.RevokeAndGetDeleted v\r\n                        dirty.Remove r |> ignore\r\n                        if deleted then \r\n                            // in case r was not dirty we need to explicitly remove ourselves\r\n                            // from its output-set. if it was dirty it can't hurt to do so.\r\n                            r.Outputs.Remove x |> ignore\r\n                            CountingHashSet.removeAll r.State\r\n                        else\r\n                            r.GetChanges token\r\n                                \r\n                    | _ -> unexpected()\r\n                )\r\n\r\n            // finally pull all the dirty readers and accumulate the deltas.\r\n            for d in dirty do\r\n                deltas <- HashSetDelta.combine deltas (d.GetChanges token)\r\n\r\n            deltas\r\n\r\n    /// Reader for unioning a constant set of asets.\r\n    type UnionConstantReader<'T>(input : HashSet<aset<'T>>) =\r\n        inherit AbstractDirtyReader<IHashSetReader<'T>, HashSetDelta<'T>>(HashSetDelta.monoid, checkTag \"InnerReader\")\r\n\r\n        let mutable isInitial = true\r\n        let input = \r\n            input |> HashSet.map (fun s -> \r\n                let r = s.GetReader()\r\n                r.Tag <- \"InnerReader\"\r\n                r\r\n            )\r\n        \r\n        override x.Compute(token, dirty) = \r\n            if isInitial then\r\n                isInitial <- false\r\n                // initially we need to pull all inner readers.\r\n                (HashSetDelta.empty, input) ||> HashSet.fold (fun deltas r ->   \r\n                    HashSetDelta.combine deltas (r.GetChanges token)\r\n                )\r\n            else\r\n                // once evaluated only dirty readers need to be pulled.\r\n                (HashSetDelta.empty, dirty) ||> Seq.fold (fun deltas r -> \r\n                    HashSetDelta.combine deltas (r.GetChanges token)\r\n                )\r\n\r\n    /// Reader for unioning a dynamic aset of immutable sets.\r\n    type UnionHashSetReader<'T>(input : aset<HashSet<'T>>) =\r\n        inherit AbstractReader<HashSetDelta<'T>>(HashSetDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n\r\n        override x.Compute(token) =\r\n            reader.GetChanges token |> HashSetDelta.collect (fun d ->\r\n                match d with\r\n                | Add(1, v) -> HashSet.addAll v\r\n                | Rem(1, v) -> HashSet.removeAll v   \r\n                | _ -> unexpected()\r\n            )\r\n\r\n    /// Reader for collect operations.\r\n    type CollectReader<'A, 'B>(input : aset<'A>, mapping : 'A -> aset<'B>) =\r\n        inherit AbstractDirtyReader<IHashSetReader<'B>, HashSetDelta<'B>>(HashSetDelta.monoid, checkTag \"InnerReader\")\r\n\r\n        let reader = input.GetReader()\r\n        let cache = \r\n            Cache(fun value -> \r\n                let reader = (mapping value).GetReader()\r\n                reader.Tag <- \"InnerReader\"\r\n                reader\r\n            )\r\n\r\n        override x.Compute(token,dirty) =\r\n            let mutable deltas = \r\n                reader.GetChanges token |> HashSetDelta.collect (fun d ->\r\n                    match d with\r\n                    | Add(1, value) ->\r\n                        // r is no longer dirty since we pull it here.\r\n                        let r = cache.Invoke value\r\n                        dirty.Remove r |> ignore\r\n                        r.GetChanges token\r\n\r\n                    | Rem(1, value) -> \r\n                        match cache.RevokeAndGetDeletedTotal value with\r\n                        | Some (deleted, r) -> \r\n                            // r is no longer dirty since we either pull or destroy it here.\r\n                            dirty.Remove r |> ignore\r\n                            if deleted then \r\n                                // in case r was not dirty we need to explicitly remove ourselves\r\n                                // from its output-set. if it was dirty it can't hurt to do so.\r\n                                r.Outputs.Remove x |> ignore\r\n                                CountingHashSet.removeAll r.State\r\n                            else\r\n                                r.GetChanges token\r\n                        | None -> \r\n                            // weird\r\n                            HashSetDelta.empty\r\n                                \r\n                    | _ -> unexpected()\r\n                )\r\n                \r\n            // finally pull all the dirty readers and accumulate the deltas.\r\n            for d in dirty do\r\n                deltas <- HashSetDelta.combine deltas (d.GetChanges token)\r\n\r\n            deltas\r\n\r\n    /// Reader for aval<HashSet<_>>\r\n    type AValReader<'S, 'A when 'S :> seq<'A>>(input : aval<'S>) =\r\n        inherit AbstractReader<HashSetDelta<'A>>(HashSetDelta.empty)\r\n\r\n        let mutable oldSet = HashSet.empty\r\n\r\n        override x.Compute(token) =\r\n            let newSet = input.GetValue token :> seq<_> |> HashSet.ofSeq\r\n            let deltas = HashSet.computeDelta oldSet newSet\r\n            oldSet <- newSet\r\n            deltas\r\n\r\n    /// Reader for bind operations.\r\n    type BindReader<'A, 'B>(input : aval<'A>, mapping : 'A -> aset<'B>) =\r\n        inherit AbstractReader<HashSetDelta<'B>>(HashSetDelta.empty)\r\n            \r\n        let mutable valChanged = 0\r\n        let mutable cache : option<'A * IHashSetReader<'B>> = None\r\n            \r\n        override x.InputChangedObject(_, i) =\r\n            if System.Object.ReferenceEquals(i, input) then\r\n                valChanged <- 1\r\n\r\n        override x.Compute(token) =\r\n            let newValue = input.GetValue token\r\n            #if FABLE_COMPILER\r\n            let valChanged = let v = valChanged in valChanged <- 0; v = 1\r\n            #else\r\n            let valChanged = System.Threading.Interlocked.Exchange(&valChanged, 0) = 1\r\n            #endif \r\n\r\n            match cache with\r\n            | Some(oldValue, oldReader) when valChanged && not (cheapEqual oldValue newValue) ->\r\n                // input changed\r\n                let rem = CountingHashSet.removeAll oldReader.State\r\n                oldReader.Outputs.Remove x |> ignore\r\n                let newReader = (mapping newValue).GetReader()\r\n                let add = newReader.GetChanges token\r\n                cache <- Some(newValue, newReader)\r\n                HashSetDelta.combine rem add\r\n\r\n            | Some(_, ro) ->    \r\n                // input unchanged\r\n                ro.GetChanges token\r\n\r\n            | None ->\r\n                // initial\r\n                let r = (mapping newValue).GetReader()\r\n                cache <- Some(newValue, r)\r\n                r.GetChanges token\r\n\r\n    /// Reader for flattenA\r\n    type FlattenAReader<'T>(input : aset<aval<'T>>) =\r\n        inherit AbstractDirtyReader<aval<'T>, HashSetDelta<'T>>(HashSetDelta.monoid, isNull)\r\n            \r\n        let r = input.GetReader()\r\n        do r.Tag <- \"Input\"\r\n\r\n        let mutable initial = true\r\n        let cache = UncheckedDictionary.create<aval<'T>, 'T>()\r\n\r\n        member x.Invoke(token : AdaptiveToken, m : aval<'T>) =\r\n            let v = m.GetValue token\r\n            cache.[m] <- v\r\n            v\r\n\r\n        member x.Invoke2(token : AdaptiveToken, m : aval<'T>) =\r\n            let o = cache.[m]\r\n            let v = m.GetValue token\r\n            cache.[m] <- v\r\n            o, v\r\n\r\n        member x.Revoke(m : aval<'T>, dirty : System.Collections.Generic.HashSet<_>) =\r\n            match cache.TryGetValue m with\r\n            | (true, v) -> \r\n                cache.Remove m |> ignore\r\n                m.Outputs.Remove x |> ignore\r\n                dirty.Remove m |> ignore\r\n                v\r\n            | _ -> \r\n                failwith \"[ASet] cannot remove unknown object\"\r\n\r\n        override x.Compute(token, dirty) =\r\n            let mutable deltas = \r\n                r.GetChanges token |> HashSetDelta.map (fun d ->\r\n                    match d with\r\n                    | Add(1,m) -> Add(x.Invoke(token, m))\r\n                    | Rem(1,m) -> Rem(x.Revoke(m, dirty))\r\n                    | _ -> unexpected()\r\n                )\r\n\r\n            for d in dirty do\r\n                let o, n = x.Invoke2(token, d)\r\n                if not (Unchecked.equals o n) then\r\n                    deltas <- HashSetDelta.combine deltas (HashSetDelta.ofList [Add n; Rem o])\r\n\r\n            deltas\r\n            \r\n    /// Reader for mapA\r\n    type MapAReader<'A, 'B>(input : aset<'A>, mapping : 'A -> aval<'B>) =\r\n        inherit AbstractDirtyReader<aval<'B>, HashSetDelta<'B>>(HashSetDelta.monoid, isNull)\r\n            \r\n        let reader = input.GetReader()\r\n        do reader.Tag <- \"Reader\"\r\n        let mapping = Cache mapping\r\n        let cache = UncheckedDictionary.create<aval<'B>, ref<int * 'B>>()\r\n\r\n        member x.Invoke(token : AdaptiveToken, v : 'A) =\r\n            let m = mapping.Invoke v\r\n            let v = m.GetValue token\r\n            match cache.TryGetValue m with\r\n            | (true, r) ->\r\n                r := (fst !r + 1, v)\r\n            | _ ->\r\n                let r = ref (1, v)\r\n                cache.[m] <- r\r\n\r\n            v\r\n\r\n        member x.Invoke2(token : AdaptiveToken, m : aval<'B>) =\r\n            let r = cache.[m]\r\n            let v = m.GetValue token\r\n            let (rc, o) = !r\r\n            r := (rc, v)\r\n            o, v\r\n\r\n        member x.Revoke(v : 'A, dirty : System.Collections.Generic.HashSet<_>) =\r\n            let m = mapping.Revoke v\r\n                \r\n            match cache.TryGetValue m with\r\n            | (true, r) -> \r\n                let (cnt, v) = !r\r\n                if cnt = 1 then\r\n                    cache.Remove m |> ignore\r\n                    dirty.Remove m |> ignore\r\n                    lock m (fun () -> m.Outputs.Remove x |> ignore )\r\n                    v\r\n                else\r\n                    r := (cnt - 1, v)\r\n                    v\r\n            | _ -> \r\n                failwith \"[ASet] cannot remove unknown object\"\r\n\r\n        override x.Compute(token, dirty) =\r\n            let mutable deltas = \r\n                reader.GetChanges token |> HashSetDelta.map (fun d ->\r\n                    match d with\r\n                    | Add(1,m) -> Add(x.Invoke(token,m))\r\n                    | Rem(1,m) -> Rem(x.Revoke(m, dirty))\r\n                    | _ -> unexpected()\r\n                )\r\n\r\n            for d in dirty do\r\n                let o, n = x.Invoke2(token, d)\r\n                if not (Unchecked.equals o n) then\r\n                    deltas <- HashSetDelta.combine deltas (HashSetDelta.ofList [Add n; Rem o])\r\n\r\n            deltas\r\n            \r\n    /// Reader for chooseA\r\n    type ChooseAReader<'A, 'B>(input : aset<'A>, f : 'A -> aval<option<'B>>) =\r\n        inherit AbstractDirtyReader<aval<option<'B>>, HashSetDelta<'B>>(HashSetDelta.monoid, isNull)\r\n            \r\n        let r = input.GetReader()\r\n        do r.Tag <- \"Reader\"\r\n\r\n        let f = Cache f\r\n        let mutable initial = true\r\n        let cache = UncheckedDictionary.create<aval<option<'B>>, ref<int * option<'B>>>()\r\n\r\n        member x.Invoke(token : AdaptiveToken, v : 'A) =\r\n            let m = f.Invoke v\r\n            let v = m.GetValue token\r\n\r\n            match cache.TryGetValue m with\r\n            | (true, r) ->\r\n                r := (fst !r + 1, v)\r\n            | _ ->\r\n                let r = ref (1, v)\r\n                cache.[m] <- r\r\n\r\n            v\r\n\r\n\r\n        member x.Invoke2(token : AdaptiveToken, m : aval<option<'B>>) =\r\n            match cache.TryGetValue m with\r\n            | (true, r) ->\r\n                let (rc, o) = !r\r\n                let v = m.GetValue token\r\n                r := (rc, v)\r\n                o, v\r\n            | _ ->\r\n                None, None  \r\n\r\n        member x.Revoke(v : 'A) =\r\n            let m = f.Revoke v\r\n            match cache.TryGetValue m with\r\n            | (true, r) -> \r\n                let (rc, v) = !r\r\n                if rc = 1 then\r\n                    cache.Remove m |> ignore\r\n                    lock m (fun () -> m.Outputs.Remove x |> ignore )\r\n                else\r\n                    r := (rc - 1, v)\r\n                v\r\n            | _ -> \r\n                failwith \"[ASet] cannot remove unknown object\"\r\n\r\n\r\n        override x.Compute(token, dirty) =\r\n            let mutable deltas = \r\n                r.GetChanges token |> HashSetDelta.choose (fun d ->\r\n                    match d with\r\n                    | Add(1,m) -> \r\n                        match x.Invoke(token,m) with\r\n                        | Some v -> Some (Add v)\r\n                        | None -> None\r\n\r\n                    | Rem(1,m) ->\r\n                        match x.Revoke m with\r\n                        | Some v -> Some (Rem v)\r\n                        | None -> None\r\n\r\n                    | _ -> \r\n                        unexpected()\r\n                )\r\n\r\n            for d in dirty do\r\n                match x.Invoke2(token, d) with\r\n                | None, Some n ->\r\n                    deltas <- \r\n                        deltas\r\n                        |> HashSetDelta.add (Add n)\r\n\r\n                | Some o, None ->\r\n                    deltas <- \r\n                        deltas\r\n                        |> HashSetDelta.add (Rem o)\r\n\r\n                | Some o, Some n when not (Unchecked.equals o n) ->\r\n                    deltas <- \r\n                        deltas\r\n                        |> HashSetDelta.add (Rem o)\r\n                        |> HashSetDelta.add (Add n)\r\n\r\n                | _ ->\r\n                    ()\r\n\r\n            deltas\r\n \r\n    /// Gets the current content of the aset as HashSet.\r\n    let inline force (set : aset<'T>) = \r\n        AVal.force set.Content\r\n\r\n    /// Creates a constant set using the creation function.\r\n    let inline constant (content : unit -> HashSet<'T>) = \r\n        ConstantSet(lazy(content())) :> aset<_> \r\n\r\n    /// Creates an adaptive set using the reader.\r\n    let inline create (reader : unit -> #IOpReader<HashSetDelta<'T>>) =\r\n        AdaptiveHashSetImpl(fun () -> reader() :> IOpReader<_>) :> aset<_>\r\n\r\n/// Functional operators for aset<_>\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule ASet =\r\n    open AdaptiveHashSetImplementation\r\n\r\n    /// The empty aset.\r\n    [<GeneralizableValue>]\r\n    let empty<'T> : aset<'T> = \r\n        EmptySet<'T>.Instance\r\n\r\n    /// A constant aset holding a single value.\r\n    let single (value : 'T) =\r\n        lazy (HashSet.single value) |> ConstantSet :> aset<_>\r\n        \r\n    /// Creates an aset holding the given values.\r\n    let ofSeq (s : seq<'T>) =\r\n        lazy (HashSet.ofSeq s) |> ConstantSet :> aset<_>\r\n        \r\n    /// Creates an aset holding the given values.\r\n    let ofList (s : list<'T>) =\r\n        lazy (HashSet.ofList s) |> ConstantSet :> aset<_>\r\n        \r\n    /// Creates an aset holding the given values.\r\n    let ofArray (s : 'T[]) =\r\n        lazy (HashSet.ofArray s) |> ConstantSet :> aset<_>\r\n        \r\n    /// Creates an aset holding the given values. `O(1)`\r\n    let ofHashSet (elements : HashSet<'T>) =\r\n        ConstantSet(lazy elements) :> aset<_>\r\n\r\n    /// Creates an aval providing access to the current content of the set.\r\n    let toAVal (set : aset<'T>) =\r\n        set.Content\r\n\r\n    /// Adaptively maps over the given set.\r\n    let map (mapping : 'A -> 'B) (set : aset<'A>) =\r\n        if set.IsConstant then\r\n            constant (fun () -> set |> force |> HashSet.map mapping)\r\n        else\r\n            match set.History with\r\n            | Some history ->\r\n                create (fun () -> \r\n                    history.NewReader(CountingHashSet.trace, MapReader.DeltaMapping mapping)\r\n                )\r\n            | _ ->\r\n                create (fun () -> MapReader(set, mapping))\r\n          \r\n    /// Adaptively chooses all elements returned by mapping.  \r\n    let choose (mapping : 'A -> option<'B>) (set : aset<'A>) =\r\n        if set.IsConstant then\r\n            constant (fun () -> set |> force |> HashSet.choose mapping)\r\n        else\r\n            match set.History with\r\n            | Some history ->\r\n                create (fun () -> \r\n                    history.NewReader(CountingHashSet.trace, ChooseReader.DeltaMapping mapping)\r\n                )\r\n            | _ ->\r\n                create (fun () -> ChooseReader(set, mapping))\r\n            \r\n    /// Adaptively filters the set using the given predicate.\r\n    let filter (predicate : 'A -> bool) (set : aset<'A>) =\r\n        if set.IsConstant then\r\n            constant (fun () -> set |> force |> HashSet.filter predicate)\r\n        else\r\n            match set.History with\r\n            | Some history ->\r\n                create (fun () -> \r\n                    history.NewReader(CountingHashSet.trace, FilterReader.DeltaMapping predicate)\r\n                )\r\n            | _ ->\r\n                create (fun () -> FilterReader(set, predicate))\r\n            \r\n    /// Adaptively unions the given sets\r\n    let union (a : aset<'A>) (b : aset<'A>) =\r\n        if a = b then\r\n            a\r\n        elif a.IsConstant && b.IsConstant then\r\n            let va = force a\r\n            let vb = force b\r\n            if va.IsEmpty && vb.IsEmpty then empty\r\n            else constant (fun () -> HashSet.union va vb)\r\n        else\r\n            // TODO: can be optimized in case one of the two sets is constant.\r\n            create (fun () -> UnionConstantReader (HashSet.ofList [a;b]))\r\n\r\n    /// Adaptively unions all the given sets\r\n    let unionMany (sets : aset<aset<'A>>) = \r\n        if sets.IsConstant then\r\n            // outer set is constant\r\n            let all = force sets\r\n            if all |> HashSet.forall (fun s -> s.IsConstant) then\r\n                // all inner sets are constant\r\n                constant (fun () -> all |> HashSet.collect force)\r\n            else\r\n                // inner sets non-constant\r\n                create (fun () -> UnionConstantReader all)\r\n        else\r\n            // sadly no way to know if inner sets will always be constants.\r\n            create (fun () -> UnionReader sets)\r\n\r\n    /// Adaptively maps over the given set and unions all resulting sets.\r\n    let collect (mapping : 'A -> aset<'B>) (set : aset<'A>) =   \r\n        if set.IsConstant then\r\n            // outer set is constant\r\n            let all = set |> force |> HashSet.map mapping\r\n            if all |> HashSet.forall (fun s -> s.IsConstant) then\r\n                // all inner sets are constant\r\n                constant (fun () -> all |> HashSet.collect force)\r\n            else\r\n                // inner sets non-constant\r\n                create (fun () -> UnionConstantReader all)\r\n        else\r\n            create (fun () -> CollectReader(set, mapping))\r\n\r\n    /// Creates an aset for the given aval.\r\n    let ofAVal (value : aval<#seq<'T>>) =\r\n        if value.IsConstant then\r\n            constant (fun () -> AVal.force value :> seq<'T> |> HashSet.ofSeq)\r\n        else\r\n            create (fun () -> AValReader(value))\r\n\r\n    /// Adaptively maps over the given aval and returns the resulting set.\r\n    let bind (mapping : 'A -> aset<'B>) (value : aval<'A>) =\r\n        if value.IsConstant then\r\n            value |> AVal.force |> mapping\r\n        else\r\n            create (fun () -> BindReader(value, mapping))\r\n\r\n    /// Adaptively flattens the set of adaptive avals.\r\n    let flattenA (set : aset<aval<'A>>) =\r\n        if set.IsConstant then\r\n            let all = set |> force\r\n            if all |> HashSet.forall (fun r -> r.IsConstant) then\r\n                constant (fun () -> all |> HashSet.map AVal.force)\r\n            else\r\n                // TODO: better implementation possible\r\n                create (fun () -> FlattenAReader(set))\r\n        else\r\n            create (fun () -> FlattenAReader(set))\r\n            \r\n    /// Adaptively maps over the set and also respects inner changes.\r\n    let mapA (mapping : 'A -> aval<'B>) (set : aset<'A>) =\r\n        // TODO: constants\r\n        create (fun () -> MapAReader(set, mapping))\r\n\r\n    /// Adaptively maps over the set and also respects inner changes.\r\n    let chooseA (mapping : 'A -> aval<option<'B>>) (set : aset<'A>) =\r\n        // TODO: constants\r\n        create (fun () -> ChooseAReader(set, mapping))\r\n\r\n    /// Adaptively filters the set and also respects inner changes.\r\n    let filterA (predicate : 'A -> aval<bool>) (set : aset<'A>) =\r\n        // TODO: direct implementation\r\n        create (fun () -> \r\n            let mapping (a : 'A) =  \r\n                predicate a \r\n                |> AVal.map (function true -> Some a | false -> None)\r\n\r\n            ChooseAReader(set, mapping)\r\n        )\r\n\r\n    /// Evaluates the given adaptive set and returns its current content.\r\n    /// This should not be used inside the adaptive evaluation\r\n    /// of other AdaptiveObjects since it does not track dependencies.\r\n    let force (set : aset<'T>) = AVal.force set.Content\r\n\r\n    /// Reduces the set using the given `AdaptiveReduction` and returns\r\n    /// the resulting adaptive value.\r\n    let reduce (r : AdaptiveReduction<'a, 's, 'v>) (list: aset<'a>) =\r\n        SetReductions.ReduceValue(r, list) :> aval<'v>\r\n        \r\n    /// Applies the mapping function to all elements of the set and reduces the results\r\n    /// using the given `AdaptiveReduction`.\r\n    /// Returns the resulting adaptive value.\r\n    let reduceBy (r : AdaptiveReduction<'b, 's, 'v>) (mapping: 'a -> 'b) (list: aset<'a>) =\r\n        SetReductions.ReduceByValue(r, mapping, list) :> aval<'v>\r\n        \r\n    /// Applies the mapping function to all elements of the set and reduces the results\r\n    /// using the given `AdaptiveReduction`.\r\n    /// Returns the resulting adaptive value.\r\n    let reduceByA (r : AdaptiveReduction<'b, 's, 'v>) (mapping: 'a -> aval<'b>) (list: aset<'a>) =\r\n        SetReductions.AdaptiveReduceByValue(r, mapping, list) :> aval<'v>\r\n\r\n    /// Adaptively folds over the set using add for additions and trySubtract for removals.\r\n    /// Note the trySubtract may return None indicating that the result needs to be recomputed.\r\n    /// Also note that the order of elements given to add/trySubtract is undefined.\r\n    let foldHalfGroup (add : 'S -> 'A -> 'S) (trySub : 'S -> 'A -> option<'S>) (zero : 'S) (s : aset<'A>) =\r\n        let inline trySub s v =\r\n            match trySub s v with\r\n            | Some v -> ValueSome v\r\n            | None -> ValueNone\r\n        let reduction = AdaptiveReduction.halfGroup zero add trySub\r\n        reduce reduction s\r\n\r\n    /// Adaptively folds over the set using add for additions and recomputes the value on every removal.\r\n    /// Note that the order of elements given to add is undefined.\r\n    let fold (f : 'S -> 'A -> 'S) (seed : 'S) (s : aset<'A>) =\r\n        let reduction = AdaptiveReduction.fold seed f\r\n        reduce reduction s\r\n\r\n    /// Adaptively folds over the set using add for additions and subtract for removals.\r\n    /// Note that the order of elements given to add/subtract is undefined.\r\n    let foldGroup (add : 'S -> 'A -> 'S) (sub : 'S -> 'A -> 'S) (zero : 'S) (s : aset<'A>) =\r\n        let reduction = AdaptiveReduction.group zero add sub\r\n        reduce reduction s\r\n\r\n    /// Creates an aset using the given reader-creator.\r\n    let ofReader (creator : unit -> #IOpReader<HashSetDelta<'T>>) =\r\n        create creator\r\n\r\n    /// Creates a constant aset lazy content.\r\n    let delay (creator : unit -> HashSet<'T>) =\r\n        constant creator\r\n\r\n    /// Adaptively tests if the list is empty.\r\n    let isEmpty (l: aset<'a>) =\r\n        l.Content |> AVal.map HashSet.isEmpty\r\n        \r\n    /// Adaptively gets the number of elements in the list.\r\n    let count (l: aset<'a>) =\r\n        l.Content |> AVal.map HashSet.count\r\n\r\n    let forall (predicate: 'T -> bool) (list: aset<'T>) =\r\n        let r = AdaptiveReduction.countNegative |> AdaptiveReduction.mapOut (fun v -> v = 0)\r\n        reduceBy r predicate list\r\n        \r\n    let exists (predicate: 'T -> bool) (list: aset<'T>) =\r\n        let r = AdaptiveReduction.countPositive |> AdaptiveReduction.mapOut (fun v -> v <> 0)\r\n        reduceBy r predicate list\r\n        \r\n    let forallA (predicate: 'T -> aval<bool>) (list: aset<'T>) =\r\n        let r = AdaptiveReduction.countNegative |> AdaptiveReduction.mapOut (fun v -> v = 0)\r\n        reduceByA r predicate list\r\n        \r\n    let existsA (predicate: 'T -> aval<bool>) (list: aset<'T>) =\r\n        let r = AdaptiveReduction.countPositive |> AdaptiveReduction.mapOut (fun v -> v <> 0)\r\n        reduceByA r predicate list\r\n\r\n        \r\n    /// Adaptively counts all elements fulfilling the predicate\r\n    let countBy (predicate: 'a -> bool) (list: aset<'a>) =\r\n        reduceBy AdaptiveReduction.countPositive predicate list \r\n\r\n    /// Adaptively counts all elements fulfilling the predicate\r\n    let countByA (predicate: 'a -> aval<bool>) (list: aset<'a>) =\r\n        reduceByA AdaptiveReduction.countPositive predicate list \r\n\r\n    let inline tryMin (l : aset<'a>) =\r\n        let reduction = \r\n            AdaptiveReduction.tryMin\r\n            |> AdaptiveReduction.mapOut (function ValueSome v -> Some v | ValueNone -> None)\r\n        reduce reduction l\r\n\r\n    let inline tryMax (l : aset<'a>) =\r\n        let reduction = \r\n            AdaptiveReduction.tryMax\r\n            |> AdaptiveReduction.mapOut (function ValueSome v -> Some v | ValueNone -> None)\r\n        reduce reduction l\r\n\r\n    /// Adaptively computes the sum all entries in the list.\r\n    let inline sum (s : aset<'a>) = \r\n        reduce (AdaptiveReduction.sum()) s\r\n    \r\n    let inline sumBy (mapping : 'T1 -> 'T2) (list : aset<'T1>) =\r\n        reduceBy (AdaptiveReduction.sum()) mapping list\r\n\r\n    let inline sumByA (mapping : 'T1 -> aval<'T2>) (list : aset<'T1>) =\r\n        reduceByA (AdaptiveReduction.sum()) mapping list\r\n\r\n    let inline average (s : aset<'a>) =\r\n        reduce (AdaptiveReduction.average()) s\r\n        \r\n    let inline averageBy (mapping : 'T1 -> 'T2) (list : aset<'T1>) =\r\n        reduceBy (AdaptiveReduction.average()) mapping list\r\n\r\n    let inline averageByA (mapping : 'T1 -> aval<'T2>) (list : aset<'T1>) =\r\n        reduceByA (AdaptiveReduction.average()) mapping list\r\n","namespace FSharp.Data.Adaptive\r\n\r\nopen FSharp.Data.Traceable\r\n\r\n/// An adaptive reader for amap that allows to pull operations and exposes its current state.\r\ntype IHashMapReader<'Key, 'Value> = IOpReader<HashMap<'Key, 'Value>, HashMapDelta<'Key, 'Value>>\r\n\r\n/// Adaptive map datastructure.\r\ntype AdaptiveHashMap<'Key, 'Value> =\r\n    /// Is the map constant?\r\n    abstract member IsConstant : bool\r\n\r\n    /// The current content of the map as aval.\r\n    abstract member Content : aval<HashMap<'Key, 'Value>>\r\n\r\n    /// Gets a new reader to the map.\r\n    abstract member GetReader : unit -> IHashMapReader<'Key, 'Value>\r\n    \r\n    /// Gets the underlying History instance for the amap (if any)\r\n    abstract member History : option<History<HashMap<'Key, 'Value>, HashMapDelta<'Key, 'Value>>>\r\n\r\n/// Adaptive map datastructure.\r\nand amap<'Key, 'Value> = AdaptiveHashMap<'Key, 'Value>\r\n\r\n\r\n\r\n/// Internal implementations for alist reductions.\r\nmodule internal MapReductions =\r\n\r\n    /// aval for reduce operations.\r\n    type ReduceValue<'k, 'a, 's, 'v>(reduction : AdaptiveReduction<'a, 's, 'v>, input : amap<'k, 'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = input.GetReader()\r\n        let mutable sum = reduction.seed\r\n\r\n        let mutable result = Unchecked.defaultof<'v>\r\n        let mutable state = HashMap.empty<'k, 'a>\r\n\r\n        member x.GetValue(token : AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges token\r\n                    let mutable working = true\r\n                    use e = (ops :> seq<_>).GetEnumerator()\r\n                    while working && e.MoveNext() do\r\n                        let index, op = e.Current\r\n                        match op with\r\n                        | Set a ->\r\n                            match HashMap.tryFind index state with\r\n                            | Some old ->\r\n                                match reduction.sub sum old with\r\n                                | ValueSome s -> sum <- s\r\n                                | ValueNone -> working <- false\r\n                            | None ->\r\n                                ()\r\n\r\n                            sum <- reduction.add sum a\r\n                            state <- HashMap.add index a state\r\n\r\n                        | Remove ->\r\n                            match HashMap.tryRemove index state with\r\n                            | Some(old, rest) ->\r\n                                state <- rest\r\n                                match reduction.sub sum old with\r\n                                | ValueSome s -> sum <- s\r\n                                | ValueNone -> working <- false\r\n                            | None ->\r\n                                ()\r\n\r\n                    if not working then\r\n                        state <- reader.State\r\n                        sum <- state |> HashMap.fold (fun s _ v -> reduction.add s v) reduction.seed\r\n\r\n                    result <- reduction.view sum\r\n\r\n                result\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = \r\n                x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t\r\n            \r\n    /// aval for reduceBy operations.\r\n    type ReduceByValue<'k, 'a, 'b, 's, 'v>(reduction : AdaptiveReduction<'b, 's, 'v>, mapping : 'k -> 'a -> 'b, input : amap<'k, 'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = input.GetReader()\r\n        let mutable sum = ValueSome reduction.seed\r\n\r\n        let mutable result = Unchecked.defaultof<'v>\r\n        let mutable state = HashMap.empty<'k, 'b>\r\n\r\n        let add (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> ValueSome (reduction.add s v)\r\n            | ValueNone -> ValueNone\r\n            \r\n        let sub (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> reduction.sub s v\r\n            | ValueNone -> ValueNone\r\n\r\n        member x.GetValue(token : AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges token\r\n                    for (index, op) in ops do\r\n                        match op with\r\n                        | Set a ->\r\n                            match HashMap.tryFind index state with\r\n                            | Some old -> sum <- sub sum old\r\n                            | None -> ()\r\n\r\n                            let b = mapping index a\r\n\r\n                            sum <- add sum b\r\n                            state <- HashMap.add index b state\r\n\r\n                        | Remove ->\r\n                            match HashMap.tryRemove index state with\r\n                            | Some(old, rest) ->\r\n                                state <- rest\r\n                                sum <- sub sum old\r\n                            | None ->\r\n                                ()\r\n\r\n                    match sum with\r\n                    | ValueSome s ->\r\n                        result <- reduction.view s\r\n                    | ValueNone ->\r\n                        let s = state |> HashMap.fold (fun s _ v -> reduction.add s v) reduction.seed\r\n                        sum <- ValueSome s\r\n                        result <- reduction.view s\r\n\r\n                result\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = \r\n                x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t\r\n\r\n    /// aval for reduceByA operations.\r\n    type AdaptiveReduceByValue<'k, 'a, 'b, 's, 'v>(reduction : AdaptiveReduction<'b, 's, 'v>, mapping : 'k -> 'a -> aval<'b>, l : amap<'k, 'a>) =\r\n        inherit AdaptiveObject()\r\n\r\n        let reader = l.GetReader()\r\n        do reader.Tag <- \"FoldReader\"\r\n\r\n        #if !FABLE_COMPILER\r\n        let dirtyLock = obj()\r\n        #endif\r\n\r\n\r\n        let mutable targets = MultiSetMap.empty<aval<'b>, 'k>\r\n        let mutable state = HashMap.empty<'k, aval<'b> * 'b>\r\n\r\n        let mutable dirty : HashMap<'k, aval<'b>> = HashMap.empty\r\n        let mutable sum = ValueSome reduction.seed\r\n        let mutable res = Unchecked.defaultof<'v>\r\n\r\n        let sub (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> reduction.sub s v\r\n            | ValueNone -> ValueNone\r\n            \r\n        let add (s : ValueOption<'s>) (v : 'b) =\r\n            match s with\r\n            | ValueSome s -> ValueSome (reduction.add s v)\r\n            | ValueNone -> ValueNone\r\n\r\n\r\n        let consumeDirty() =\r\n            #if FABLE_COMPILER\r\n            let d = dirty\r\n            dirty <- HashMap.empty\r\n            d\r\n            #else\r\n            lock dirtyLock (fun () ->\r\n                let d = dirty\r\n                dirty <- HashMap.empty\r\n                d\r\n            )\r\n            #endif\r\n\r\n        let removeIndex (x : AdaptiveReduceByValue<_,_,_,_,_>) (i : 'k) =\r\n            match HashMap.tryRemove i state with\r\n            | Some ((ov, o), newState) ->\r\n                state <- newState\r\n                sum <- sub sum o    \r\n                let rem, newTargets = MultiSetMap.remove ov i targets\r\n                targets <- newTargets\r\n                if rem then ov.Outputs.Remove x |> ignore\r\n                \r\n            | None ->\r\n                ()\r\n\r\n        override x.InputChangedObject(t, o) =\r\n            if isNull o.Tag then\r\n                #if FABLE_COMPILER\r\n                let o = unbox<aval<'b>> o\r\n                for i in MultiSetMap.find o targets do\r\n                    dirty <- HashMap.add i o dirty\r\n                #else\r\n                match o with\r\n                | :? aval<'b> as o ->\r\n                    lock dirtyLock (fun () -> \r\n                        for i in MultiSetMap.find o targets do\r\n                            dirty <- HashMap.add i o dirty\r\n                    )\r\n                | _ -> \r\n                    ()\r\n                #endif\r\n \r\n        member x.GetValue (t : AdaptiveToken) =\r\n            x.EvaluateAlways t (fun t ->\r\n                if x.OutOfDate then\r\n                    let ops = reader.GetChanges t\r\n                    let mutable dirty = consumeDirty()\r\n                    for (i, op) in ops do\r\n                        dirty <- HashMap.remove i dirty\r\n                        match op with\r\n                        | Set v ->\r\n                            removeIndex x i\r\n\r\n                            let r = mapping i v\r\n                            let n = r.GetValue(t)\r\n                            targets <- MultiSetMap.add r i targets\r\n                            state <- HashMap.add i (r, n) state\r\n                            sum <- add sum n\r\n\r\n                        | Remove ->\r\n                            removeIndex x i\r\n\r\n\r\n                    for (i, r) in dirty do\r\n                        let n = r.GetValue(t)\r\n                        state <-\r\n                            state |> HashMap.alter i (fun old ->\r\n                                match old with\r\n                                | Some (ro, o) -> \r\n                                    assert(ro = r)\r\n                                    sum <- add (sub sum o) n\r\n                                | None -> \r\n                                    sum <- add sum n\r\n                                Some (r, n)\r\n                            )\r\n\r\n                    match sum with\r\n                    | ValueNone ->\r\n                        let s = state |> HashMap.fold (fun s _ (_,v) -> reduction.add s v) reduction.seed\r\n                        sum <- ValueSome s\r\n                        res <- reduction.view s\r\n                    | ValueSome s ->\r\n                        res <- reduction.view s\r\n\r\n                res\r\n            )\r\n\r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = x.GetValue t :> obj\r\n            member x.ContentType =\r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'v>\r\n                #endif\r\n\r\n        interface AdaptiveValue<'v> with\r\n            member x.GetValue t = x.GetValue t  \r\n\r\n\r\n/// Internal implementations for amap operations.\r\nmodule AdaptiveHashMapImplementation =\r\n\r\n    /// Core implementation for a dependent map.\r\n    type AdaptiveHashMapImpl<'Key, 'Value>(createReader : unit -> IOpReader<HashMapDelta<'Key, 'Value>>) =\r\n        let history = History(createReader, HashMap.trace)\r\n        /// Gets a new reader to the set.\r\n        member x.GetReader() : IHashMapReader<'Key, 'Value> =\r\n            history.NewReader()\r\n\r\n        /// Current content of the set as aval.\r\n        member x.Content =\r\n            history :> aval<_>\r\n\r\n        interface AdaptiveHashMap<'Key, 'Value> with\r\n            member x.IsConstant = false\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = Some history\r\n\r\n    /// Efficient implementation for an empty adaptive map.\r\n    type EmptyMap<'Key, 'Value> private() =   \r\n        static let instance = EmptyMap<'Key, 'Value>() :> amap<_,_>\r\n        let content = AVal.constant HashMap.empty\r\n        let reader = new History.Readers.EmptyReader<HashMap<'Key, 'Value>, HashMapDelta<'Key, 'Value>>(HashMap.trace) :> IHashMapReader<'Key, 'Value>\r\n        static member Instance = instance\r\n        \r\n        member x.Content = content\r\n        member x.GetReader() = reader\r\n        \r\n        interface AdaptiveHashMap<'Key, 'Value> with\r\n            member x.IsConstant = true\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = None\r\n\r\n    /// Efficient implementation for a constant adaptive map.\r\n    type ConstantMap<'Key, 'Value>(content : Lazy<HashMap<'Key, 'Value>>) =\r\n        let value = AVal.delay (fun () -> content.Value)\r\n\r\n        member x.Content = value\r\n\r\n        member x.GetReader() =\r\n            new History.Readers.ConstantReader<_,_>(\r\n                HashMap.trace,\r\n                lazy (HashMap.computeDelta HashMap.empty content.Value),\r\n                content\r\n            ) :> IHashMapReader<_,_>\r\n\r\n        interface AdaptiveHashMap<'Key, 'Value> with\r\n            member x.IsConstant = true\r\n            member x.GetReader() = x.GetReader()\r\n            member x.Content = x.Content\r\n            member x.History = None\r\n\r\n    /// Reader for map operations.\r\n    type MapWithKeyReader<'Key, 'Value1, 'Value2>(input : amap<'Key, 'Value1>, mapping : 'Key -> 'Value1 -> 'Value2) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value2>>(HashMapDelta.empty)\r\n        \r\n        let reader = input.GetReader()\r\n\r\n        static member DeltaMapping (mapping : 'Key -> 'Value1 -> 'Value2) =\r\n            HashMapDelta.toHashMap >>\r\n            HashMap.map (fun k op ->\r\n                match op with\r\n                    | Set v -> Set (mapping k v)\r\n                    | Remove -> Remove\r\n            ) >> \r\n            HashMapDelta\r\n\r\n        override x.Compute(token) =\r\n            let ops = reader.GetChanges token\r\n            ops.Store |> HashMap.map (fun k op ->\r\n                match op with\r\n                    | Set v -> Set (mapping k v)\r\n                    | Remove -> Remove\r\n            ) |> HashMapDelta\r\n            \r\n    /// Reader for map operations without keys.\r\n    type MapReader<'Key, 'Value1, 'Value2>(input : amap<'Key, 'Value1>, mapping : 'Value1 -> 'Value2) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value2>>(HashMapDelta.empty)\r\n\r\n        let cache = Cache<'Value1, 'Value2>(mapping)\r\n        let reader = input.GetReader()\r\n        \r\n        static member DeltaMapping (mapping : 'Value1 -> 'Value2) =\r\n            let cache = Cache<'Value1, 'Value2>(mapping)\r\n            fun oldState ops ->\r\n                ops\r\n                |> HashMapDelta.toHashMap\r\n                |> HashMap.map (fun k op ->\r\n                    match op with\r\n                    | Set v -> \r\n                        let res = cache.Invoke(v)\r\n                        Set res\r\n                    | Remove -> \r\n                        match HashMap.tryFind k oldState with\r\n                        | Some value -> cache.RevokeAndGetDeleted value |> ignore\r\n                        | None -> () // strange\r\n                        Remove\r\n                )\r\n                |> HashMapDelta\r\n\r\n        override x.Compute(token) =\r\n            let oldState = reader.State\r\n            let ops = reader.GetChanges token\r\n            ops.Store |> HashMap.map (fun k op ->\r\n                match op with\r\n                    | Set v -> \r\n                        let res = cache.Invoke(v)\r\n                        Set res\r\n                    | Remove -> \r\n                        match HashMap.tryFind k oldState with\r\n                        | Some value -> cache.RevokeAndGetDeleted value |> ignore\r\n                        | None -> () // strange\r\n                        Remove\r\n            ) |> HashMapDelta\r\n\r\n    /// Reader for choose operations.\r\n    type ChooseWithKeyReader<'Key, 'Value1, 'Value2>(input : amap<'Key, 'Value1>, mapping : 'Key -> 'Value1 -> option<'Value2>) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value2>>(HashMapDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n        let livingKeys = UncheckedHashSet.create<'Key>()\r\n\r\n        static member DeltaMapping (mapping : 'Key -> 'Value1 -> option<'Value2>) =\r\n            let livingKeys = UncheckedHashSet.create<'Key>()\r\n            HashMapDelta.toHashMap >> HashMap.choose (fun k op ->\r\n                match op with\r\n                | Set v -> \r\n                    match mapping k v with\r\n                    | Some n ->\r\n                        livingKeys.Add k |> ignore\r\n                        Some (Set n)\r\n                    | None ->\r\n                        if livingKeys.Remove k then\r\n                            Some Remove\r\n                        else\r\n                            None\r\n                | Remove -> \r\n                    if livingKeys.Remove k then Some Remove\r\n                    else None\r\n            ) >> HashMapDelta\r\n\r\n        override x.Compute(token) =\r\n            let ops = reader.GetChanges token\r\n            ops.Store |> HashMap.choose (fun k op ->\r\n                match op with\r\n                | Set v -> \r\n                    match mapping k v with\r\n                    | Some n ->\r\n                        livingKeys.Add k |> ignore\r\n                        Some (Set n)\r\n                    | None ->\r\n                        if livingKeys.Remove k then\r\n                            Some Remove\r\n                        else\r\n                            None\r\n                | Remove -> \r\n                    if livingKeys.Remove k then Some Remove\r\n                    else None\r\n            ) |> HashMapDelta\r\n            \r\n    /// Reader for choose operations without keys.\r\n    type ChooseReader<'Key, 'Value1, 'Value2>(input : amap<'Key, 'Value1>, f : 'Value1 -> option<'Value2>) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value2>>(HashMapDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n        let cache = Cache f\r\n        let livingKeys = UncheckedHashSet.create<'Key>()\r\n\r\n        static member DeltaMapping (mapping : 'Value1 -> option<'Value2>) =\r\n            let cache = Cache mapping\r\n            let livingKeys = UncheckedHashSet.create<'Key>()\r\n            fun (oldState : HashMap<'Key, 'Value1>) (ops : HashMapDelta<'Key, 'Value1>) ->\r\n                ops.Store |> HashMap.choose (fun k op ->\r\n                    match op with\r\n                    | Set v -> \r\n                        match cache.Invoke v with\r\n                        | Some r -> \r\n                            livingKeys.Add k |> ignore\r\n                            Some (Set r)\r\n                        | None -> \r\n                            match HashMap.tryFind k oldState with\r\n                            | Some ov -> \r\n                                livingKeys.Remove k |> ignore\r\n                                cache.Revoke ov |> ignore\r\n                                Some Remove\r\n                            | _ -> \r\n                                None\r\n                    | Remove -> \r\n                        if livingKeys.Remove k then \r\n                            Some Remove\r\n                        else\r\n                            None\r\n                ) |> HashMapDelta\r\n\r\n        override x.Compute(token) =\r\n            let oldState = reader.State\r\n            let ops = reader.GetChanges token\r\n            ops.Store |> HashMap.choose (fun k op ->\r\n                match op with\r\n                | Set v -> \r\n                    match cache.Invoke v with\r\n                    | Some r -> \r\n                        livingKeys.Add k |> ignore\r\n                        Some (Set r)\r\n                    | None -> \r\n                        match HashMap.tryFind k oldState with\r\n                        | Some ov -> \r\n                            livingKeys.Remove k |> ignore\r\n                            cache.Revoke ov |> ignore\r\n                            Some Remove\r\n                        | _ -> \r\n                            None\r\n                | Remove -> \r\n                    if livingKeys.Remove k then \r\n                        Some Remove\r\n                    else\r\n                        None\r\n            ) |> HashMapDelta\r\n\r\n            \r\n    /// Reader for mapA operations.\r\n    type MapAReader<'k, 'a, 'b>(input : amap<'k, 'a>, mapping : 'k -> 'a -> aval<'b>) =\r\n        inherit AbstractReader<HashMapDelta<'k, 'b>>(HashMapDelta.empty)\r\n\r\n        let mapping = OptimizedClosures.FSharpFunc<'k, 'a, aval<'b>>.Adapt mapping\r\n        let reader = input.GetReader()\r\n        do reader.Tag <- \"input\"\r\n        let cache = Cache (fun (a,b) -> mapping.Invoke(a,b))\r\n        let mutable targets = MultiSetMap.empty<aval<'b>, 'k>\r\n        let mutable dirty = HashMap.empty<'k, aval<'b>>\r\n\r\n        let consumeDirty() =\r\n            lock cache (fun () ->\r\n                let d = dirty\r\n                dirty <- HashMap.empty\r\n                d\r\n            )\r\n\r\n        override x.InputChangedObject(t, o) =\r\n            #if FABLE_COMPILER\r\n            if isNull o.Tag then\r\n                let o = unbox<aval<'b>> o\r\n                for i in MultiSetMap.find o targets do\r\n                    dirty <- HashMap.add i o dirty\r\n            #else\r\n            match o with\r\n            | :? aval<'b> as o ->\r\n                lock cache (fun () ->\r\n                    for i in MultiSetMap.find o targets do\r\n                        dirty <- HashMap.add i o dirty\r\n                )\r\n            | _ ->\r\n                ()\r\n            #endif\r\n\r\n        override x.Compute t =\r\n            let mutable dirty = consumeDirty()\r\n            let old = reader.State\r\n            let ops = reader.GetChanges t\r\n\r\n            let mutable changes =\r\n                ops |> HashMapDelta.toHashMap |> HashMap.choose (fun i op ->\r\n                    dirty <- HashMap.remove i dirty\r\n                    match op with\r\n                    | Set v ->\r\n                        let k = cache.Invoke(i,v)\r\n                        let v = k.GetValue t\r\n                        targets <- MultiSetMap.add k i targets\r\n                        Some (Set v)\r\n                    | Remove ->\r\n                        match HashMap.tryFind i old with\r\n                        | Some v ->                  \r\n                            let o = cache.Revoke(i, v)\r\n                            let rem, r = MultiSetMap.remove o i targets\r\n                            targets <- r\r\n                            if rem then o.Outputs.Remove x |> ignore\r\n                            Some Remove\r\n                        | None ->\r\n                            None\r\n                )\r\n\r\n            for i, d in dirty do\r\n                let v = d.GetValue t\r\n                changes <- HashMap.add i (Set v) changes\r\n\r\n            HashMapDelta.ofHashMap changes\r\n     \r\n    /// Reader for chooseA operations.\r\n    type ChooseAReader<'k, 'a, 'b>(input : amap<'k, 'a>, mapping : 'k -> 'a -> aval<Option<'b>>) =\r\n        inherit AbstractReader<HashMapDelta<'k, 'b>>(HashMapDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n        do reader.Tag <- \"input\"\r\n        let mapping = OptimizedClosures.FSharpFunc<'k, 'a, aval<option<'b>>>.Adapt mapping\r\n        let keys = UncheckedHashSet.create<'k>()\r\n        let cache = Cache (fun (a,b) -> mapping.Invoke(a,b))\r\n        let mutable targets = MultiSetMap.empty<aval<option<'b>>, 'k>\r\n        let mutable dirty = HashMap.empty<'k, aval<option<'b>>>\r\n\r\n        let consumeDirty() =\r\n            lock cache (fun () ->\r\n                let d = dirty\r\n                dirty <- HashMap.empty\r\n                d\r\n            )\r\n\r\n        override x.InputChangedObject(t, o) =\r\n            #if FABLE_COMPILER\r\n            if isNull o.Tag then\r\n                let o = unbox<aval<option<'b>>> o\r\n                for i in MultiSetMap.find o targets do\r\n                    dirty <- HashMap.add i o dirty\r\n            #else\r\n            match o with\r\n            | :? aval<option<'b>> as o ->\r\n                lock cache (fun () ->\r\n                    for i in MultiSetMap.find o targets do\r\n                        dirty <- HashMap.add i o dirty\r\n                )\r\n            | _ ->\r\n                ()\r\n            #endif\r\n\r\n\r\n        override x.Compute(t) =\r\n            let mutable dirty = consumeDirty()\r\n            let old = reader.State\r\n            let ops = reader.GetChanges t\r\n            let mutable changes =\r\n                ops |> HashMapDelta.toHashMap |> HashMap.choose (fun i op ->\r\n                    dirty <- HashMap.remove i dirty\r\n                    match op with\r\n                    | Set v ->\r\n                        let k = cache.Invoke(i,v)\r\n                        let v = k.GetValue t\r\n                        targets <- MultiSetMap.add k i targets\r\n                        match v with\r\n                        | Some v -> \r\n                            keys.Add i |> ignore\r\n                            Some (Set v)\r\n                        | None ->\r\n                            if keys.Remove i then Some Remove\r\n                            else None\r\n                    | Remove ->\r\n                        match HashMap.tryFind i old with\r\n                        | Some v ->                  \r\n                            let o = cache.Revoke(i, v)\r\n                            let rem, rest = MultiSetMap.remove o i targets\r\n                            targets <- rest\r\n                            if rem then o.Outputs.Remove x |> ignore\r\n\r\n                            if keys.Remove i then Some Remove\r\n                            else None\r\n                        | None ->\r\n                            None\r\n                )\r\n\r\n            for i, d in dirty do\r\n                let v = d.GetValue t\r\n                match v with\r\n                | Some v -> \r\n                    keys.Add i |> ignore\r\n                    changes <- HashMap.add i (Set v) changes\r\n                | None ->\r\n                    if keys.Remove i then\r\n                        changes <- HashMap.add i Remove changes\r\n\r\n            HashMapDelta.ofHashMap changes\r\n  \r\n\r\n\r\n    /// Reader for union/unionWith operations.\r\n    type UnionWithReader<'Key, 'Value>(l : amap<'Key, 'Value>, r : amap<'Key, 'Value>, resolve : 'Key -> 'Value -> 'Value -> 'Value) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value>>(HashMapDelta.empty)\r\n\r\n        let lReader = l.GetReader()\r\n        let rReader = r.GetReader()\r\n\r\n        override x.Compute(token) =\r\n            let lops = lReader.GetChanges token\r\n            let rops = rReader.GetChanges token\r\n\r\n            let merge (key : 'Key) (lop : option<ElementOperation<'Value>>) (rop : option<ElementOperation<'Value>>) : ElementOperation<'Value> =\r\n                let lv =\r\n                    match lop with\r\n                    | Some (Set lv) -> Some lv\r\n                    | Some (Remove) -> None\r\n                    | None -> HashMap.tryFind key lReader.State\r\n                            \r\n                let rv =\r\n                    match rop with\r\n                    | Some (Set rv) -> Some rv\r\n                    | Some (Remove) -> None\r\n                    | None -> HashMap.tryFind key rReader.State\r\n\r\n\r\n                match lv, rv with\r\n                | None, None -> Remove\r\n                | Some l, None -> Set l\r\n                | None, Some r -> Set r\r\n                | Some l, Some r -> Set (resolve key l r)\r\n\r\n            HashMap.map2 merge lops.Store rops.Store |> HashMapDelta\r\n\r\n    /// Reader for ofAVal.\r\n    type AValReader<'Seq, 'Key, 'Value when 'Seq :> seq<'Key * 'Value>>(input : aval<'Seq>) =\r\n        inherit AbstractReader<HashMap<'Key, 'Value>, HashMapDelta<'Key, 'Value>>(HashMap.trace)\r\n\r\n        override x.Compute(token) =\r\n            input.GetValue token\r\n            :> seq<_>\r\n            |> HashMap.ofSeq\r\n            |> HashMap.computeDelta x.State\r\n\r\n    /// Reader for bind.\r\n    type BindReader<'T, 'Key, 'Value>(value : aval<'T>, mapping : 'T -> amap<'Key, 'Value>) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value>>(HashMapDelta.empty)\r\n\r\n        let mutable oldValue : option<'T * IHashMapReader<'Key, 'Value>> = None\r\n\r\n        override x.Compute(token) =\r\n            let v = value.GetValue token\r\n            \r\n            match oldValue with\r\n            | Some (ov, r) when Unchecked.equals ov v ->\r\n                r.GetChanges(token)\r\n            | _ ->\r\n                let rem =\r\n                    match oldValue with\r\n                    | Some (_, oldReader) ->\r\n                        let res = HashMap.computeDelta oldReader.State HashMap.empty\r\n                        oldReader.Outputs.Remove x |> ignore\r\n                        res.Store\r\n                    | _ ->\r\n                        HashMap.empty\r\n                                \r\n                let newMap = mapping v\r\n                let newReader = newMap.GetReader()\r\n                oldValue <- Some(v, newReader)\r\n                let add = newReader.GetChanges token\r\n                HashMapDelta.combine (HashMapDelta rem) add\r\n\r\n    /// Reader for toASet.\r\n    type ToASetReader<'Key, 'Value>(input : amap<'Key, 'Value>) =\r\n        inherit AbstractReader<HashSetDelta<'Key * 'Value>>(HashSetDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n\r\n        static member DeltaMapping =\r\n            fun (oldState : HashMap<'Key, 'Value>) (ops : HashMapDelta<'Key, 'Value>) ->\r\n                let mutable deltas = HashSetDelta.empty\r\n                for (k,op) in ops do\r\n                    match op with\r\n                    | Set v ->\r\n                        match HashMap.tryFind k oldState with\r\n                        | None -> ()\r\n                        | Some oldValue ->\r\n                            deltas <- HashSetDelta.add (Rem(k, oldValue)) deltas\r\n                        deltas <- HashSetDelta.add (Add(k, v)) deltas\r\n                \r\n                    | Remove ->\r\n                        // NOTE: As it is not clear at what point the toASet computation has been evaluated last, it is \r\n                        //       a valid case that something is removed that is not present in the current local state.\r\n                        match HashMap.tryFind k oldState with\r\n                        | None -> ()\r\n                        | Some ov ->\r\n                            deltas <- HashSetDelta.add (Rem (k, ov)) deltas\r\n                \r\n                \r\n                deltas\r\n\r\n        override x.Compute(token) =\r\n            let oldState = reader.State\r\n            let ops = reader.GetChanges token\r\n            let mutable deltas = HashSetDelta.empty\r\n\r\n            for (k,op) in ops do\r\n                match op with\r\n                | Set v ->\r\n                    match HashMap.tryFind k oldState with\r\n                    | None -> ()\r\n                    | Some oldValue ->\r\n                        deltas <- HashSetDelta.add (Rem(k, oldValue)) deltas\r\n                    deltas <- HashSetDelta.add (Add(k, v)) deltas\r\n\r\n                | Remove ->\r\n                    // NOTE: As it is not clear at what point the toASet computation has been evaluated last, it is \r\n                    //       a valid case that something is removed that is not present in the current local state.\r\n                    match HashMap.tryFind k oldState with\r\n                    | None -> ()\r\n                    | Some ov ->\r\n                        deltas <- HashSetDelta.add (Rem (k, ov)) deltas\r\n\r\n\r\n            deltas\r\n\r\n    /// Reader for mapSet.\r\n    type MapSetReader<'Key, 'Value>(set : aset<'Key>, mapping : 'Key -> 'Value) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'Value>>(HashMapDelta.empty)\r\n\r\n        let reader = set.GetReader()\r\n\r\n        static member DeltaMapping (mapping : 'Key -> 'Value) =\r\n            fun (ops : HashSetDelta<'Key>) ->\r\n                ops.Store\r\n                |> HashMap.choose (fun key v ->\r\n                    if v > 0 then Some (Set (mapping key))\r\n                    elif v < 0 then Some Remove\r\n                    else None\r\n                )\r\n                |> HashMapDelta\r\n\r\n        override x.Compute(token) =\r\n            reader.GetChanges(token).Store\r\n            |> HashMap.choose (fun key v ->\r\n                if v > 0 then Some (Set (mapping key))\r\n                elif v < 0 then Some Remove\r\n                else None\r\n            )\r\n            |> HashMapDelta\r\n\r\n\r\n    /// Base class for standard avals\r\n    [<AbstractClass; StructuredFormatDisplay(\"{AsString}\")>]\r\n    type internal AbstractVal<'T>() =\r\n        inherit AdaptiveObject()\r\n\r\n        let mutable cache = Unchecked.defaultof<'T>\r\n\r\n        abstract member Compute: AdaptiveToken -> 'T\r\n\r\n        member x.GetValue(token: AdaptiveToken) =\r\n            x.EvaluateAlways token (fun token ->\r\n                if x.OutOfDate then\r\n                    let v = x.Compute token\r\n                    cache <- v\r\n                    v\r\n                else\r\n                    cache                \r\n            )\r\n\r\n        member private x.AsString =\r\n            if x.OutOfDate then sprintf \"aval*(%A)\" cache\r\n            else sprintf \"aval(%A)\" cache\r\n\r\n        override x.ToString() =\r\n            if x.OutOfDate then System.String.Format(\"aval*({0})\", cache)\r\n            else System.String.Format(\"aval({0})\", cache)\r\n            \r\n        interface AdaptiveValue with\r\n            member x.GetValueUntyped t = x.GetValue t :> obj\r\n            member x.ContentType = \r\n                #if FABLE_COMPILER\r\n                typeof<obj>\r\n                #else\r\n                typeof<'T>\r\n                #endif\r\n    \r\n        interface AdaptiveValue<'T> with\r\n            member x.GetValue t = x.GetValue t  \r\n    \r\n    /// Reader used for ofASet operations.\r\n    /// It's safe to assume that the view function will only be called with non-empty HashSets.\r\n    /// Internally assumes that the view function is cheap.\r\n    type SetReader<'Key, 'Value, 'View>(input : aset<'Key * 'Value>, view : HashSet<'Value> -> 'View) =\r\n        inherit AbstractReader<HashMapDelta<'Key, 'View>>(HashMapDelta.empty)\r\n\r\n        let reader = input.GetReader()\r\n        let state = UncheckedDictionary.create<'Key, HashSet<'Value>>()\r\n\r\n        override x.Compute (token : AdaptiveToken) =\r\n            reader.GetChanges token |> Seq.choose (fun op ->\r\n                match op with\r\n                | Add(_, (k, v)) ->\r\n                    match state.TryGetValue k with\r\n                    | (true, set) ->    \r\n                        let newSet = HashSet.add v set\r\n                        state.[k] <- newSet\r\n                        Some (k, Set (view newSet))\r\n                    | _ ->\r\n                        let newSet = HashSet.single v\r\n                        state.[k] <- newSet\r\n                        Some (k, Set (view newSet))\r\n                | Rem(_, (k, v)) ->\r\n                    match state.TryGetValue k with\r\n                    | (true, set) ->    \r\n                        let newSet = HashSet.remove v set\r\n                        if newSet.IsEmpty then \r\n                            state.Remove k |> ignore\r\n                            Some (k, Remove)\r\n                        else \r\n                            state.[k] <- newSet\r\n                            Some (k, Set (view newSet))\r\n                    | _ ->\r\n                        None\r\n            )\r\n            |> HashMapDelta.ofSeq\r\n\r\n    /// Gets the current content of the amap as HashMap.\r\n    let inline force (map : amap<'Key, 'Value>) = \r\n        AVal.force map.Content\r\n\r\n    /// Creates a constant map using the creation function.\r\n    let inline constant (content : unit -> HashMap<'Key, 'Value>) = \r\n        ConstantMap(lazy(content())) :> amap<_,_> \r\n\r\n    /// Creates an adaptive map using the reader.\r\n    let inline create (reader : unit -> #IOpReader<HashMapDelta<'Key, 'Value>>) =\r\n        AdaptiveHashMapImpl(fun () -> reader() :> IOpReader<_>) :> amap<_,_>\r\n\r\n/// Functional operators for amap<_,_>\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule AMap =\r\n    open AdaptiveHashMapImplementation\r\n\r\n    /// The empty map.\r\n    let empty<'Key, 'Value> = EmptyMap<'Key, 'Value>.Instance\r\n    \r\n    /// A constant amap holding a single key/value.\r\n    let single (key : 'Key) (value : 'Value) =\r\n        constant (fun () -> HashMap.single key value)\r\n        \r\n    /// Creates an amap holding the given entries.\r\n    let ofSeq (elements : seq<'Key * 'Value>) =\r\n        constant (fun () -> HashMap.ofSeq elements)\r\n        \r\n    /// Creates an amap holding the given entries.\r\n    let ofList (elements : list<'Key * 'Value>) =\r\n        constant (fun () -> HashMap.ofList elements)\r\n        \r\n    /// Creates an amap holding the given entries.\r\n    let ofArray (elements : array<'Key * 'Value>) =\r\n        constant (fun () -> HashMap.ofArray elements)\r\n        \r\n    /// Creates an amap holding the given entries.\r\n    let ofHashMap (elements : HashMap<'Key, 'Value>) =\r\n        constant (fun () -> elements)\r\n\r\n    /// Creates an amap for the given aval.\r\n    let ofAVal (value : aval<#seq<'Key * 'Value>>) =\r\n        if value.IsConstant then\r\n            constant (fun () -> value |> AVal.force :> seq<_> |> HashMap.ofSeq)\r\n        else\r\n            create (fun () -> AValReader(value))\r\n\r\n    /// Creates an amap from the given set and takes an arbitrary value for duplicate entries.\r\n    let ofASetIgnoreDuplicates (set: aset<'Key * 'Value>) =\r\n        if set.IsConstant then\r\n            constant (fun () -> \r\n                let mutable result = HashMap.empty\r\n                for (k,v) in AVal.force set.Content do\r\n                    result <- HashMap.add k v result\r\n\r\n                result\r\n            )\r\n        else\r\n            create (fun () -> SetReader(set, Seq.head))\r\n    \r\n    /// Creates an amap from the given set while keeping all duplicate values for a key in a HashSet.           \r\n    let ofASet (set: aset<'Key * 'Value>) =\r\n        if set.IsConstant then\r\n            constant (fun () -> \r\n                let mutable result = HashMap.empty\r\n                for (k,v) in AVal.force set.Content do\r\n                    result <- \r\n                        result |> HashMap.alter k (fun o ->\r\n                            match o with\r\n                            | Some o -> HashSet.add v o |> Some\r\n                            | None -> HashSet.single v |> Some\r\n                        )\r\n\r\n                result\r\n            )\r\n        else\r\n            create (fun () -> SetReader(set, id))\r\n\r\n    /// Creates an aval providing access to the current content of the map.\r\n    let toAVal (map : amap<'Key, 'Value>) = map.Content\r\n\r\n    /// Adaptively maps over the given map.\r\n    let map (mapping : 'Key -> 'Value1 -> 'Value2) (map : amap<'Key, 'Value1>) =\r\n        if map.IsConstant then\r\n            constant (fun () -> map |> force |> HashMap.map mapping)\r\n        else\r\n            match map.History with\r\n            | Some history ->\r\n                create (fun () ->\r\n                    history.NewReader(HashMap.trace, MapWithKeyReader.DeltaMapping mapping)\r\n                )\r\n            | None ->\r\n                create (fun () -> MapWithKeyReader(map, mapping))\r\n    \r\n    /// Creates an amap with the keys from the set and the values given by mapping.\r\n    let mapSet (mapping : 'Key -> 'Value) (set : aset<'Key>) =\r\n        if set.IsConstant then\r\n            constant (fun () ->     \r\n                let c = set.Content |> AVal.force\r\n                let newStore = c.Store |> IntMap.map (List.map (fun key -> struct(key, mapping key)))\r\n                HashMap(c.Count, newStore)\r\n            )\r\n        else\r\n            match set.History with\r\n            | Some history ->\r\n                create (fun () ->\r\n                    history.NewReader(HashMap.trace, MapSetReader.DeltaMapping mapping)\r\n                )\r\n            | None ->\r\n                create (fun () -> MapSetReader(set, mapping))\r\n\r\n    /// Adaptively maps over the given map without exposing keys.\r\n    let map' (mapping : 'Value1 -> 'Value2) (map : amap<'Key, 'Value1>) =\r\n        if map.IsConstant then\r\n            constant (fun () -> map |> force |> HashMap.map (fun _ -> mapping))\r\n        else\r\n            match map.History with\r\n            | Some history ->\r\n                create (fun () ->\r\n                    history.NewReader(HashMap.trace, MapReader<'Key, 'Value1, 'Value2>.DeltaMapping mapping)\r\n                )\r\n            | None ->\r\n                create (fun () -> MapReader(map, mapping))\r\n        \r\n    /// Adaptively chooses all elements returned by mapping.  \r\n    let choose (mapping : 'Key -> 'Value1 -> option<'Value2>) (map : amap<'Key, 'Value1>) =\r\n        if map.IsConstant then\r\n            constant (fun () -> map |> force |> HashMap.choose mapping)\r\n        else\r\n            match map.History with\r\n            | Some history ->\r\n                create (fun () ->\r\n                    history.NewReader(HashMap.trace, ChooseWithKeyReader<'Key, 'Value1, 'Value2>.DeltaMapping mapping)\r\n                )\r\n            | None ->\r\n                create (fun () -> ChooseWithKeyReader(map, mapping))\r\n            \r\n    /// Adaptively chooses all elements returned by mapping without exposing keys.  \r\n    let choose' (mapping : 'Value1 -> option<'Value2>) (map : amap<'Key, 'Value1>) =\r\n        if map.IsConstant then\r\n            constant (fun () -> map |> force |> HashMap.choose (fun _ -> mapping))\r\n        else\r\n            match map.History with\r\n            | Some history ->\r\n                create (fun () ->\r\n                    history.NewReader(HashMap.trace, ChooseReader<'Key, 'Value1, 'Value2>.DeltaMapping mapping)\r\n                )\r\n            | None ->\r\n                create (fun () -> ChooseReader(map, mapping))\r\n \r\n    /// Adaptively filters the set using the given predicate.\r\n    let filter (predicate : 'Key -> 'Value -> bool) (map : amap<'Key, 'Value>) =\r\n        choose (fun k v -> if predicate k v then Some v else None) map\r\n\r\n    /// Adaptively filters the set using the given predicate without exposing keys.\r\n    let filter' (predicate : 'Value -> bool) (map : amap<'Key, 'Value>) =\r\n        choose' (fun v -> if predicate v then Some v else None) map\r\n\r\n\r\n    /// Adaptively applies the given mapping function to all elements and returns a new amap containing the results.  \r\n    let mapA (mapping: 'K -> 'T1 -> aval<'T2>) (map: amap<'K, 'T1>) =\r\n        if map.IsConstant then\r\n            let map = force map |> HashMap.map mapping\r\n            if map |> HashMap.forall (fun _ v -> v.IsConstant) then\r\n                constant (fun () -> map |> HashMap.map (fun _ v -> AVal.force v))\r\n            else\r\n                // TODO better impl possible\r\n                create (fun () -> MapAReader(ofHashMap map, fun _ v -> v))\r\n        else\r\n            create (fun () -> MapAReader(map, mapping))\r\n\r\n    /// Adaptively chooses all elements returned by mapping.  \r\n    let chooseA (mapping: 'K ->'T1 -> aval<Option<'T2>>) (list: amap<'K, 'T1>) =\r\n        if list.IsConstant then\r\n            let list = force list |> HashMap.map mapping\r\n            if list |> HashMap.forall (fun _ v -> v.IsConstant) then\r\n                constant (fun () -> list |> HashMap.choose (fun _ v -> AVal.force v))\r\n            else\r\n                // TODO better impl possible\r\n                create (fun () -> ChooseAReader(ofHashMap list, fun _ v -> v))\r\n        else\r\n            create (fun () -> ChooseAReader(list, mapping))\r\n\r\n    /// Adaptively filters the list using the given predicate.\r\n    let filterA (predicate: 'K -> 'V -> aval<bool>) (list: amap<'K, 'V>) =\r\n        list |> chooseA (fun i v ->\r\n            predicate i v |> AVal.map (function true -> Some v | false -> None)\r\n        )\r\n\r\n    /// Adaptively unions both maps using the given resolve functions when colliding entries are found.\r\n    let unionWith (resolve : 'Key -> 'Value -> 'Value -> 'Value) (a : amap<'Key, 'Value>) (b : amap<'Key, 'Value>) =\r\n        if a.IsConstant && b.IsConstant then\r\n            constant (fun () ->\r\n                let va = force a\r\n                let vb = force b\r\n                HashMap.unionWith resolve va vb\r\n            )\r\n        else\r\n            create (fun () -> UnionWithReader(a, b, resolve))\r\n\r\n    /// Adaptively unions both maps preferring the right value when colliding entries are found.\r\n    let union (a : amap<'Key, 'Value>) (b : amap<'Key, 'Value>) =\r\n        unionWith (fun _ _ r -> r) a b\r\n\r\n    /// Adaptively maps over the given aval and returns the resulting map.\r\n    let bind (mapping : 'T -> amap<'Key, 'Value>) (value : aval<'T>) =\r\n        if value.IsConstant then\r\n            mapping (AVal.force value)\r\n        else\r\n            create (fun () -> BindReader(value, mapping))\r\n\r\n    /// Creates an aset holding all key/value tuples from the map.\r\n    let toASet (map : amap<'Key, 'Value>) = \r\n        if map.IsConstant then\r\n            ASet.delay (fun () -> map |> force |> HashMap.toSeq |> HashSet.ofSeq)\r\n        else\r\n            ASet.ofReader (fun () -> ToASetReader(map))\r\n\r\n    /// Adaptively looks up the given key in the map.\r\n    /// Note that this operation should not be used extensively since its resulting\r\n    /// aval will be re-evaluated upon every change of the map.\r\n    let tryFind (key: 'K) (map: amap<'K, 'V>) =\r\n        map.Content |> AVal.map (HashMap.tryFind key)\r\n\r\n    /// Evaluates the given adaptive map and returns its current content.\r\n    /// This should not be used inside the adaptive evaluation\r\n    /// of other AdaptiveObjects since it does not track dependencies.\r\n    let force (set : amap<'K, 'V>) = AVal.force set.Content\r\n    \r\n    /// Adaptively tests if the map is empty.\r\n    let isEmpty (l: amap<'K, 'V>) =\r\n        l.Content |> AVal.map HashMap.isEmpty\r\n        \r\n    /// Adaptively gets the number of elements in the list.\r\n    let count (l: amap<'K, 'V>) =\r\n        l.Content |> AVal.map HashMap.count\r\n\r\n\r\n    /// Reduces the map using the given `AdaptiveReduction` and returns\r\n    /// the resulting adaptive value.\r\n    let reduce (r : AdaptiveReduction<'a, 's, 'v>) (map: amap<'k, 'a>) =\r\n        MapReductions.ReduceValue(r, map) :> aval<'v>\r\n        \r\n    /// Applies the mapping function to all elements of the map and reduces the results\r\n    /// using the given `AdaptiveReduction`.\r\n    /// Returns the resulting adaptive value.\r\n    let reduceBy (r : AdaptiveReduction<'b, 's, 'v>) (mapping: 'k -> 'a -> 'b) (map: amap<'k, 'a>) =\r\n        MapReductions.ReduceByValue(r, mapping, map) :> aval<'v>\r\n        \r\n    /// Applies the mapping function to all elements of the map and reduces the results\r\n    /// using the given `AdaptiveReduction`.\r\n    /// Returns the resulting adaptive value.\r\n    let reduceByA (r : AdaptiveReduction<'b, 's, 'v>) (mapping: 'k -> 'a -> aval<'b>) (map: amap<'k, 'a>) =\r\n        MapReductions.AdaptiveReduceByValue(r, mapping, map) :> aval<'v>\r\n        \r\n    let forall (predicate : 'K -> 'V -> bool) (map: amap<'K, 'V>) =\r\n        let reduction = AdaptiveReduction.countNegative |> AdaptiveReduction.mapOut (fun v -> v = 0)\r\n        reduceBy reduction predicate map\r\n        \r\n    let exists (predicate : 'K -> 'V -> bool) (map: amap<'K, 'V>) =\r\n        let reduction = AdaptiveReduction.countPositive |> AdaptiveReduction.mapOut (fun v -> v <> 0)\r\n        reduceBy reduction predicate map\r\n        \r\n    let forallA (predicate : 'K -> 'V -> aval<bool>) (map: amap<'K, 'V>) =\r\n        let reduction = AdaptiveReduction.countNegative |> AdaptiveReduction.mapOut (fun v -> v = 0)\r\n        reduceByA reduction predicate map\r\n        \r\n    let existsA (predicate : 'K -> 'V -> aval<bool>) (map: amap<'K, 'V>) =\r\n        let reduction = AdaptiveReduction.countPositive |> AdaptiveReduction.mapOut (fun v -> v <> 0)\r\n        reduceByA reduction predicate map\r\n        \r\n    let inline sumBy (mapping : 'K -> 'V -> 'T) (map : amap<'K, 'V>) =\r\n        reduceBy (AdaptiveReduction.sum()) mapping map\r\n        \r\n    let inline sumByA (mapping : 'K -> 'V -> aval<'T>) (map : amap<'K, 'V>) =\r\n        reduceByA (AdaptiveReduction.sum()) mapping map\r\n        \r\n    let inline averageBy (mapping : 'K -> 'V -> 'T) (map : amap<'K, 'V>) =\r\n        reduceBy (AdaptiveReduction.average()) mapping map\r\n        \r\n    let inline averageByA (mapping : 'K -> 'V -> aval<'T>) (map : amap<'K, 'V>) =\r\n        reduceByA (AdaptiveReduction.average()) mapping map\r\n        \r\n    let countBy (mapping : 'K -> 'V -> bool) (map : amap<'K, 'V>) =\r\n        reduceBy (AdaptiveReduction.countPositive) mapping map\r\n        \r\n    let countByA (mapping : 'K -> 'V -> aval<bool>) (map : amap<'K, 'V>) =\r\n        reduceByA (AdaptiveReduction.countPositive) mapping map\r\n\r\n    /// Adaptively folds over the map using add for additions and trySubtract for removals.\r\n    /// Note the trySubtract may return None indicating that the result needs to be recomputed.\r\n    /// Also note that the order of elements given to add/trySubtract is undefined.\r\n    let foldHalfGroup (add : 'S -> 'K -> 'V -> 'S) (trySub : 'S -> 'K -> 'V -> option<'S>) (zero : 'S) (map : amap<'K, 'V>) =\r\n        let inline trySub s (struct(k,v)) =\r\n            match trySub s k v with\r\n            | Some v -> ValueSome v\r\n            | None -> ValueNone\r\n\r\n        let inline add s (struct(k,v)) = add s k v\r\n        reduceBy (AdaptiveReduction.halfGroup zero add trySub) (fun k v -> struct(k,v)) map\r\n        \r\n    /// Adaptively folds over the map using add for additions and subtract for removals.\r\n    /// Note that the order of elements given to add/subtract is undefined.\r\n    let foldGroup (add : 'S -> 'K -> 'V -> 'S) (sub : 'S -> 'K -> 'V -> 'S) (zero : 'S) (map : amap<'K, 'V>) =\r\n        let inline sub s (struct(k,v)) = sub s k v\r\n        let inline add s (struct(k,v)) = add s k v\r\n        reduceBy (AdaptiveReduction.group zero add sub) (fun k v -> struct(k,v)) map\r\n        \r\n    /// Adaptively folds over the map using add for additions and recomputes the value on every removal.\r\n    /// Note that the order of elements given to add is undefined.\r\n    let fold (add : 'S -> 'K -> 'V -> 'S) (zero : 'S) (map : amap<'K, 'V>) =\r\n        let inline add s (struct(k,v)) = add s k v\r\n        reduceBy (AdaptiveReduction.fold zero add) (fun k v -> struct(k,v)) map","module Aornota.Duh.Common.AdaptiveValues\r\n\r\nopen Aornota.Duh.Common.ChangeableValues\r\nopen Aornota.Duh.Common.Domain\r\nopen Aornota.Duh.Common.ProjectDependencyData\r\n\r\nopen FSharp.Data.Adaptive\r\n\r\ntype DependencyType = | Self | PackageDependency of int | ProjectDependency of int\r\n\r\ntype DependencyInfo = { Project : Project ; DependencyType : DependencyType }\r\n\r\ntype DependencyPath = | DependencyPath of DependencyInfo list\r\n\r\ntype ProjectDependencyPaths = { Project : Project ; DependencyPaths : DependencyPath list }\r\n\r\nlet private depth = function | Self -> 0 | PackageDependency depth | ProjectDependency depth -> depth\r\n\r\nlet private findProjectDependencies project = projectsDependencies |> List.find (fun pd -> pd.Project = project)\r\n\r\n// Note: No attempt made to optimize this - nor check for cyclic dependencies.\r\nlet private dependencyPaths (projectDependencies:ProjectDependencies) =\r\n    let direct depth (dependencies:Dependency Set) =\r\n        dependencies\r\n        |> List.ofSeq\r\n        |> List.map (fun d ->\r\n            match d with\r\n            | PackageReference project -> { Project = project ; DependencyType = PackageDependency depth }\r\n            | ProjectReference project -> { Project = project ; DependencyType = ProjectDependency depth })\r\n    let rec traverse currentDepth (currentPaths:DependencyPath list) =\r\n        currentPaths\r\n        |> List.map (fun (DependencyPath currentPath) ->\r\n            match currentPath with\r\n            | [] -> [ DependencyPath currentPath ]\r\n            | h :: _ ->\r\n                let projectDependencies = findProjectDependencies h.Project\r\n                let dependencies = projectDependencies.Dependencies\r\n                if dependencies.IsEmpty then [ DependencyPath currentPath ]\r\n                else\r\n                    let currentDepth = currentDepth + 1\r\n                    let directN = direct currentDepth dependencies\r\n                    let newPaths = directN |> List.map (fun di -> DependencyPath (di :: currentPath))\r\n                    newPaths |> traverse currentDepth)\r\n        |> List.collect id\r\n    let project = projectDependencies.Project\r\n    let self = if project.Packaged then Some [ { Project = project ; DependencyType = Self } ] else None\r\n    let direct1 = projectDependencies.Dependencies |> direct 1\r\n    let paths = direct1 |> List.map (fun di -> DependencyPath [ di ]) |> traverse 1\r\n    let dependencyPaths = match self with | Some self -> DependencyPath self :: paths | None -> paths\r\n    { Project = project ; DependencyPaths = dependencyPaths |> List.filter (fun (DependencyPath dp) -> not dp.IsEmpty) }\r\n\r\nlet private projectsDependencyPaths = projectsDependencies |> List.map dependencyPaths\r\n\r\nlet aAnalysis = adaptive {\r\n    let! packagedProjectStatusMap = cPackagedProjectStatusMap |> AMap.toAVal\r\n    let hasCodeChanges project = match packagedProjectStatusMap.TryFind (key project) with | Some pps -> pps.HasCodeChanges | None -> false\r\n    let affectedProjectDependencyPaths (projectDependencyPaths:ProjectDependencyPaths) =\r\n        let affectedDependencyPath (DependencyPath dependencyPath) =\r\n            match dependencyPath |> List.mapi (fun i di -> if hasCodeChanges di.Project then Some i else None) |> List.choose id with\r\n            | [] -> None\r\n            | affectedIndices ->\r\n                let minAffectedIndex = affectedIndices |> List.min\r\n                dependencyPath |> List.skip minAffectedIndex |> DependencyPath |> Some\r\n        match projectDependencyPaths.DependencyPaths |> List.choose affectedDependencyPath with\r\n        | [] -> None\r\n        | affectedDependencyPaths ->\r\n            (* TODO-NMB:\r\n                -- Do we want to filter out \"direct to project\" dependencies?...\r\n                    - can give weird results (e.g. for Common.Interfaces code changes, RepositoriesTests has maxDepth = 3 but Repositories has maxDepth = 3)...\r\n                    - so maybe handle appropriately when displaying analysis?... *)\r\n            (*let selfOrPackage =\r\n                affectedDependencyPaths\r\n                |> List.filter (fun (DependencyPath dp) ->\r\n                    let selfOrDirect = dp |> List.last\r\n                    match selfOrDirect.DependencyType with | ProjectDependency _ -> false | _ -> true)\r\n            if selfOrPackage.Length = 0 then None\r\n            else*)\r\n                let uniqueSelfOrDirectWithMaxDepth =\r\n                    affectedDependencyPaths\r\n                    |> List.groupBy (fun (DependencyPath dp) ->\r\n                        let selfOrDirect = dp |> List.last\r\n                        selfOrDirect.Project)\r\n                    |> List.map (fun (_, dependencyPaths) ->\r\n                        dependencyPaths\r\n                        |> List.map (fun (DependencyPath dp) ->\r\n                            let deepest = dp |> List.head\r\n                            DependencyPath dp, depth deepest.DependencyType)\r\n                        |> List.maxBy snd)\r\n                let maxDepth = uniqueSelfOrDirectWithMaxDepth |> List.map snd |> List.max\r\n                Some ({ Project = projectDependencyPaths.Project ; DependencyPaths = uniqueSelfOrDirectWithMaxDepth |> List.map fst }, maxDepth)\r\n    let packagedProjectStatuses = packagedProjectStatusMap |> List.ofSeq\r\n    if packagedProjectStatuses |> List.map snd |> List.exists (fun pps -> pps.HasCodeChanges) then\r\n        let affected = projectsDependencyPaths |> List.choose affectedProjectDependencyPaths\r\n        transact (fun () -> cTabLatestDoneMap.[Development] <- None)\r\n        transact (fun () -> cTabLatestDoneMap.[CommittingPushing] <- None)\r\n        return! AVal.map3 (fun a b c -> Some(a, b, c)) (AVal.constant affected) cCurrentTab (cTabLatestDoneMap |> AMap.toAVal)\r\n    else return! AVal.constant None }\r\n","namespace Feliz\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\n\r\nmodule internal ReactInterop =\r\n    let useEffectWithDeps (effect:  obj) (deps: obj) : unit = import \"useEffectWithDeps\" \"./ReactInterop.js\"\r\n    let useEffect (effect: obj) : unit =  import \"useEffect\" \"./ReactInterop.js\"\r\n\r\ntype internal Internal() =\r\n    static let propsWithKey (withKey: ('props -> string) option) props =\r\n        match withKey with\r\n        | Some f ->\r\n            props?key <- f props\r\n            props\r\n        | None -> props\r\n    static member\r\n        functionComponent\r\n        (\r\n            renderElement: 'props -> ReactElement,\r\n            ?name: string,\r\n            ?withKey: 'props -> string\r\n        )\r\n        : Fable.React.FunctionComponent<'props> =\r\n            name |> Option.iter (fun name -> renderElement?displayName <- name)\r\n            fun props ->\r\n                let props = props |> propsWithKey withKey\r\n                Interop.reactApi.createElement(renderElement, props)\r\n    static member\r\n        memo\r\n        (\r\n            renderElement: 'props -> ReactElement,\r\n            ?name: string,\r\n            ?areEqual: 'props -> 'props -> bool,\r\n            ?withKey: 'props -> string\r\n        )\r\n        : Fable.React.FunctionComponent<'props> =\r\n            let memoElementType = Interop.reactApi.memo(renderElement, (defaultArg areEqual (unbox null)))\r\n            name |> Option.iter (fun name -> memoElementType?displayName <- name)\r\n            fun props ->\r\n                let props = props |> propsWithKey withKey\r\n                Interop.reactApi.createElement(memoElementType, props)\r\n\r\ntype React =\r\n    /// The `useState` hook that create a state variable for React function components.\r\n    static member useState<'t>(initial: 't) = Interop.reactApi.useState(initial)\r\n    static member useReducer(update, initialState) = Interop.reactApi.useReducer update initialState\r\n    /// The `useEffect` hook that creates a disposable effect for React function components\r\n    /// This effect has no dependencies which means the effect is re-executed on every re-render.\r\n    /// To make the effect run once (for example you subscribe once to web sockets) then provide an empty array\r\n    /// for the dependencies: `React.useEffect(disposableEffect, [| |])`.\r\n    static member useEffect(effect: unit -> IDisposable) : unit = ReactInterop.useEffect(effect)\r\n    /// The `useEffect` hook that creates a disposable effect for React function components.\r\n    /// This effect takes a array of *dependencies*.\r\n    /// Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\r\n    /// you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\r\n    static member useEffect(effect: unit -> IDisposable, dependencies: obj []) : unit = ReactInterop.useEffectWithDeps effect dependencies\r\n    /// Creates a disposable instance by providing the implementation of the dispose member\r\n    static member createDisposable(dispose: unit -> unit) =\r\n        { new IDisposable with member this.Dispose() = dispose() }\r\n\r\n    /// React hook to define and use an effect only once when a function component renders for the first time.\r\n    /// This an alias for `React.useEffect(effect, [| |])` which explicitly provide an empty array for the dependencies of the effect which means the effect will only run once.\r\n    static member useEffectOnce(effect: unit -> unit) =\r\n        React.useEffect(effect, [| |])\r\n\r\n    /// React hook to define and use a disposable effect only once when a function component renders for the first time.\r\n    /// This an alias for `React.useEffect(effect, [| |])` which explicitly provide an empty array for the dependencies of the effect which means the effect will only run once.\r\n    static member useEffectOnce(effect: unit -> IDisposable) =\r\n        React.useEffect(effect, [| |])\r\n    /// The `useEffect` hook that creates an effect for React function components.\r\n    /// This effect is executed *every time* the function component re-renders.\r\n    ///\r\n    /// To make the effect run only once, write: `React.useEffect(effect, [| |])` which explicitly states\r\n    /// that this effect has no dependencies and should only run once on initial render.\r\n    static member useEffect(effect: unit -> unit) : unit =\r\n        ReactInterop.useEffect\r\n            (fun _ ->\r\n                effect()\r\n                React.createDisposable(ignore))\r\n\r\n    /// The `useEffect` hook that creates an effect for React function components. This effect takes a array of *dependencies*.\r\n    /// Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\r\n    /// you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\r\n    static member useEffect(effect: unit -> unit, dependencies: obj []) : unit =\r\n        ReactInterop.useEffectWithDeps\r\n            (fun _ ->\r\n                effect()\r\n                React.createDisposable(ignore))\r\n            dependencies\r\n\r\n    /// <summary>\r\n    /// The `useCallback` hook. Returns a memoized callback. Pass an inline callback and an array of dependencies.\r\n    /// `useCallback` will return a memoized version of the callback that only changes if one of the dependencies has changed.\r\n    /// </summary>\r\n    /// <param name='callbackFunction'>A callback function to be memoized.</param>\r\n    /// <param name='dependencies'>An array of dependencies upon which the callback function depends.\r\n    /// If not provided, defaults to empty array, representing dependencies that never change.</param>\r\n    static member useCallback(callbackFunction: 'a -> 'b, ?dependencies: obj array) =\r\n        Interop.reactApi.useCallback callbackFunction (defaultArg dependencies [||])\r\n\r\n    /// <summary>\r\n    /// The `useMemo` hook. Returns a memoized value. Pass a \"create\" function and an array of dependencies.\r\n    /// `useMemo` will only recompute the memoized value when one of the dependencies has changed.\r\n    /// </summary>\r\n    /// <param name='createFunction'>A create function returning a value to be memoized.</param>\r\n    /// <param name='dependencies'>An array of dependencies upon which the create function depends.\r\n    /// If not provided, defaults to empty array, representing dependencies that never change.</param>\r\n    static member useMemo(createFunction: unit -> 'a, ?dependencies: obj array) =\r\n        Interop.reactApi.useMemo createFunction (defaultArg dependencies [||])\r\n\r\n    //\r\n    // React.functionComponent\r\n    //\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(name: string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, name)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(name: string, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> Html.fragment)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(name: string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> Html.fragment, name)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> Html.fragment, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(name: string, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> Html.fragment, name, withKey=withKey)\r\n\r\n    //\r\n    // React.memo\r\n    //\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(render: 'props -> ReactElement) =\r\n        Internal.memo(render)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, render: 'props -> ReactElement) =\r\n        Internal.memo(render, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, name)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, name, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> Html.fragment, name, areEqual=areEqual, withKey=withKey)\r\n\r\n    //\r\n    // React.useContext\r\n    //\r\n\r\n    /// <summary>\r\n    /// Creates a Context object. When React renders a component that subscribes to this Context object\r\n    /// it will read the current context value from the closest matching Provider above it in the tree.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='defaultValue'>A default value that is only used when a component does not have a matching Provider above it in the tree.</param>\r\n    static member createContext<'a>(?name: string, ?defaultValue: 'a) =\r\n        let contextObject = Interop.reactApi.createContext (defaultArg defaultValue Fable.Core.JS.undefined<'a>)\r\n        name |> Option.iter (fun name -> contextObject?displayName <- name)\r\n        contextObject\r\n\r\n    /// <summary>\r\n    /// A Provider component that allows consuming components to subscribe to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='contextValue'>The context value to be provided to descendant components.</param>\r\n    /// <param name='child'>A child element.</param>\r\n    static member contextProvider(contextObject: Fable.React.IContext<'a>, contextValue: 'a, child: ReactElement) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Provider, createObj [\"value\" ==> contextValue], [child])\r\n    /// <summary>\r\n    /// A Provider component that allows consuming components to subscribe to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='contextValue'>The context value to be provided to descendant components.</param>\r\n    /// <param name='children'>A sequence of child elements.</param>\r\n    static member contextProvider(contextObject: Fable.React.IContext<'a>, contextValue: 'a, children: #seq<ReactElement>) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Provider, createObj [\"value\" ==> contextValue], children)\r\n\r\n    /// <summary>\r\n    /// A Consumer component that subscribes to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member contextConsumer(contextObject: Fable.React.IContext<'a>, render: 'a -> ReactElement) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Consumer, null, [!!render])\r\n    /// <summary>\r\n    /// A Consumer component that subscribes to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='render'>A render function that returns a sequence of elements.</param>\r\n    static member contextConsumer(contextObject: Fable.React.IContext<'a>, render: 'a -> #seq<ReactElement>) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Consumer, null, [!!(render >> Html.fragment)])\r\n\r\n    /// <summary>\r\n    /// The `useContext` hook. Accepts a context object (the value returned from React.createContext) and returns the current context value for that context.\r\n    /// The current context value is determined by the value prop of the nearest Provider component above the calling component in the tree.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    static member useContext(contextObject: Fable.React.IContext<'a>) = Interop.reactApi.useContext contextObject\r\n","module Aornota.Duh.Ui.App\r\n\r\nopen Aornota.Duh.Common.AdaptiveValues\r\nopen Aornota.Duh.Common.ChangeableValues\r\nopen Aornota.Duh.Common.Domain\r\n\r\nopen Browser.Dom\r\n\r\nopen Fable.React.Adaptive\r\nmodule ReactHB = Fable.React.HookBindings\r\n\r\nopen Feliz\r\nopen Feliz.MaterialUI\r\n\r\nopen FSharp.Data.Adaptive\r\n\r\nlet [<Literal>] private DUH = \"duh\"\r\n\r\n// α | *β* | γ | δ | ε | ζ | η | θ | ι | κ | λ | μ | ν | ξ | ο | π | ρ | σ | τ | υ | φ | χ | ψ | ω\r\nlet [<Literal>] private DUH_VERSION = \"β\" // note: keep synchronized with  ./index.html | ../../package.json | ../../README.md\r\n\r\nlet [<Literal>] private DUH_LOGO = \"duh-24x24.png\"\r\nlet [<Literal>] private VISUALIZATION_FILENAME = \"visualization.png\" // note: keep synchronized with ../visualizer-console/visualizer.fs and ../../build.fsx\r\n\r\nlet [<Literal>] private BULLET = \"●\"\r\n\r\nlet private projectColour = function\r\n    | Blue -> color.blue | Coral -> color.coral | Cyan -> color.cyan | Goldenrod -> color.goldenRod | Grey -> color.gray | Pink -> color.pink | Salmon -> color.salmon\r\n    | SeaGreen -> color.seaGreen | SkyBlue -> color.skyBlue | SlateBlue -> color.slateBlue | SlateGrey -> color.slateGray | SteelBlue -> color.steelBlue | Yellow -> color.yellow\r\n\r\nlet private preamble =\r\n    Html.div [\r\n        Mui.typography [\r\n            typography.variant.h4\r\n            typography.paragraph true\r\n            typography.children [\r\n                Html.img [\r\n                    prop.style [ style.verticalAlign.middle ]\r\n                    prop.src DUH_LOGO\r\n                    prop.alt DUH ]\r\n                Html.text \" | \"\r\n                Html.strong DUH\r\n                Html.text (sprintf \" (%s)\" DUH_VERSION) ] ]\r\n        Mui.typography [\r\n            typography.paragraph true\r\n            typography.children [\r\n                Html.strong DUH\r\n                Html.text \" (dependency update helper) is a tool to work out the optimal order of package reference updates — \"\r\n                Html.text \"both during development and when committing / pushing changes.\" ] ] ]\r\n\r\nlet private packageCheckbox (key, packagedProjectStatus:PackagedProjectStatus) =\r\n    let project = packagedProjectStatus.Project\r\n    let onClick = (fun _ -> transact (fun () -> cPackagedProjectStatusMap.[key] <- { packagedProjectStatus with HasCodeChanges = not packagedProjectStatus.HasCodeChanges } ))\r\n    Mui.formControlLabel [\r\n        formControlLabel.label project.Name\r\n        formControlLabel.control (\r\n            Mui.checkbox [\r\n                prop.style [ style.color (projectColour project.Solution.Colour) ]\r\n                checkbox.checked' packagedProjectStatus.HasCodeChanges\r\n                prop.onClick onClick ] ) ]\r\n\r\nlet private solutionCodeChanges (solution:Solution, packagedProjectStatuses:seq<string * PackagedProjectStatus>) =\r\n    let sorted =\r\n        packagedProjectStatuses\r\n        |> List.ofSeq\r\n        |> List.sortBy (fun (_, pps) -> pps.Project.Name)\r\n    Mui.grid [\r\n        grid.item true\r\n        grid.children [\r\n            Mui.typography [\r\n                typography.color.primary\r\n                typography.children [\r\n                   Html.strong solution.Name\r\n                   Html.text (sprintf \" solution (%s)\" (repoText solution.Repo)) ] ]\r\n            Mui.formGroup [\r\n                formGroup.row false\r\n                formGroup.children [\r\n                    yield! sorted |> List.map packageCheckbox ] ] ] ]\r\n\r\nlet private codeChanges packagedProjectStatusMap =\r\n    let solution (packagedProjectStatus:PackagedProjectStatus) = packagedProjectStatus.Project.Solution\r\n    let groupedAndSorted =\r\n        packagedProjectStatusMap\r\n        |> List.ofSeq\r\n        |> List.groupBy (snd >> solution)\r\n        |> List.sortBy (fun (solution, _) -> solutionSortOrder solution, solution.Name)\r\n    Html.div [\r\n        Mui.typography [\r\n            typography.color.secondary\r\n            typography.children [\r\n                Html.text \"Please select the \"\r\n                Html.strong \"packaged\"\r\n                Html.text \" projects for which code changes have been made:\" ] ]\r\n        Mui.grid [\r\n            prop.style [ style.paddingTop 20 ; style.paddingLeft 20 ; style.paddingBottom 20 ]\r\n            grid.container true\r\n            grid.spacing._4\r\n            grid.children [\r\n                yield! groupedAndSorted |> List.map solutionCodeChanges ] ] ]\r\n\r\nlet private analysis (affected:(ProjectDependencyPaths * int) list) currentTab latestDone =\r\n    (* TODO-NMB:\r\n        -- Tab-specific notes?...\r\n        -- Various UI improvements, e.g.:\r\n            - better formatting...\r\n            - use textSecondary for \"done\" steps (i.e. ordinal <= latestDone-or-0)...\r\n            - button for first \"undone\" step to mark as \"done\" (i.e. by \"transact (fun () -> cTabLatestDoneMap.[currentTab] <- Some ordinal)\")... *)\r\n    let latestDone = latestDone |> Option.defaultValue 0\r\n    let stepProject (projectDependencyPaths:ProjectDependencyPaths) =\r\n        let project = projectDependencyPaths.Project\r\n        Mui.typography [\r\n            typography.paragraph false\r\n            typography.children [\r\n                Html.text (sprintf \"%s (%s)\" project.Name project.Solution.Name) ] ]\r\n    let step (ordinal, projectsDependencyPaths:ProjectDependencyPaths list) = [\r\n        Mui.typography [\r\n            typography.variant.h6\r\n            typography.paragraph true\r\n            typography.children [\r\n                Html.strong (sprintf \"Step %i\" ordinal) ] ]\r\n        yield! projectsDependencyPaths |> List.map stepProject ]\r\n    let groupedAndSorted =\r\n        affected\r\n        |> List.groupBy snd\r\n        |> List.sortBy fst\r\n        |> List.map (fun (maxDepth, paths) ->\r\n            let sorted =\r\n                paths\r\n                |> List.map fst\r\n                |> List.sortBy (fun pdp -> solutionSortOrder pdp.Project.Solution, pdp.Project.Name)\r\n            maxDepth + 1, sorted)\r\n    let current = match currentTab with | Development -> \"development\" | CommittingPushing -> \"committing / pushing\"\r\n    Html.div [\r\n        prop.style [ style.paddingLeft 20 ; style.paddingBottom 20 ]\r\n        prop.children [\r\n            Mui.typography [\r\n                typography.paragraph true\r\n                typography.children [\r\n                    Html.strong \"TODO-NMB: \"\r\n                    Html.text (sprintf \"Specific notes about these %s instructions - plus various UI improvements...\" current) ] ]\r\n            yield! groupedAndSorted |> List.map step |> List.collect id ] ]\r\n\r\nlet private analysisTabs affected currentTab latestDone =\r\n    let tabValue = function | Development -> 0 | CommittingPushing -> 1 // seemingly needs to be zero-based\r\n    let onClick analysisTab = (fun _ -> transact (fun () -> cCurrentTab.Value <- analysisTab))\r\n    let muiTab analysisTab =\r\n        let label = match analysisTab with | Development -> \"Development\" | CommittingPushing -> \"Committing / pushing\"\r\n        let iconClassName = match analysisTab with | Development -> \"far fa-file-code\" | CommittingPushing -> \"fas fa-code-branch\"\r\n        Mui.tab [\r\n            tab.label label\r\n            tab.icon (\r\n                Mui.icon [\r\n                    icon.classes [ classes.icon.root iconClassName ]\r\n                    if analysisTab = currentTab then icon.color.primary ] )\r\n            tab.value (tabValue analysisTab)\r\n            prop.onClick (onClick analysisTab) ]\r\n    Html.div [\r\n        Mui.typography [\r\n            typography.color.secondary\r\n            typography.paragraph true\r\n            typography.children [\r\n                Html.text \"Optimal order of package reference updates:\" ] ]\r\n        Mui.tabs [\r\n            prop.style [ style.paddingLeft 20 ; style.paddingBottom 20 ]\r\n            tabs.indicatorColor.primary\r\n            tabs.value (tabValue currentTab)\r\n            tabs.children [\r\n                muiTab Development\r\n                muiTab CommittingPushing ] ]\r\n        analysis affected currentTab latestDone ]\r\n\r\nlet private visualization showingVisualization =\r\n    Html.div [\r\n        Mui.formGroup [\r\n            formGroup.children [\r\n                Mui.formControlLabel [\r\n                    formControlLabel.label \"Display visualization of project/package dependencies\"\r\n                    formControlLabel.control (\r\n                        Mui.checkbox [\r\n                            checkbox.color.primary\r\n                            checkbox.checked' showingVisualization\r\n                            prop.onClick (fun _ -> transact (fun () -> cShowingVisualization.Value <- not cShowingVisualization.Value ) ) ] ) ] ] ]\r\n        if showingVisualization then\r\n            Html.div [\r\n                prop.style [ style.paddingLeft 20 ]\r\n                prop.children [\r\n                    Html.img [\r\n                        prop.style [\r\n                            style.paddingTop 20\r\n                            style.paddingBottom 20 ]\r\n                        prop.src VISUALIZATION_FILENAME\r\n                        prop.alt \"Visualization of project/package dependencies\" ]\r\n                    Mui.typography [\r\n                        typography.children [\r\n                            Html.text (sprintf \"%s projects within the same solution share the same colour (with a darker shade used for \" BULLET)\r\n                            Html.strong \"packaged\"\r\n                            Html.text \" projects)\" ] ]\r\n                    Mui.typography [\r\n                        typography.children [\r\n                            Html.text (sprintf \"%s solid lines indicate project-to-\" BULLET)\r\n                            Html.strong \"package\"\r\n                            Html.text \" references\" ] ]\r\n                    Mui.typography [\r\n                        typography.children [\r\n                            Html.text (sprintf \"%s dotted lines indicate project-to-project references\" BULLET) ] ] ] ] ]\r\n\r\n// TEMP-NMB...let private debug temp = Html.div [ Mui.typography [ typography.children [ Html.text (sprintf \"%A\" temp) ] ] ]\r\n\r\nlet private app =\r\n    React.functionComponent (fun () ->\r\n        let packagedProjectStatusMap = ReactHB.Hooks.useAdaptive cPackagedProjectStatusMap\r\n        let analysis = ReactHB.Hooks.useAdaptive aAnalysis\r\n        let showingVisualization = ReactHB.Hooks.useAdaptive cShowingVisualization\r\n        Html.div [\r\n            preamble\r\n            codeChanges packagedProjectStatusMap\r\n            match analysis with\r\n            | Some (affected, currentTab, tabLatestDoneMap) ->\r\n                analysisTabs affected currentTab tabLatestDoneMap.[currentTab]\r\n            | None -> ()\r\n            Mui.divider []\r\n            visualization showingVisualization ] )\r\n\r\nReactDOM.render (app, document.getElementById \"app\") // needs to match id of div in index.html\r\n"],"sourceRoot":""}